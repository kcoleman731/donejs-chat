/*[system-bundles-config]*/
System.bundles = {"dev-bundle.css!":["bootstrap@3.3.7#less/bootstrap.less!steal-less@1.3.3#less"]};
/*node_modules/can-zone/register*/
define('node_modules/can-zone/register', function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        'format cjs';
        (function () {
            var isNode = typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';
            var isWorker = typeof WorkerGlobalScope !== 'undefined' && typeof self !== 'undefined' && self instanceof WorkerGlobalScope;
            var g = typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope ? self : isNode ? global : window;
            if (typeof module !== 'undefined' && !!module.exports) {
                module.exports = wrapAll;
            }
            var forEach = Array.prototype.forEach || function (cb) {
                var i = 0, len = this.length;
                for (; i < len; i++) {
                    cb.call(this, this[i], i);
                }
            };
            var props = Array.prototype.concat.call([
                'setTimeout',
                'clearTimeout',
                'requestAnimationFrame',
                'cancelAnimationFrame',
                'Promise.prototype.then',
                'XMLHttpRequest.prototype.send',
                'Node.prototype.addEventListener',
                'Node.prototype.removeEventListener',
                'process.nextTick',
                'setImmediate',
                'clearImmediate',
                {
                    prop: 'MutationObserver',
                    fn: function (MutationObserver) {
                        return function (fn) {
                            return new MutationObserver(fn);
                        };
                    }
                }
            ], getGlobalEventHandlersNames().map(function (name) {
                return 'HTMLElement.prototype.' + name;
            }));
            wrapAll(g);
            if (g.Promise) {
                monitor(g, 'Promise', 'Promise.prototype.then', g);
            }
            function extract(obj, prop) {
                var parts = prop.split('.');
                while (parts.length > 1) {
                    prop = parts.shift();
                    obj = obj[prop];
                    if (!obj)
                        break;
                    if (parts.length === 1)
                        prop = parts[0];
                }
                return [
                    obj,
                    prop
                ];
            }
            function wrapAll(globalObj) {
                var global = globalObj || g;
                var wrapped = global.__canZoneWrapped;
                if (!wrapped) {
                    wrapped = global.__canZoneWrapped = {};
                }
                forEach.call(props, function (prop) {
                    var fn;
                    if (typeof prop === 'object') {
                        fn = prop.fn;
                        prop = prop.prop;
                    }
                    var key = prop;
                    if (wrapped[key]) {
                        return;
                    }
                    var results = extract(global, prop);
                    var obj = results[0];
                    prop = results[1];
                    if (!isGlobalEventHandler(prop) && (!obj || !obj[prop])) {
                        return;
                    } else {
                        wrapped[key] = true;
                    }
                    wrapInZone(obj, prop, fn, global);
                });
            }
            function wrapInZone(object, property, fn, global) {
                var wrappedFn = function () {
                    var Zone = global.CanZone;
                    if (typeof Zone !== 'undefined' && !!Zone.current) {
                        return Zone.tasks[property](fn, Zone).apply(this, arguments);
                    }
                    return fn.apply(this, arguments);
                };
                var descriptor = Object.getOwnPropertyDescriptor(object, property) || {};
                if (isGlobalEventHandler(property)) {
                    fn = descriptor.set;
                    descriptor.set = wrappedFn;
                } else {
                    fn = fn ? fn(object[property]) : object[property];
                    descriptor.value = wrappedFn;
                    descriptor.writable = true;
                }
                Object.defineProperty(object, property, descriptor);
                wrappedFn.zoneWrapped = true;
            }
            function isGlobalEventHandler(property) {
                return property.substr(0, 2) === 'on';
            }
            function getGlobalEventHandlersNames() {
                var names = [];
                if (!isNode && !isWorker) {
                    names = Object.getOwnPropertyNames(HTMLElement.prototype).filter(isGlobalEventHandler);
                }
                return names;
            }
            function monitor(object, property, thingToRewrap, global) {
                var current = object[property];
                Object.defineProperty(object, property, {
                    get: function () {
                        return current;
                    },
                    set: function (val) {
                        var hasChanged = !val.zoneWrapped && val !== current;
                        current = val;
                        if (hasChanged) {
                            var results = extract(object, thingToRewrap);
                            var localObject = results[0];
                            var localProperty = results[1];
                            wrapInZone(localObject, localProperty, null, global);
                            monitor(object, property, thingToRewrap, global);
                        }
                    }
                });
            }
        }());
    }(function () {
        return this;
    }(), require, exports, module));
});
/*package.json!npm*/
define('package.json!npm', [
    '@loader',
    'npm-extension',
    'module',
    'live-reload',
    'node_modules/can-zone/register',
    'live-reload',
    'node_modules/can-zone/register'
], function (loader, npmExtension, module) {
    npmExtension.addExtension(loader);
    if (!loader.main) {
        loader.main = 'donejs-chat@0.0.0#index.stache!done-autorender';
    }
    loader._npmExtensions = [].slice.call(arguments, 2);
    (function (loader, packages, options) {
        var g = loader.global;
        if (!g.process) {
            g.process = {
                argv: [],
                cwd: function () {
                    var baseURL = loader.baseURL;
                    return baseURL;
                },
                browser: true,
                env: { NODE_ENV: loader.env },
                version: '',
                platform: navigator && navigator.userAgent && /Windows/.test(navigator.userAgent) ? 'win' : ''
            };
        }
        if (!loader.npm) {
            loader.npm = {};
            loader.npmPaths = {};
            loader.globalBrowser = {};
        }
        if (!loader.npmParentMap) {
            loader.npmParentMap = options.npmParentMap || {};
        }
        var rootPkg = loader.npmPaths.__default = packages[0];
        var rootConfig = rootPkg.steal || rootPkg.system;
        var lib = rootConfig && rootConfig.directories && rootConfig.directories.lib;
        var setGlobalBrowser = function (globals, pkg) {
            for (var name in globals) {
                loader.globalBrowser[name] = {
                    pkg: pkg,
                    moduleName: globals[name]
                };
            }
        };
        var setInNpm = function (name, pkg) {
            if (!loader.npm[name]) {
                loader.npm[name] = pkg;
            }
            loader.npm[name + '@' + pkg.version] = pkg;
        };
        var forEach = function (arr, fn) {
            var i = 0, len = arr.length;
            for (; i < len; i++) {
                res = fn.call(arr, arr[i], i);
                if (res === false)
                    break;
            }
        };
        var setupLiveReload = function () {
            if (loader.liveReloadInstalled) {
                loader['import']('live-reload', { name: module.id }).then(function (reload) {
                    reload.dispose(function () {
                        var pkgInfo = loader.npmContext.pkgInfo;
                        delete pkgInfo[rootPkg.name + '@' + rootPkg.version];
                        var idx = -1;
                        forEach(pkgInfo, function (pkg, i) {
                            if (pkg.name === rootPkg.name && pkg.version === rootPkg.version) {
                                idx = i;
                                return false;
                            }
                        });
                        pkgInfo.splice(idx, 1);
                    });
                });
            }
        };
        var ignoredConfig = [
            'bundle',
            'configDependencies',
            'transpiler',
            'treeShaking'
        ];
        packages.reverse();
        forEach(packages, function (pkg) {
            var steal = pkg.steal || pkg.system;
            if (steal) {
                var main = steal.main;
                delete steal.main;
                var configDeps = steal.configDependencies;
                if (pkg !== rootPkg) {
                    forEach(ignoredConfig, function (name) {
                        delete steal[name];
                    });
                }
                loader.config(steal);
                if (pkg === rootPkg) {
                    steal.configDependencies = configDeps;
                }
                steal.main = main;
            }
            if (pkg.globalBrowser) {
                var doNotApplyGlobalBrowser = pkg.name === 'steal' && rootConfig.builtins === false;
                if (!doNotApplyGlobalBrowser) {
                    setGlobalBrowser(pkg.globalBrowser, pkg);
                }
            }
            var systemName = steal && steal.name;
            if (systemName) {
                setInNpm(systemName, pkg);
            } else {
                setInNpm(pkg.name, pkg);
            }
            if (!loader.npm[pkg.name]) {
                loader.npm[pkg.name] = pkg;
            }
            loader.npm[pkg.name + '@' + pkg.version] = pkg;
            var pkgAddress = pkg.fileUrl.replace(/\/package\.json.*/, '');
            loader.npmPaths[pkgAddress] = pkg;
        });
        setupLiveReload();
        forEach(loader._npmExtensions || [], function (ext) {
            if (ext.systemConfig) {
                loader.config(ext.systemConfig);
            }
        });
    }(loader, [
        {
            'name': 'donejs-chat',
            'version': '0.0.0',
            'fileUrl': './package.json',
            'main': 'donejs-chat/index.stache!done-autorender',
            'steal': {
                'main': 'donejs-chat/index.stache!done-autorender',
                'directories': { 'lib': 'src' },
                'configDependencies': [
                    'live-reload',
                    'node_modules/can-zone/register'
                ],
                'plugins': [
                    'done-css',
                    'done-component',
                    'steal-less',
                    'steal-stache'
                ],
                'envs': { 'server-production': { 'renderingBaseURL': '/dist' } },
                'serviceBaseURL': '',
                'npmAlgorithm': 'flat'
            },
            'resolutions': {
                'donejs-chat': '0.0.0',
                'done-autorender': '1.5.2',
                'can-view-import': '3.2.9',
                'can-util': '3.14.0',
                'can-route': '3.3.4',
                'can-stache': '3.15.1',
                'can-zone': '0.6.23',
                'steal-less': '1.3.3',
                'bootstrap': '3.3.7',
                'can-define': '1.5.7',
                'can-route-pushstate': '3.2.4'
            }
        },
        {
            'name': 'done-css',
            'version': '3.0.2',
            'fileUrl': './node_modules/done-css/package.json',
            'main': 'css.js',
            'steal': {
                'ext': { 'css': 'done-css' },
                'map': { '$css': 'done-css@3.0.2#css' },
                'plugins': ['steal-css']
            },
            'resolutions': { 'steal-css': '1.3.2' }
        },
        {
            'name': 'done-component',
            'version': '1.0.1',
            'fileUrl': './node_modules/done-component/package.json',
            'main': 'component.js',
            'steal': {
                'npmAlgorithm': 'flat',
                'ext': { 'component': 'done-component' },
                'plugins': [
                    'steal-less',
                    'steal-stache'
                ]
            },
            'resolutions': {}
        },
        {
            'name': 'steal-less',
            'version': '1.3.3',
            'fileUrl': './node_modules/steal-less/package.json',
            'main': 'less.js',
            'steal': {
                'plugins': ['steal-css'],
                'envs': {
                    'build': { 'map': { 'steal-less/less-engine': 'steal-less/less-engine-node' } },
                    'server-development': { 'map': { 'steal-less/less-engine': 'steal-less/less-engine-node' } },
                    'server-production': { 'map': { 'steal-less/less-engine': 'steal-less/less-engine-node' } },
                    'bundle-build': {
                        'map': { 'steal-less/less-engine': 'steal-less/less-engine-node' },
                        'meta': { 'steal-less/less': { 'useLocalDeps': true } }
                    }
                },
                'ext': { 'less': 'steal-less' }
            },
            'resolutions': {
                'steal-less': '1.3.3',
                'less': '2.6.0'
            }
        },
        {
            'name': 'steal-stache',
            'version': '3.1.3',
            'fileUrl': './node_modules/steal-stache/package.json',
            'main': 'steal-stache.js',
            'steal': {
                'main': 'steal-stache',
                'configDependencies': ['live-reload'],
                'npmIgnore': {
                    'documentjs': true,
                    'testee': true,
                    'steal-tools': true
                },
                'npmAlgorithm': 'flat',
                'ext': { 'stache': 'steal-stache' }
            },
            'resolutions': {}
        },
        {
            'name': 'steal',
            'version': '1.12.6',
            'fileUrl': './node_modules/steal/package.json',
            'main': 'main',
            'steal': {
                'npmDependencies': {
                    'console-browserify': true,
                    'constants-browserify': true,
                    'crypto-browserify': true,
                    'http-browserify': true,
                    'buffer': true,
                    'os-browserify': true,
                    'vm-browserify': true,
                    'zlib-browserify': true,
                    'assert': true,
                    'domain-browser': true,
                    'events': true,
                    'https-browserify': true,
                    'path-browserify': true,
                    'string_decoder': true,
                    'tty-browserify': true,
                    'process': true,
                    'punycode': true
                }
            },
            'globalBrowser': {
                'console': 'console-browserify',
                'constants': 'constants-browserify',
                'crypto': 'crypto-browserify',
                'http': 'http-browserify',
                'buffer': 'buffer',
                'os': 'os-browserify',
                'vm': 'vm-browserify',
                'zlib': 'zlib-browserify',
                'assert': 'assert',
                'child_process': 'steal#ext/builtin/child_process',
                'cluster': 'steal#ext/builtin/cluster',
                'dgram': 'steal#ext/builtin/dgram',
                'dns': 'steal#ext/builtin/dns',
                'domain': 'domain-browser',
                'events': 'events',
                'fs': 'steal#ext/builtin/fs',
                'https': 'https-browserify',
                'module': 'steal#ext/builtin/module',
                'net': 'steal#ext/builtin/net',
                'path': 'path-browserify',
                'process': 'process',
                'querystring': 'steal#ext/builtin/querystring',
                'readline': 'steal#ext/builtin/readline',
                'repl': 'steal#ext/builtin/repl',
                'stream': 'steal#ext/builtin/stream',
                'string_decoder': 'string_decoder',
                'sys': 'steal#ext/builtin/sys',
                'timers': 'steal#ext/builtin/timers',
                'tls': 'steal#ext/builtin/tls',
                'tty': 'tty-browserify',
                'url': 'steal#ext/builtin/url',
                'util': 'steal#ext/builtin/util',
                '_stream_readable': 'steal#ext/builtin/_stream_readable',
                '_stream_writable': 'steal#ext/builtin/_stream_writable',
                '_stream_duplex': 'steal#ext/builtin/_stream_duplex',
                '_stream_transform': 'steal#ext/builtin/_stream_transform',
                '_stream_passthrough': 'steal#ext/builtin/_stream_passthrough'
            },
            'resolutions': {}
        },
        {
            'name': 'steal-css',
            'version': '1.3.2',
            'fileUrl': './node_modules/steal-css/package.json',
            'main': 'css.js',
            'steal': {
                'ext': { 'css': 'steal-css' },
                'map': { '$css': 'steal-css@1.3.2#css' }
            },
            'resolutions': {}
        },
        {
            'name': 'assert',
            'version': '1.4.1',
            'fileUrl': './node_modules/assert/package.json',
            'main': './assert.js',
            'resolutions': {}
        },
        {
            'name': 'buffer',
            'version': '5.0.8',
            'fileUrl': './node_modules/buffer/package.json',
            'main': 'index.js',
            'jspm': {},
            'resolutions': {}
        },
        {
            'name': 'console-browserify',
            'version': '1.1.0',
            'fileUrl': './node_modules/console-browserify/package.json',
            'main': 'index',
            'resolutions': {}
        },
        {
            'name': 'constants-browserify',
            'version': '1.0.0',
            'fileUrl': './node_modules/constants-browserify/package.json',
            'main': 'constants.json',
            'resolutions': {}
        },
        {
            'name': 'crypto-browserify',
            'version': '3.11.1',
            'fileUrl': './node_modules/crypto-browserify/package.json',
            'browser': { 'crypto': '@empty' },
            'resolutions': {}
        },
        {
            'name': 'domain-browser',
            'version': '1.1.7',
            'fileUrl': './node_modules/domain-browser/package.json',
            'main': './index.js',
            'jspm': {},
            'resolutions': {}
        },
        {
            'name': 'events',
            'version': '1.1.1',
            'fileUrl': './node_modules/events/package.json',
            'main': './events.js',
            'resolutions': {}
        },
        {
            'name': 'http-browserify',
            'version': '1.7.0',
            'fileUrl': './node_modules/http-browserify/package.json',
            'main': 'index.js',
            'browser': 'index.js',
            'resolutions': {}
        },
        {
            'name': 'https-browserify',
            'version': '1.0.0',
            'fileUrl': './node_modules/https-browserify/package.json',
            'main': 'index.js',
            'resolutions': {}
        },
        {
            'name': 'os-browserify',
            'version': '0.3.0',
            'fileUrl': './node_modules/os-browserify/package.json',
            'main': 'main.js',
            'browser': 'browser.js',
            'jspm': {},
            'resolutions': {}
        },
        {
            'name': 'path-browserify',
            'version': '0.0.1',
            'fileUrl': './node_modules/path-browserify/package.json',
            'main': 'index.js',
            'resolutions': {}
        },
        {
            'name': 'process',
            'version': '0.11.10',
            'fileUrl': './node_modules/process/package.json',
            'main': './index.js',
            'browser': './browser.js',
            'resolutions': {}
        },
        {
            'name': 'punycode',
            'version': '2.0.1',
            'fileUrl': './node_modules/punycode/package.json',
            'main': 'punycode.js',
            'jspm': {},
            'resolutions': {}
        },
        {
            'name': 'string_decoder',
            'version': '1.1.1',
            'fileUrl': './node_modules/string_decoder/package.json',
            'main': 'lib/string_decoder.js',
            'resolutions': {}
        },
        {
            'name': 'tty-browserify',
            'version': '0.0.1',
            'fileUrl': './node_modules/tty-browserify/package.json',
            'main': 'index.js',
            'resolutions': {}
        },
        {
            'name': 'vm-browserify',
            'version': '0.0.4',
            'fileUrl': './node_modules/vm-browserify/package.json',
            'main': 'index.js',
            'resolutions': {}
        },
        {
            'name': 'zlib-browserify',
            'version': '0.0.3',
            'fileUrl': './node_modules/zlib-browserify/package.json',
            'main': 'index.js',
            'resolutions': {}
        },
        {
            'name': 'string_decoder',
            'version': '1.0.3',
            'fileUrl': './node_modules/steal/node_modules/string_decoder/package.json',
            'main': 'lib/string_decoder.js',
            'resolutions': {}
        },
        {
            'name': 'done-autorender',
            'version': '1.5.2',
            'fileUrl': './node_modules/done-autorender/package.json',
            'main': 'src/autorender.js',
            'resolutions': {
                'can-stache': '3.15.1',
                'can-util': '3.14.0',
                'can-zone': '0.6.23',
                'can-view-import': '3.2.9',
                'can-route': '3.3.4'
            }
        },
        {
            'name': 'can-zone',
            'version': '0.6.23',
            'fileUrl': './node_modules/can-zone/package.json',
            'main': 'lib/zone.js',
            'steal': {
                'npmDependencies': {
                    'steal-mocha': true,
                    'mocha': true,
                    'chai': true
                },
                'map': { 'can-zone@0.6.23#assert': 'chai/chai' },
                'meta': {
                    'chai/chai': {
                        'format': 'global',
                        'exports': 'chai.assert'
                    }
                },
                'plugins': ['chai']
            },
            'resolutions': { 'can-zone': '0.6.23' }
        },
        {
            'name': 'can-util',
            'version': '3.14.0',
            'fileUrl': './node_modules/can-util/package.json',
            'main': 'can-util',
            'resolutions': {
                'can-util': '3.14.0',
                'can-namespace': '1.0.0',
                'can-cid': '1.3.0',
                'can-globals': '1.2.0',
                'can-dom-data-state': '0.2.0',
                'can-assign': '1.3.1',
                'can-symbol': '1.6.1',
                'can-log': '1.0.0',
                'can-types': '1.4.0',
                'can-parse-uri': '1.2.0'
            }
        },
        {
            'name': 'can-stache',
            'version': '3.15.1',
            'fileUrl': './node_modules/can-stache/package.json',
            'main': 'can-stache',
            'resolutions': {
                'can-stache': '3.15.1',
                'can-namespace': '1.0.0',
                'can-util': '3.14.0',
                'can-view-parser': '3.8.3',
                'can-reflect': '1.17.6',
                'can-attribute-encoder': '0.3.4',
                'can-view-target': '3.1.6',
                'can-view-callbacks': '3.2.5',
                'can-log': '1.0.0',
                'can-globals': '1.2.0',
                'can-view-nodelist': '3.1.1',
                'can-observation': '3.3.6',
                'can-compute': '3.3.10',
                'can-symbol': '1.6.1',
                'can-view-scope': '3.6.0',
                'can-stache-key': '0.1.4',
                'can-view-live': '3.2.6'
            }
        },
        {
            'name': 'can-symbol',
            'version': '1.6.1',
            'fileUrl': './node_modules/can-symbol/package.json',
            'main': 'can-symbol',
            'steal': {
                'npmIgnore': {
                    'testee': true,
                    'generator-donejs': true,
                    'donejs-cli': true,
                    'steal-tools': true
                },
                'main': 'can-symbol'
            },
            'resolutions': { 'can-namespace': '1.0.0' }
        },
        {
            'name': 'can-namespace',
            'version': '1.0.0',
            'fileUrl': './node_modules/can-namespace/package.json',
            'main': 'can-namespace',
            'steal': { 'npmAlgorithm': 'flat' },
            'resolutions': {}
        },
        {
            'name': 'can-view-parser',
            'version': '3.8.3',
            'fileUrl': './node_modules/can-view-parser/package.json',
            'main': 'can-view-parser',
            'resolutions': {
                'can-namespace': '1.0.0',
                'can-log': '1.0.0',
                'can-attribute-encoder': '0.3.4'
            }
        },
        {
            'name': 'can-attribute-encoder',
            'version': '0.3.4',
            'fileUrl': './node_modules/can-attribute-encoder/package.json',
            'main': 'can-attribute-encoder',
            'steal': {
                'npmIgnore': {
                    'testee': true,
                    'steal-tools': true
                },
                'main': 'can-attribute-encoder'
            },
            'resolutions': {
                'can-namespace': '1.0.0',
                'can-log': '1.0.0'
            }
        },
        {
            'name': 'can-log',
            'version': '1.0.0',
            'fileUrl': './node_modules/can-log/package.json',
            'main': 'dist/cjs/can-log',
            'steal': {
                'npmIgnore': {
                    'testee': true,
                    'generator-donejs': true,
                    'donejs-cli': true,
                    'steal-tools': true
                },
                'main': 'can-log'
            },
            'resolutions': { 'can-log': '1.0.0' }
        },
        {
            'name': 'can-view-live',
            'version': '3.2.6',
            'fileUrl': './node_modules/can-view-live/package.json',
            'main': 'can-view-live',
            'steal': {
                'npmIgnore': {
                    'documentjs': true,
                    'testee': true,
                    'generator-donejs': true,
                    'donejs-cli': true,
                    'steal-tools': true
                },
                'main': 'can-view-live'
            },
            'resolutions': {
                'can-view-live': '3.2.6',
                'can-view-parser': '3.8.3',
                'can-util': '3.14.0',
                'can-view-nodelist': '3.1.1',
                'can-reflect': '1.17.6',
                'can-view-callbacks': '3.2.5',
                'can-types': '1.4.0',
                'can-compute': '3.3.10',
                'can-event': '3.7.7',
                'can-observation': '3.3.6'
            }
        },
        {
            'name': 'can-view-nodelist',
            'version': '3.1.1',
            'fileUrl': './node_modules/can-view-nodelist/package.json',
            'main': 'can-view-nodelist',
            'resolutions': {
                'can-util': '3.14.0',
                'can-namespace': '1.0.0'
            }
        },
        {
            'name': 'can-compute',
            'version': '3.3.10',
            'fileUrl': './node_modules/can-compute/package.json',
            'main': 'can-compute',
            'resolutions': {
                'can-event': '3.7.7',
                'can-compute': '3.3.10',
                'can-cid': '1.3.0',
                'can-namespace': '1.0.0',
                'can-util': '3.14.0',
                'can-reflect': '1.17.6',
                'can-symbol': '1.6.1',
                'can-observation': '3.3.6',
                'can-stache-key': '0.1.4'
            }
        },
        {
            'name': 'can-observation',
            'version': '3.3.6',
            'fileUrl': './node_modules/can-observation/package.json',
            'main': 'can-observation',
            'steal': { 'npmAlgorithm': 'flat' },
            'resolutions': {
                'can-event': '3.7.7',
                'can-util': '3.14.0',
                'can-namespace': '1.0.0',
                'can-reflect': '1.17.6',
                'can-symbol': '1.6.1',
                'can-cid': '1.3.0'
            }
        },
        {
            'name': 'can-reflect',
            'version': '1.17.6',
            'fileUrl': './node_modules/can-reflect/package.json',
            'main': 'can-reflect',
            'resolutions': {
                'can-reflect': '1.17.6',
                'can-namespace': '1.0.0',
                'can-symbol': '1.6.1'
            }
        },
        {
            'name': 'can-globals',
            'version': '1.2.0',
            'fileUrl': './node_modules/can-globals/package.json',
            'main': 'can-globals.js',
            'resolutions': {
                'can-globals': '1.2.0',
                'can-namespace': '1.0.0',
                'can-reflect': '1.17.6'
            }
        },
        {
            'name': 'can-view-scope',
            'version': '3.6.0',
            'fileUrl': './node_modules/can-view-scope/package.json',
            'main': 'can-view-scope',
            'resolutions': {
                'can-stache-key': '0.1.4',
                'can-observation': '3.3.6',
                'can-view-scope': '3.6.0',
                'can-util': '3.14.0',
                'can-namespace': '1.0.0',
                'can-reflect': '1.17.6',
                'can-log': '1.0.0',
                'can-define-lazy-value': '1.1.0',
                'can-compute': '3.3.10',
                'can-event': '3.7.7',
                'can-cid': '1.3.0',
                'can-symbol': '1.6.1',
                'can-simple-map': '3.3.2'
            }
        },
        {
            'name': 'can-cid',
            'version': '1.3.0',
            'fileUrl': './node_modules/can-cid/package.json',
            'main': 'can-cid',
            'resolutions': {
                'can-namespace': '1.0.0',
                'can-cid': '1.3.0'
            }
        },
        {
            'name': 'can-stache-key',
            'version': '0.1.4',
            'fileUrl': './node_modules/can-stache-key/package.json',
            'main': 'dist/cjs/can-stache-key',
            'steal': {
                'npmIgnore': {
                    'testee': true,
                    'generator-donejs': true,
                    'donejs-cli': true,
                    'steal-tools': true
                },
                'plugins': [
                    'steal-less',
                    'steal-stache'
                ],
                'main': 'can-stache-key'
            },
            'browser': {},
            'resolutions': {
                'can-observation': '3.3.6',
                'can-log': '1.0.0',
                'can-util': '3.14.0',
                'can-symbol': '1.6.1',
                'can-reflect': '1.17.6',
                'can-reflect-promise': '1.1.5'
            }
        },
        {
            'name': 'can-event',
            'version': '3.7.7',
            'fileUrl': './node_modules/can-event/package.json',
            'main': 'can-event',
            'resolutions': {
                'can-util': '3.14.0',
                'can-cid': '1.3.0',
                'can-namespace': '1.0.0',
                'can-event': '3.7.7',
                'can-types': '1.4.0'
            }
        },
        {
            'name': 'can-types',
            'version': '1.4.0',
            'fileUrl': './node_modules/can-types/package.json',
            'main': 'can-types',
            'resolutions': {
                'can-namespace': '1.0.0',
                'can-reflect': '1.17.6',
                'can-symbol': '1.6.1',
                'can-log': '1.0.0'
            }
        },
        {
            'name': 'can-view-callbacks',
            'version': '3.2.5',
            'fileUrl': './node_modules/can-view-callbacks/package.json',
            'main': 'can-view-callbacks',
            'steal': {},
            'resolutions': {
                'can-observation': '3.3.6',
                'can-util': '3.14.0',
                'can-namespace': '1.0.0'
            }
        },
        {
            'name': 'can-assign',
            'version': '1.3.1',
            'fileUrl': './node_modules/can-assign/package.json',
            'main': 'dist/cjs/can-assign',
            'steal': {
                'npmIgnore': {
                    'testee': true,
                    'generator-donejs': true,
                    'donejs-cli': true,
                    'steal-tools': true
                },
                'main': 'can-assign'
            },
            'resolutions': { 'can-namespace': '1.0.0' }
        },
        {
            'name': 'can-dom-data-state',
            'version': '0.2.0',
            'fileUrl': './node_modules/can-dom-data-state/package.json',
            'main': 'dist/cjs/can-dom-data-state',
            'steal': {
                'npmIgnore': {
                    'testee': true,
                    'generator-donejs': true,
                    'donejs-cli': true,
                    'steal-tools': true
                },
                'main': 'can-dom-data-state'
            },
            'resolutions': {
                'can-namespace': '1.0.0',
                'can-cid': '1.3.0'
            }
        },
        {
            'name': 'can-reflect-promise',
            'version': '1.1.5',
            'fileUrl': './node_modules/can-reflect-promise/package.json',
            'main': 'can-reflect-promise',
            'steal': { 'npmAlgorithm': 'flat' },
            'resolutions': {
                'can-reflect': '1.17.6',
                'can-symbol': '1.6.1',
                'can-util': '3.14.0',
                'can-observation': '3.3.6',
                'can-cid': '1.3.0',
                'can-event': '3.7.7'
            }
        },
        {
            'name': 'can-define-lazy-value',
            'version': '1.1.0',
            'fileUrl': './node_modules/can-define-lazy-value/package.json',
            'main': 'define-lazy-value',
            'steal': {
                'npmIgnore': {
                    'testee': true,
                    'steal-tools': true
                }
            },
            'resolutions': {}
        },
        {
            'name': 'can-parse-uri',
            'version': '1.2.0',
            'fileUrl': './node_modules/can-parse-uri/package.json',
            'main': 'can-parse-uri',
            'steal': {
                'npmIgnore': {
                    'testee': true,
                    'generator-donejs': true,
                    'donejs-cli': true,
                    'steal-tools': true
                },
                'main': 'can-parse-uri'
            },
            'resolutions': { 'can-namespace': '1.0.0' }
        },
        {
            'name': 'can-simple-map',
            'version': '3.3.2',
            'fileUrl': './node_modules/can-simple-map/package.json',
            'main': 'can-simple-map',
            'steal': {
                'npmIgnore': {
                    'documentjs': true,
                    'testee': true,
                    'generator-donejs': true,
                    'donejs-cli': true,
                    'steal-tools': true
                },
                'main': 'can-simple-map'
            },
            'resolutions': {
                'can-event': '3.7.7',
                'can-util': '3.14.0',
                'can-types': '1.4.0',
                'can-observation': '3.3.6',
                'can-reflect': '1.17.6',
                'can-construct': '3.5.3'
            }
        },
        {
            'name': 'can-construct',
            'version': '3.5.3',
            'fileUrl': './node_modules/can-construct/package.json',
            'main': 'can-construct',
            'steal': {},
            'resolutions': {
                'can-reflect': '1.17.6',
                'can-log': '1.0.0',
                'can-namespace': '1.0.0',
                'can-string': '1.0.0'
            }
        },
        {
            'name': 'can-string',
            'version': '1.0.0',
            'fileUrl': './node_modules/can-string/package.json',
            'main': 'can-string',
            'steal': {
                'npmIgnore': {
                    'testee': true,
                    'generator-donejs': true,
                    'donejs-cli': true,
                    'steal-tools': true
                },
                'plugins': [
                    'steal-less',
                    'steal-stache'
                ]
            },
            'resolutions': {}
        },
        {
            'name': 'can-view-import',
            'version': '3.2.9',
            'fileUrl': './node_modules/can-view-import/package.json',
            'main': 'can-view-import',
            'resolutions': {
                'can-util': '3.14.0',
                'can-globals': '1.2.0',
                'can-assign': '1.3.1',
                'can-view-nodelist': '3.1.1',
                'can-view-callbacks': '3.2.5',
                'can-event': '3.7.7',
                'can-log': '1.0.0',
                'can-dom-data-state': '0.2.0'
            }
        },
        {
            'name': 'can-route',
            'version': '3.3.4',
            'fileUrl': './node_modules/can-route/package.json',
            'main': 'can-route',
            'steal': {},
            'resolutions': {
                'can-namespace': '1.0.0',
                'can-util': '3.14.0',
                'can-reflect': '1.17.6',
                'can-observation': '3.3.6',
                'can-compute': '3.3.10',
                'can-types': '1.4.0',
                'can-symbol': '1.6.1',
                'can-deparam': '1.2.0',
                'can-param': '1.1.0',
                'can-event': '3.7.7',
                'can-log': '1.0.0'
            }
        },
        {
            'name': 'bootstrap',
            'version': '3.3.7',
            'fileUrl': './node_modules/bootstrap/package.json',
            'main': './dist/js/npm',
            'jspm': { 'main': 'js/bootstrap' },
            'resolutions': {}
        },
        {
            'name': 'can-view-target',
            'version': '3.1.6',
            'fileUrl': './node_modules/can-view-target/package.json',
            'main': 'can-view-target',
            'resolutions': {
                'can-util': '3.14.0',
                'can-globals': '1.2.0',
                'can-namespace': '1.0.0'
            }
        },
        {
            'name': 'can-deparam',
            'version': '1.2.0',
            'fileUrl': './node_modules/can-deparam/package.json',
            'main': 'can-deparam',
            'steal': {
                'npmIgnore': {
                    'testee': true,
                    'generator-donejs': true,
                    'donejs-cli': true,
                    'steal-tools': true
                }
            },
            'resolutions': { 'can-namespace': '1.0.0' }
        },
        {
            'name': 'can-param',
            'version': '1.1.0',
            'fileUrl': './node_modules/can-param/package.json',
            'main': 'can-param',
            'steal': {
                'npmIgnore': {
                    'testee': true,
                    'generator-donejs': true,
                    'donejs-cli': true,
                    'steal-tools': true
                }
            },
            'resolutions': { 'can-namespace': '1.0.0' }
        },
        {
            'name': 'less',
            'version': '2.6.0',
            'fileUrl': './node_modules/less/package.json',
            'main': 'index',
            'browser': './dist/less.js',
            'jam': { 'main': './dist/less.js' },
            'resolutions': {}
        },
        {
            'name': 'can-define',
            'version': '1.5.7',
            'fileUrl': './node_modules/can-define/package.json',
            'main': 'can-define.js',
            'resolutions': {
                'can-construct': '3.5.3',
                'can-define': '1.5.7',
                'can-observation': '3.3.6',
                'can-types': '1.4.0',
                'can-event': '3.7.7',
                'can-namespace': '1.0.0',
                'can-log': '1.0.0',
                'can-reflect': '1.17.6',
                'can-symbol': '1.6.1',
                'can-util': '3.14.0',
                'can-compute': '3.3.10',
                'can-cid': '1.3.0',
                'can-define-lazy-value': '1.1.0',
                'can-simple-observable': '1.0.2'
            }
        },
        {
            'name': 'can-route-pushstate',
            'version': '3.2.4',
            'fileUrl': './node_modules/can-route-pushstate/package.json',
            'main': 'can-route-pushstate',
            'resolutions': {
                'can-util': '3.14.0',
                'can-globals': '1.2.0',
                'can-event': '3.7.7',
                'can-route': '3.3.4'
            }
        },
        {
            'name': 'can-simple-observable',
            'version': '1.0.2',
            'fileUrl': './node_modules/can-simple-observable/package.json',
            'main': 'can-simple-observable',
            'steal': {
                'npmIgnore': {
                    'testee': true,
                    'steal-tools': true
                }
            },
            'resolutions': {}
        }
    ], { 'npmParentMap': {} }));
});
/*done-autorender@1.5.2#src/template*/
define('done-autorender@1.5.2#src/template', [], function () {
    return function (obj) {
        obj || (obj = {});
        var __t, __p = '';
        with (obj) {
            __p += 'define(' + ((__t = imports) == null ? '' : __t) + ', function(' + ((__t = args) == null ? '' : __t) + '){\n\tvar zoneOpts = ' + ((__t = zoneOpts) == null ? '' : __t) + ';\n\tvar useZones = zoneOpts.useZones;\n\tvar tokens = ' + ((__t = intermediate) == null ? '' : __t) + ';\n\tvar renderer = stache(tokens);\n\n\tvar isNode = typeof process === "object" &&\n\t\t{}.toString.call(process) === "[object process]";\n\n\t// SSR helpers isProduction, and some that don\'t matter in the client.\n\tstache.registerHelper("isProduction", function(options){\n\t\tconsole.warn("The isProduction helper is deprecated. Use a #switch helper on `env.NODE_ENV` instead.");\n\t\tif(loader && loader.isEnv && loader.isEnv("production")) {\n\t\t\treturn options.fn(this);\n\t\t} else {\n\t\t\treturn options.inverse(this);\n\t\t}\n\t});\n\n\t/**\n\t * @function render\n\t * @hide\n\t * @description Call the stache renderer function with Scope and Options.\n\t * @signature `render(scope, options)`\n\t * @param {can-view-scope} scope A can-view-scope object.\n\t * @param {can-view-scope.Options} options An option object.\n\t * @return {DocumentFragment} The result of calling a can-stache renderer,\n\t * a document fragment.\n\t */\n\tfunction render(scope, options){\n\t\tvar moduleOptions = { module: module };\n\t\toptions = (options && options.add) ? options.add(moduleOptions) :\n\t\t\tmoduleOptions;\n\t\treturn renderer(scope, options);\n\t}\n\n\t/**\n\t * @function connectViewModel\n\t * @description Create a new instance of the provided ViewModel, set it\n\t * as the route\'s data, and call route.start() or route.ready().\n\t * @signature `connectViewModel()`\n\t * @return {Map} an instance of some map type.\n\t */\n\tfunction connectViewModel() {\n\t\tvar ViewModel = autorender.viewModel;\n\n\t\tif(!ViewModel) {\n\t\t\tvar message  = "done-autorender cannot start without a ViewModel. " +\n\t\t\t\t"Please ensure your template contains an export for your " +\n\t\t\t\t"application\'s ViewModel. https://github.com/donejs/autorender#viewmodel";\n\t\t\tconsole.error(message);\n\t\t\treturn;\n\t\t}\n\n\t\tvar viewModel = autorender.state = new ViewModel();\n\t\tdomData.set.call(document.documentElement, "viewModel", viewModel);\n\n\t\troute.data = viewModel;\n\t\tif (route.start) {// can-route 3.3+\n\t\t\troute.start();\n\t\t} else if (route.ready) {// can-route < 3.3\n\t\t\troute.ready();\n\t\t}\n\t\treturn viewModel;\n\t}\n\n\t/**\n\t * @function connectViewModelAndAttach\n\t * @description Render the stache template, then update the\n\t * DOM to reflect these changes. Save the state of the ViewModel instance\n\t * so that it can be reused to do rerenders in case of live-reload. This is\n\t * the main entry point of rendering, and happens upon page load.\n\t * @signature `connectViewModelAndAttach()`\n\t **/\n\tfunction connectViewModelAndAttach() {\n\t\tconnectViewModel();\n\t\treturn renderAndAttach();\n\t}\n\n\t/**\n\t * @function reattachWithZone\n\t * @description Create a Zone for reattach.\n\t * @signature `reattachWithZone()`\n\t **/\n\tfunction reattachWithZone() {\n\t\tnew Zone({\n\t\t\tplugins: [xhrZone]\n\t\t}).run(function(){\n\t\t\tvar viewModel = connectViewModel();\n\t\t\tvar result = renderInZone(viewModel);\n\n\t\t\tvar incremental = document.documentElement.dataset.incrementallyRendered === "";\n\n\t\t\t// If incrementally rendering, attach right away. IR hydration will\n\t\t\t// handle reattachment.\n\t\t\tif(incremental) {\n\t\t\t\tattach(result);\n\t\t\t} else {\n\t\t\t\tresult.promise.then(attach);\n\t\t\t}\n\t\t});\n\t}\n\n\tvar tagsToIgnore = { "SCRIPT": true, "STYLE": true, "LINK": true };\n\n\t/**\n\t * Call a callback for each child Node within a parent, skipping\n\t * elements that should not be touched because of their side-effects.\n\t */\n\tfunction eachChild(parent, callback){\n\t\tvar nodes = Array.prototype.slice.call(childNodes(parent)),\n\t\t\ti = 0, len = nodes.length,\n\t\t\tnode, ignoreTag;\n\n\t\tfor(; i < len; i++) {\n\t\t\tnode = nodes[i];\n\t\t\tignoreTag = tagsToIgnore[node.nodeName];\n\t\t\tif(!ignoreTag) {\n\t\t\t\t// Returning false breaks the loop\n\t\t\t\tif(callback(node) === false) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Remove an element\n\t */\n\tfunction remove(el) {\n\t\tmutate.removeChild.call(el.parentNode, el);\n\t}\n\n\t/**\n\t * Creates a function that will append to a parent Element.\n\t */\n\tfunction appendTo(parent){\n\t\treturn function(el){\n\t\t\tmutate.appendChild.call(parent, el);\n\t\t}\n\t}\n\n\t/**\n\t * @function attach\n\t * @hide\n\t * @description Receives the completely rendered DocumentFragment and\n\t * attaches the parts from the head into the document.head, the body into\n\t * document.body.\n\t * @signature `attach(result)`\n\t * @param {RenderResult} The result of rendering within a Zone.\n\t */\n\tfunction attach(result){\n\t\tvar frag = result.fragment;\n\n\t\t// If already attached skip this part.\n\t\tif(document.documentElement.hasAttribute("data-attached")) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar head = document.head;\n\t\tvar body = document.body;\n\n\t\t// Move elements from the fragment\'s head to the document head.\n\t\teachChild(head, remove);\n\n\t\tvar fragHead = frag.querySelector("head");\n\t\teachChild(fragHead, appendTo(head));\n\n\t\t// Move elements from the fragment\'s body to the document body.\n\t\teachChild(body, remove);\n\n\t\tvar fragBody = frag.querySelector("body");\n\t\teachChild(fragBody, appendTo(body));\n\t\tdocument.documentElement.setAttribute("data-attached", "");\n\t}\n\n\n\t/**\n\t * @function renderAndAttach\n\t * @hide\n\t * @description Render the template with a Zone, wait for all asynchronous\n\t * events to complete, and then attach the DocumentFragment to the page.\n\t * @signature `renderAndAttach()`\n\t * @return {Promise} A Promise that resolves after the template has been\n\t * attached to the DOM.\n\t */\n\tfunction renderAndAttach(){\n\t\tvar viewModel = autorender.state;\n\t\treturn useZones\n\t\t\t? renderInZone(viewModel).promise.then(attach)\n\t\t\t: renderNoZone(viewModel).then(attach);\n\t}\n\n\t/**\n\t * @function renderIntoZone\n\t * @hide\n\t * @description Render a viewModel in a Zone context, returning the\n\t * Zone promise.\n\t * @signature `renderIntoZone(viewModel)`\n\t * @param {Object} viewModel\n\t * @return {RenderResult} the promise that resolves when asynchronousity\n\t * within the Zone is complete, and the fragment generated.\n\t */\n\tfunction renderInZone(viewModel){\n\t\tfunction getZonePlugins() {\n\t\t\tvar plugins = [xhrZone];\n\t\t\tif(zoneOpts.useDebug) {\n\t\t\t\tvar timeout = zoneOpts.timeout;\n\t\t\t\tvar opts = {\n\t\t\t\t\tbreak: zoneOpts.debugBrk\n\t\t\t\t};\n\n\t\t\t\tplugins.push(debugZone(timeout, opts));\n\t\t\t}\n\t\t\treturn plugins;\n\t\t}\n\n\t\tfunction logDebugInfo() {\n\t\t\tvar warn = Function.prototype.bind.call(console.warn, console);\n\t\t\tvar zoneData = zone.data;\n\t\t\tif(zoneData.debugInfo) {\n\t\t\t\tzoneData.debugInfo.forEach(function(info){\n\t\t\t\t\twarn(info.task, info.stack);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tvar fragment;\n\t\tvar zone = new Zone({\n\t\t\tplugins: getZonePlugins()\n\t\t});\n\t\tvar zonePromise = zone.run(function(){\n\t\t\tfragment = render(viewModel, {});\n\t\t}).then(function(zoneData){\n\t\t\treturn {\n\t\t\t\tfragment: fragment,\n\t\t\t\tzoneData: zoneData\n\t\t\t};\n\t\t})\n\t\t.then(null, function(err){\n\t\t\tif(err.timeout) {\n\t\t\t\tlogDebugInfo();\n\t\t\t\tvar error = new Error("Timeout of " + err.timeout + " exceeded");\n\t\t\t\tthrow error;\n\t\t\t} else {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t});\n\n\t\treturn {\n\t\t\tpromise: zonePromise,\n\t\t\tfragment: fragment,\n\t\t\tzoneData: zone.data\n\t\t};\n\t}\n\n\t/**\n\t * @function renderNoZone\n\t * @hide\n\t * @description Render a viewModel without a Zone.\n\t * @signature `renderIntoZone(viewModel)`\n\t * @param {Object} viewModel\n\t * @return {RenderResult} the promise that resolves immediately with a fragment.\n\t */\n\tfunction renderNoZone(viewModel){\n\t\tvar fragment = render(viewModel, {});\n\t\treturn Promise.resolve({ fragment: fragment });\n\t}\n\n\t/**\n\t * @function renderIntoDocument\n\t * @description This is used by done-ssr, it provides a fresh document\n\t * and viewModel, and this function calls the stache renderer and updates\n\t * the document with the result.\n\t * @signature `renderIntoDocument(document, viewModel)`\n\t * @param {Document} document\n\t * @param {Object} viewModel\n\t**/\n\tfunction renderIntoDocument(document, viewModel) {\n\t\tvar frag = render(viewModel, {});\n\n\t\tvar firstChild = frag.firstChild;\n\t\tvar documentElement = document.documentElement;\n\n\t\t// If there is an <html> element, which there usually is,\n\t\t// replace the existing documentElement, otherwise just append the fragment\n\t\tif(firstChild && firstChild.nodeName === "HTML") {\n\t\t\tmutate.replaceChild.call(document, firstChild, documentElement);\n\t\t} else {\n\t\t\tmutate.appendChild.call(documentElement, frag);\n\t\t}\n\t}\n\n\tvar autorender = {\n\t\trenderAndAttach: renderAndAttach,\n\t\trenderInZone: renderInZone,\n\t\tlegacy: false,\n\n\t\t/*\n\t\t * This was previously used by done-ssr, but no longer is.\n\t\t * This should be removed as part of 2.0.0.\n\t\t */\n\t\trender: function(doc, state){\n\t\t\tconsole.warn("render() is deprecated in done-autorender 1.3.0. Please use renderIntoDocument() instead.");\n\t\t\tvar frag = render(state, {});\n\n\t\t\tvar oldDoc = can.document;\n\t\t\tcan.document = doc;\n\t\t\tmutate.appendChild.call(doc.body, frag, doc);\n\t\t\tcan.document = oldDoc;\n\t\t},\n\t\trenderIntoDocument: renderIntoDocument,\n\t\t' + ((__t = ases) == null ? '' : __t) + '\n\t};\n\n\tvar isNW = (function(){\n\t\ttry{var nr = loader._nodeRequire; return nr && nr(\'nw.gui\') !== \'undefined\';}catch(e){return false;}\n\t})();\n\tvar isElectron = isNode && !!process.versions.electron;\n\n\tif(typeof steal !== \'undefined\' && (isNW || isElectron || !isNode))\n\t\tsteal.done().then(function() {\n\t\t\tif(steal.loader.autorenderAutostart !== false) {\n\t\t\t\tif (useZones){\n\t\t\t\t\treattachWithZone();\n\t\t\t\t} else {\n\t\t\t\t\tconnectViewModelAndAttach();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\treturn autorender;\n});\n';
        }
        return __p;
    };
});
/*can-define@1.5.7#map/map*/
define('can-define@1.5.7#map/map', [
    'require',
    'exports',
    'module',
    'can-construct',
    'can-define',
    '../define-helpers/define-helpers',
    'can-observation',
    'can-types',
    'can-event/batch/batch',
    'can-namespace',
    'can-log',
    'can-log/dev/dev',
    'can-reflect',
    'can-symbol',
    'can-util/js/cid-set/cid-set',
    'can-util/js/cid-map/cid-map'
], function (require, exports, module) {
    var Construct = require('can-construct');
    var define = require('can-define');
    var defineHelpers = require('../define-helpers/define-helpers');
    var Observation = require('can-observation');
    var types = require('can-types');
    var canBatch = require('can-event/batch/batch');
    var ns = require('can-namespace');
    var canLog = require('can-log');
    var canLogDev = require('can-log/dev/dev');
    var canReflect = require('can-reflect');
    var canSymbol = require('can-symbol');
    var CIDSet = require('can-util/js/cid-set/cid-set');
    var CIDMap = require('can-util/js/cid-map/cid-map');
    var keysForDefinition = function (definitions) {
        var keys = [];
        for (var prop in definitions) {
            var definition = definitions[prop];
            if (typeof definition !== 'object' || ('serialize' in definition ? !!definition.serialize : !definition.get)) {
                keys.push(prop);
            }
        }
        return keys;
    };
    function assign(source) {
        canBatch.start();
        canReflect.assignMap(this, source || {});
        canBatch.stop();
    }
    function update(source) {
        canBatch.start();
        canReflect.updateMap(this, source || {});
        canBatch.stop();
    }
    function assignDeep(source) {
        canBatch.start();
        canReflect.assignDeepMap(this, source || {});
        canBatch.stop();
    }
    function updateDeep(source) {
        canBatch.start();
        canReflect.updateDeepMap(this, source || {});
        canBatch.stop();
    }
    function setKeyValue(key, value) {
        var defined = defineHelpers.defineExpando(this, key, value);
        if (!defined) {
            this[key] = value;
        }
    }
    function getKeyValue(key) {
        var value = this[key];
        if (value !== undefined || key in this || Object.isSealed(this)) {
            return value;
        } else {
            Observation.add(this, key);
            return this[key];
        }
    }
    var DefineMap = Construct.extend('DefineMap', {
        setup: function (base) {
            var key, prototype = this.prototype;
            if (DefineMap) {
                define(prototype, prototype, base.prototype._define);
                for (key in DefineMap.prototype) {
                    define.defineConfigurableAndNotEnumerable(prototype, key, prototype[key]);
                }
                this.prototype.setup = function (props) {
                    define.setup.call(this, props || {}, this.constructor.seal);
                };
            } else {
                for (key in prototype) {
                    define.defineConfigurableAndNotEnumerable(prototype, key, prototype[key]);
                }
            }
            define.defineConfigurableAndNotEnumerable(prototype, 'constructor', this);
        }
    }, {
        setup: function (props, sealed) {
            if (!this._define) {
                Object.defineProperty(this, '_define', {
                    enumerable: false,
                    value: { definitions: {} }
                });
                Object.defineProperty(this, '_data', {
                    enumerable: false,
                    value: {}
                });
            }
            define.setup.call(this, props || {}, sealed === true);
        },
        get: function (prop) {
            if (prop) {
                return getKeyValue.call(this, prop);
            } else {
                return canReflect.unwrap(this, CIDMap);
            }
        },
        set: function (prop, value) {
            if (typeof prop === 'object') {
                canLogDev.warn('can-define/map/map.prototype.set is deprecated; please use can-define/map/map.prototype.assign or can-define/map/map.prototype.update instead');
                if (value === true) {
                    updateDeep.call(this, prop);
                } else {
                    assignDeep.call(this, prop);
                }
            } else {
                setKeyValue.call(this, prop, value);
            }
            return this;
        },
        assignDeep: function (prop) {
            assignDeep.call(this, prop);
            return this;
        },
        updateDeep: function (prop) {
            updateDeep.call(this, prop);
            return this;
        },
        assign: function (prop) {
            assign.call(this, prop);
            return this;
        },
        update: function (prop) {
            update.call(this, prop);
            return this;
        },
        serialize: function () {
            return canReflect.serialize(this, CIDMap);
        },
        forEach: function () {
            var forEach = function (list, cb, thisarg) {
                    return canReflect.eachKey(list, cb, thisarg);
                }, noObserve = Observation.ignore(forEach);
            return function (cb, thisarg, observe) {
                return observe === false ? noObserve(this, cb, thisarg) : forEach(this, cb, thisarg);
            };
        }(),
        '*': { type: define.types.observable }
    });
    canReflect.assignSymbols(DefineMap.prototype, {
        'can.isMapLike': true,
        'can.isListLike': false,
        'can.isValueLike': false,
        'can.getKeyValue': getKeyValue,
        'can.setKeyValue': setKeyValue,
        'can.deleteKeyValue': function (prop) {
            this.set(prop, undefined);
            return this;
        },
        'can.getOwnEnumerableKeys': function () {
            Observation.add(this, '__keys');
            return keysForDefinition(this._define.definitions).concat(keysForDefinition(this._instanceDefinitions));
        },
        'can.assignDeep': assignDeep,
        'can.updateDeep': updateDeep,
        'can.unwrap': defineHelpers.reflectUnwrap,
        'can.serialize': defineHelpers.reflectSerialize,
        'can.keyHasDependencies': function (key) {
            return !!(this._computed && this._computed[key] && this._computed[key].compute);
        },
        'can.getKeyDependencies': function (key) {
            var ret;
            if (this._computed && this._computed[key] && this._computed[key].compute) {
                ret = {};
                ret.valueDependencies = new CIDSet();
                ret.valueDependencies.add(this._computed[key].compute);
            }
            return ret;
        }
    });
    canReflect.setKeyValue(DefineMap.prototype, canSymbol.iterator, function () {
        return new define.Iterator(this);
    });
    for (var prop in define.eventsProto) {
        DefineMap[prop] = define.eventsProto[prop];
        Object.defineProperty(DefineMap.prototype, prop, {
            enumerable: false,
            value: define.eventsProto[prop],
            writable: true
        });
    }
    var eventsProtoSymbols = 'getOwnPropertySymbols' in Object ? Object.getOwnPropertySymbols(define.eventsProto) : [
        canSymbol.for('can.onKeyValue'),
        canSymbol.for('can.offKeyValue')
    ];
    eventsProtoSymbols.forEach(function (sym) {
        Object.defineProperty(DefineMap.prototype, sym, {
            enumerable: false,
            value: define.eventsProto[sym],
            writable: true
        });
    });
    types.DefineMap = DefineMap;
    types.DefaultMap = DefineMap;
    Object.defineProperty(DefineMap.prototype, 'toObject', {
        enumerable: false,
        writable: true,
        value: function () {
            canLog.warn('Use DefineMap::get instead of DefineMap::toObject');
            return this.get();
        }
    });
    Object.defineProperty(DefineMap.prototype, 'each', {
        enumerable: false,
        writable: true,
        value: DefineMap.prototype.forEach
    });
    module.exports = ns.DefineMap = DefineMap;
});
/*can-log@1.0.0#can-log*/
define('can-log@1.0.0#can-log', function (require, exports, module) {
    'use strict';
    exports.warnTimeout = 5000;
    exports.logLevel = 0;
    exports.warn = function () {
        var ll = this.logLevel;
        if (ll < 2) {
            if (typeof console !== 'undefined' && console.warn) {
                this._logger('warn', Array.prototype.slice.call(arguments));
            } else if (typeof console !== 'undefined' && console.log) {
                this._logger('log', Array.prototype.slice.call(arguments));
            }
        }
    };
    exports.log = function () {
        var ll = this.logLevel;
        if (ll < 1) {
            if (typeof console !== 'undefined' && console.log) {
                this._logger('log', Array.prototype.slice.call(arguments));
            }
        }
    };
    exports.error = function () {
        var ll = this.logLevel;
        if (ll < 1) {
            if (typeof console !== 'undefined' && console.error) {
                this._logger('error', Array.prototype.slice.call(arguments));
            }
        }
    };
    exports._logger = function (type, arr) {
        try {
            console[type].apply(console, arr);
        } catch (e) {
            console[type](arr);
        }
    };
});
/*can-log@1.0.0#dev/dev*/
define('can-log@1.0.0#dev/dev', [
    'require',
    'exports',
    'module',
    '../can-log'
], function (require, exports, module) {
    'use strict';
    var canLog = require('../can-log');
    module.exports = {
        warnTimeout: 5000,
        logLevel: 0,
        stringify: function (value) {
            var flagUndefined = function flagUndefined(key, value) {
                return value === undefined ? '/* void(undefined) */' : value;
            };
            return JSON.stringify(value, flagUndefined, '  ').replace(/"\/\* void\(undefined\) \*\/"/g, 'undefined');
        },
        warn: function () {
            canLog.warn.apply(this, arguments);
        },
        log: function () {
            canLog.log.apply(this, arguments);
        },
        error: function () {
            canLog.error.apply(this, arguments);
        },
        _logger: canLog._logger
    };
});
/*can-attribute-encoder@0.3.4#can-attribute-encoder*/
define('can-attribute-encoder@0.3.4#can-attribute-encoder', [
    'require',
    'exports',
    'module',
    'can-namespace',
    'can-log/dev/dev'
], function (require, exports, module) {
    var namespace = require('can-namespace');
    var dev = require('can-log/dev/dev');
    function each(items, callback) {
        for (var i = 0; i < items.length; i++) {
            callback(items[i], i);
        }
    }
    function makeMap(str) {
        var obj = {}, items = str.split(',');
        each(items, function (name) {
            obj[name] = true;
        });
        return obj;
    }
    var caseMattersAttributes = makeMap('allowReorder,attributeName,attributeType,autoReverse,baseFrequency,baseProfile,calcMode,clipPathUnits,contentScriptType,contentStyleType,diffuseConstant,edgeMode,externalResourcesRequired,filterRes,filterUnits,glyphRef,gradientTransform,gradientUnits,kernelMatrix,kernelUnitLength,keyPoints,keySplines,keyTimes,lengthAdjust,limitingConeAngle,markerHeight,markerUnits,markerWidth,maskContentUnits,maskUnits,patternContentUnits,patternTransform,patternUnits,pointsAtX,pointsAtY,pointsAtZ,preserveAlpha,preserveAspectRatio,primitiveUnits,repeatCount,repeatDur,requiredExtensions,requiredFeatures,specularConstant,specularExponent,spreadMethod,startOffset,stdDeviation,stitchTiles,surfaceScale,systemLanguage,tableValues,textLength,viewBox,viewTarget,xChannelSelector,yChannelSelector');
    function camelCaseToSpinalCase(match, lowerCaseChar, upperCaseChar) {
        return lowerCaseChar + '-' + upperCaseChar.toLowerCase();
    }
    function startsWith(allOfIt, startsWith) {
        return allOfIt.indexOf(startsWith) === 0;
    }
    function endsWith(allOfIt, endsWith) {
        return allOfIt.length - allOfIt.indexOf(endsWith) === endsWith.length;
    }
    var regexes = {
        leftParens: /\(/g,
        rightParens: /\)/g,
        leftBrace: /\{/g,
        rightBrace: /\}/g,
        camelCase: /([a-z])([A-Z])/g,
        forwardSlash: /\//g,
        space: /\s/g,
        uppercase: /[A-Z]/g,
        uppercaseDelimiterThenChar: /:u:([a-z])/g,
        caret: /\^/g,
        dollar: /\$/g,
        at: /@/g
    };
    var delimiters = {
        prependUppercase: ':u:',
        replaceSpace: ':s:',
        replaceForwardSlash: ':f:',
        replaceLeftParens: ':lp:',
        replaceRightParens: ':rp:',
        replaceLeftBrace: ':lb:',
        replaceRightBrace: ':rb:',
        replaceCaret: ':c:',
        replaceDollar: ':d:',
        replaceAt: ':at:'
    };
    var encoder = {};
    encoder.encode = function (name) {
        var encoded = name;
        if (!caseMattersAttributes[encoded] && encoded.match(regexes.camelCase)) {
            if (startsWith(encoded, 'on:') || endsWith(encoded, ':to') || endsWith(encoded, ':from') || endsWith(encoded, ':bind')) {
                encoded = encoded.replace(regexes.uppercase, function (char) {
                    return delimiters.prependUppercase + char.toLowerCase();
                });
            } else {
                encoded = encoded.replace(regexes.camelCase, camelCaseToSpinalCase);
                dev.warn('can-attribute-encoder: Found attribute with name: ' + name + '. Converting to: ' + encoded + '.');
            }
        }
        encoded = encoded.replace(regexes.space, delimiters.replaceSpace).replace(regexes.forwardSlash, delimiters.replaceForwardSlash).replace(regexes.leftParens, delimiters.replaceLeftParens).replace(regexes.rightParens, delimiters.replaceRightParens).replace(regexes.leftBrace, delimiters.replaceLeftBrace).replace(regexes.rightBrace, delimiters.replaceRightBrace).replace(regexes.caret, delimiters.replaceCaret).replace(regexes.dollar, delimiters.replaceDollar).replace(regexes.at, delimiters.replaceAt);
        return encoded;
    };
    encoder.decode = function (name) {
        var decoded = name;
        if (!caseMattersAttributes[decoded] && decoded.match(regexes.uppercaseDelimiterThenChar)) {
            if (startsWith(decoded, 'on:') || endsWith(decoded, ':to') || endsWith(decoded, ':from') || endsWith(decoded, ':bind')) {
                decoded = decoded.replace(regexes.uppercaseDelimiterThenChar, function (match, char) {
                    return char.toUpperCase();
                });
            }
        }
        decoded = decoded.replace(delimiters.replaceLeftParens, '(').replace(delimiters.replaceRightParens, ')').replace(delimiters.replaceLeftBrace, '{').replace(delimiters.replaceRightBrace, '}').replace(delimiters.replaceForwardSlash, '/').replace(delimiters.replaceSpace, ' ').replace(delimiters.replaceCaret, '^').replace(delimiters.replaceDollar, '$').replace(delimiters.replaceAt, '@');
        return decoded;
    };
    if (namespace.encoder) {
        throw new Error('You can\'t have two versions of can-attribute-encoder, check your dependencies');
    } else {
        module.exports = namespace.encoder = encoder;
    }
});
/*can-view-parser@3.8.3#can-view-parser*/
define('can-view-parser@3.8.3#can-view-parser', [
    'require',
    'exports',
    'module',
    'can-namespace',
    'can-log/dev/dev',
    'can-attribute-encoder'
], function (require, exports, module) {
    var namespace = require('can-namespace'), dev = require('can-log/dev/dev'), encoder = require('can-attribute-encoder');
    function each(items, callback) {
        for (var i = 0; i < items.length; i++) {
            callback(items[i], i);
        }
    }
    function makeMap(str) {
        var obj = {}, items = str.split(',');
        each(items, function (name) {
            obj[name] = true;
        });
        return obj;
    }
    function handleIntermediate(intermediate, handler) {
        for (var i = 0, len = intermediate.length; i < len; i++) {
            var item = intermediate[i];
            handler[item.tokenType].apply(handler, item.args);
        }
        return intermediate;
    }
    function countLines(input) {
        return input.split('\n').length - 1;
    }
    var alphaNumeric = 'A-Za-z0-9', alphaNumericHU = '-:_' + alphaNumeric, defaultMagicStart = '{{', endTag = new RegExp('^<\\/([' + alphaNumericHU + ']+)[^>]*>'), defaultMagicMatch = new RegExp('\\{\\{(![\\s\\S]*?!|[\\s\\S]*?)\\}\\}\\}?', 'g'), space = /\s/, alphaRegex = new RegExp('[' + alphaNumeric + ']'), attributeRegexp = new RegExp('[' + alphaNumericHU + ']+s*=s*("[^"]*"|\'[^\']*\')');
    var empty = makeMap('area,base,basefont,br,col,frame,hr,img,input,isindex,link,meta,param,embed');
    var caseMattersElements = makeMap('altGlyph,altGlyphDef,altGlyphItem,animateColor,animateMotion,animateTransform,clipPath,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistantLight,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,foreignObject,glyphRef,linearGradient,radialGradient,textPath');
    var closeSelf = makeMap('colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr');
    var special = makeMap('script');
    var tokenTypes = 'start,end,close,attrStart,attrEnd,attrValue,chars,comment,special,done'.split(',');
    var startOppositesMap = {
        '{': '}',
        '(': ')'
    };
    var fn = function () {
    };
    var HTMLParser = function (html, handler, returnIntermediate) {
        if (typeof html === 'object') {
            return handleIntermediate(html, handler);
        }
        var intermediate = [];
        handler = handler || {};
        if (returnIntermediate) {
            each(tokenTypes, function (name) {
                var callback = handler[name] || fn;
                handler[name] = function () {
                    if (callback.apply(this, arguments) !== false) {
                        var end = arguments.length;
                        if (arguments[end - 1] === undefined) {
                            end = arguments.length - 1;
                        }
                        end = arguments.length;
                        intermediate.push({
                            tokenType: name,
                            args: [].slice.call(arguments, 0, end)
                        });
                    }
                };
            });
        }
        var magicMatch = handler.magicMatch || defaultMagicMatch, magicStart = handler.magicStart || defaultMagicStart;
        if (handler.magicMatch) {
            dev.warn('can-view-parser: magicMatch is deprecated.');
        }
        if (handler.magicStart) {
            dev.warn('can-view-parser: magicStart is deprecated.');
        }
        function parseStartTag(tag, tagName, rest, unary) {
            tagName = caseMattersElements[tagName] ? tagName : tagName.toLowerCase();
            if (closeSelf[tagName] && stack.last() === tagName) {
                parseEndTag('', tagName);
            }
            unary = empty[tagName] || !!unary;
            handler.start(tagName, unary, lineNo);
            if (!unary) {
                stack.push(tagName);
            }
            HTMLParser.parseAttrs(rest, handler, lineNo);
            lineNo += countLines(tag);
            handler.end(tagName, unary, lineNo);
        }
        function parseEndTag(tag, tagName) {
            var pos;
            if (!tagName) {
                pos = 0;
            } else {
                tagName = caseMattersElements[tagName] ? tagName : tagName.toLowerCase();
                for (pos = stack.length - 1; pos >= 0; pos--) {
                    if (stack[pos] === tagName) {
                        break;
                    }
                }
            }
            if (typeof tag === 'undefined') {
                if (stack.length > 0) {
                    if (handler.filename) {
                        dev.warn(handler.filename + ': expected closing tag </' + stack[pos] + '>');
                    } else {
                        dev.warn('expected closing tag </' + stack[pos] + '>');
                    }
                }
            } else if (pos < 0 || pos !== stack.length - 1) {
                if (stack.length > 0) {
                    if (handler.filename) {
                        dev.warn(handler.filename + ':' + lineNo + ': unexpected closing tag ' + tag + ' expected </' + stack[stack.length - 1] + '>');
                    } else {
                        dev.warn(lineNo + ': unexpected closing tag ' + tag + ' expected </' + stack[stack.length - 1] + '>');
                    }
                } else {
                    if (handler.filename) {
                        dev.warn(handler.filename + ':' + lineNo + ': unexpected closing tag ' + tag);
                    } else {
                        dev.warn(lineNo + ': unexpected closing tag ' + tag);
                    }
                }
            }
            if (pos >= 0) {
                for (var i = stack.length - 1; i >= pos; i--) {
                    if (handler.close) {
                        handler.close(stack[i], lineNo);
                    }
                }
                stack.length = pos;
            }
        }
        function parseMustache(mustache, inside) {
            if (handler.special) {
                handler.special(inside, lineNo);
            }
        }
        var callChars = function () {
            if (charsText) {
                if (handler.chars) {
                    handler.chars(charsText, lineNo);
                }
                lineNo += countLines(charsText);
            }
            charsText = '';
        };
        var index, chars, match, lineNo, stack = [], last = html, charsText = '';
        lineNo = 1;
        stack.last = function () {
            return this[this.length - 1];
        };
        while (html) {
            chars = true;
            if (!stack.last() || !special[stack.last()]) {
                if (html.indexOf('<!--') === 0) {
                    index = html.indexOf('-->');
                    if (index >= 0) {
                        callChars();
                        if (handler.comment) {
                            handler.comment(html.substring(4, index), lineNo);
                        }
                        lineNo += countLines(html.substring(0, index + 3));
                        html = html.substring(index + 3);
                        chars = false;
                    }
                } else if (html.indexOf('</') === 0) {
                    match = html.match(endTag);
                    if (match) {
                        callChars();
                        match[0].replace(endTag, parseEndTag);
                        lineNo += countLines(html.substring(0, match[0].length));
                        html = html.substring(match[0].length);
                        chars = false;
                    }
                } else if (html.indexOf('<') === 0) {
                    var res = HTMLParser.searchStartTag(html);
                    if (res) {
                        callChars();
                        parseStartTag.apply(null, res.match);
                        html = res.html;
                        chars = false;
                    }
                } else if (html.indexOf(magicStart) === 0) {
                    match = html.match(magicMatch);
                    if (match) {
                        callChars();
                        match[0].replace(magicMatch, parseMustache);
                        lineNo += countLines(html.substring(0, match[0].length));
                        html = html.substring(match[0].length);
                    }
                }
                if (chars) {
                    index = findBreak(html, magicStart);
                    if (index === 0 && html === last) {
                        charsText += html.charAt(0);
                        html = html.substr(1);
                        index = findBreak(html, magicStart);
                    }
                    var text = index < 0 ? html : html.substring(0, index);
                    html = index < 0 ? '' : html.substring(index);
                    if (text) {
                        charsText += text;
                    }
                }
            } else {
                html = html.replace(new RegExp('([\\s\\S]*?)</' + stack.last() + '[^>]*>'), function (all, text) {
                    text = text.replace(/<!--([\s\S]*?)-->|<!\[CDATA\[([\s\S]*?)]]>/g, '$1$2');
                    if (handler.chars) {
                        handler.chars(text, lineNo);
                    }
                    lineNo += countLines(text);
                    return '';
                });
                parseEndTag('', stack.last());
            }
            if (html === last) {
                throw new Error('Parse Error: ' + html);
            }
            last = html;
        }
        callChars();
        parseEndTag();
        handler.done(lineNo);
        return intermediate;
    };
    var callAttrStart = function (state, curIndex, handler, rest, lineNo) {
        var attrName = rest.substring(typeof state.nameStart === 'number' ? state.nameStart : curIndex, curIndex), newAttrName = encoder.encode(attrName);
        state.attrStart = newAttrName;
        handler.attrStart(state.attrStart, lineNo);
        state.inName = false;
    };
    var callAttrEnd = function (state, curIndex, handler, rest, lineNo) {
        if (state.valueStart !== undefined && state.valueStart < curIndex) {
            var val = rest.substring(state.valueStart, curIndex);
            var quotedVal, closedQuote;
            quotedVal = rest.substring(state.valueStart - 1, curIndex + 1);
            quotedVal = quotedVal.trim();
            closedQuote = quotedVal.charAt(quotedVal.length - 1);
            if (state.inQuote !== closedQuote) {
                if (handler.filename) {
                    dev.warn(handler.filename + ':' + lineNo + ': End quote is missing for ' + val);
                } else {
                    dev.warn(lineNo + ': End quote is missing for ' + val);
                }
            }
            handler.attrValue(val, lineNo);
        }
        handler.attrEnd(state.attrStart, lineNo);
        state.attrStart = undefined;
        state.valueStart = undefined;
        state.inValue = false;
        state.inName = false;
        state.lookingForEq = false;
        state.inQuote = false;
        state.lookingForName = true;
    };
    var findBreak = function (str, magicStart) {
        var magicLength = magicStart.length;
        for (var i = 0, len = str.length; i < len; i++) {
            if (str[i] === '<' || str.substr(i, magicLength) === magicStart) {
                return i;
            }
        }
        return -1;
    };
    HTMLParser.parseAttrs = function (rest, handler, lineNo) {
        if (!rest) {
            return;
        }
        var magicMatch = handler.magicMatch || defaultMagicMatch, magicStart = handler.magicStart || defaultMagicStart;
        var i = 0;
        var curIndex;
        var state = {
            inName: false,
            nameStart: undefined,
            inValue: false,
            valueStart: undefined,
            inQuote: false,
            attrStart: undefined,
            lookingForName: true,
            lookingForValue: false,
            lookingForEq: false
        };
        while (i < rest.length) {
            curIndex = i;
            var cur = rest.charAt(i);
            i++;
            if (magicStart === rest.substr(curIndex, magicStart.length)) {
                if (state.inValue && curIndex > state.valueStart) {
                    handler.attrValue(rest.substring(state.valueStart, curIndex), lineNo);
                } else if (state.inName && state.nameStart < curIndex) {
                    callAttrStart(state, curIndex, handler, rest, lineNo);
                    callAttrEnd(state, curIndex, handler, rest, lineNo);
                } else if (state.lookingForValue) {
                    state.inValue = true;
                } else if (state.lookingForEq && state.attrStart) {
                    callAttrEnd(state, curIndex, handler, rest, lineNo);
                }
                magicMatch.lastIndex = curIndex;
                var match = magicMatch.exec(rest);
                if (match) {
                    handler.special(match[1], lineNo);
                    i = curIndex + match[0].length;
                    if (state.inValue) {
                        state.valueStart = curIndex + match[0].length;
                    }
                }
            } else if (state.inValue) {
                if (state.inQuote) {
                    if (cur === state.inQuote) {
                        callAttrEnd(state, curIndex, handler, rest, lineNo);
                    }
                } else if (space.test(cur)) {
                    callAttrEnd(state, curIndex, handler, rest, lineNo);
                }
            } else if (cur === '=' && (state.lookingForEq || state.lookingForName || state.inName)) {
                if (!state.attrStart) {
                    callAttrStart(state, curIndex, handler, rest, lineNo);
                }
                state.lookingForValue = true;
                state.lookingForEq = false;
                state.lookingForName = false;
            } else if (state.inName) {
                var started = rest[state.nameStart], otherStart, otherOpposite;
                if (startOppositesMap[started] === cur) {
                    otherStart = started === '{' ? '(' : '{';
                    otherOpposite = startOppositesMap[otherStart];
                    if (rest[curIndex + 1] === otherOpposite) {
                        callAttrStart(state, curIndex + 2, handler, rest, lineNo);
                        i++;
                    } else {
                        callAttrStart(state, curIndex + 1, handler, rest, lineNo);
                    }
                    state.lookingForEq = true;
                } else if (space.test(cur) && started !== '{' && started !== '(') {
                    callAttrStart(state, curIndex, handler, rest, lineNo);
                    state.lookingForEq = true;
                }
            } else if (state.lookingForName) {
                if (!space.test(cur)) {
                    if (state.attrStart) {
                        callAttrEnd(state, curIndex, handler, rest, lineNo);
                    }
                    state.nameStart = curIndex;
                    state.inName = true;
                }
            } else if (state.lookingForValue) {
                if (!space.test(cur)) {
                    state.lookingForValue = false;
                    state.inValue = true;
                    if (cur === '\'' || cur === '"') {
                        state.inQuote = cur;
                        state.valueStart = curIndex + 1;
                    } else {
                        state.valueStart = curIndex;
                    }
                } else if (i === rest.length) {
                    callAttrEnd(state, curIndex, handler, rest, lineNo);
                }
            }
        }
        if (state.inName) {
            callAttrStart(state, curIndex + 1, handler, rest, lineNo);
            callAttrEnd(state, curIndex + 1, handler, rest, lineNo);
        } else if (state.lookingForEq || state.lookingForValue || state.inValue) {
            callAttrEnd(state, curIndex + 1, handler, rest, lineNo);
        }
        magicMatch.lastIndex = 0;
    };
    HTMLParser.searchStartTag = function (html) {
        var closingIndex = html.indexOf('>');
        var attributeRange = attributeRegexp.exec(html.substring(1));
        var afterAttributeOffset = 1;
        while (attributeRange && closingIndex >= afterAttributeOffset + attributeRange.index) {
            afterAttributeOffset += attributeRange.index + attributeRange[0].length;
            while (closingIndex < afterAttributeOffset) {
                closingIndex += html.substring(closingIndex + 1).indexOf('>') + 1;
            }
            attributeRange = attributeRegexp.exec(html.substring(afterAttributeOffset));
        }
        if (closingIndex === -1 || !alphaRegex.test(html[1])) {
            return null;
        }
        var tagName, tagContent, match, rest = '', unary = '';
        var startTag = html.substring(0, closingIndex + 1);
        var isUnary = startTag[startTag.length - 2] === '/';
        var spaceIndex = startTag.search(space);
        if (isUnary) {
            unary = '/';
            tagContent = startTag.substring(1, startTag.length - 2).trim();
        } else {
            tagContent = startTag.substring(1, startTag.length - 1).trim();
        }
        if (spaceIndex === -1) {
            tagName = tagContent;
        } else {
            spaceIndex--;
            tagName = tagContent.substring(0, spaceIndex);
            rest = tagContent.substring(spaceIndex);
        }
        match = [
            startTag,
            tagName,
            rest,
            unary
        ];
        return {
            match: match,
            html: html.substring(startTag.length)
        };
    };
    module.exports = namespace.HTMLParser = HTMLParser;
});
/*can-symbol@1.6.1#can-symbol*/
define('can-symbol@1.6.1#can-symbol', [
    'require',
    'exports',
    'module',
    'can-namespace'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        var namespace = require('can-namespace');
        var CanSymbol;
        if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') {
            CanSymbol = Symbol;
        } else {
            var symbolNum = 0;
            CanSymbol = function CanSymbolPolyfill(description) {
                var symbolValue = '@@symbol' + symbolNum++ + description;
                var symbol = {};
                Object.defineProperties(symbol, {
                    toString: {
                        value: function () {
                            return symbolValue;
                        }
                    }
                });
                return symbol;
            };
            var descriptionToSymbol = {};
            var symbolToDescription = {};
            CanSymbol.for = function (description) {
                var symbol = descriptionToSymbol[description];
                if (!symbol) {
                    symbol = descriptionToSymbol[description] = CanSymbol(description);
                    symbolToDescription[symbol] = description;
                }
                return symbol;
            };
            CanSymbol.keyFor = function (symbol) {
                return symbolToDescription[symbol];
            };
            [
                'hasInstance',
                'isConcatSpreadable',
                'iterator',
                'match',
                'prototype',
                'replace',
                'search',
                'species',
                'split',
                'toPrimitive',
                'toStringTag',
                'unscopables'
            ].forEach(function (name) {
                CanSymbol[name] = CanSymbol('Symbol.' + name);
            });
        }
        [
            'isMapLike',
            'isListLike',
            'isValueLike',
            'isFunctionLike',
            'getOwnKeys',
            'getOwnKeyDescriptor',
            'proto',
            'getOwnEnumerableKeys',
            'hasOwnKey',
            'hasKey',
            'size',
            'getName',
            'getIdentity',
            'assignDeep',
            'updateDeep',
            'getValue',
            'setValue',
            'getKeyValue',
            'setKeyValue',
            'updateValues',
            'addValue',
            'removeValues',
            'apply',
            'new',
            'onValue',
            'offValue',
            'onKeyValue',
            'offKeyValue',
            'getKeyDependencies',
            'getValueDependencies',
            'keyHasDependencies',
            'valueHasDependencies',
            'onKeys',
            'onKeysAdded',
            'onKeysRemoved',
            'onPatches'
        ].forEach(function (name) {
            CanSymbol.for('can.' + name);
        });
        module.exports = namespace.Symbol = CanSymbol;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-reflect@1.17.6#reflections/helpers*/
define('can-reflect@1.17.6#reflections/helpers', [
    'require',
    'exports',
    'module',
    'can-symbol'
], function (require, exports, module) {
    'use strict';
    var canSymbol = require('can-symbol');
    module.exports = {
        makeGetFirstSymbolValue: function (symbolNames) {
            var symbols = symbolNames.map(function (name) {
                return canSymbol.for(name);
            });
            var length = symbols.length;
            return function getFirstSymbol(obj) {
                var index = -1;
                while (++index < length) {
                    if (obj[symbols[index]] !== undefined) {
                        return obj[symbols[index]];
                    }
                }
            };
        },
        hasLength: function (list) {
            var type = typeof list;
            if (type === 'string' || Array.isArray(list)) {
                return true;
            }
            var length = list && (type !== 'boolean' && type !== 'number' && 'length' in list) && list.length;
            return typeof list !== 'function' && (length === 0 || typeof length === 'number' && length > 0 && length - 1 in list);
        }
    };
});
/*can-reflect@1.17.6#reflections/type/type*/
define('can-reflect@1.17.6#reflections/type/type', [
    'require',
    'exports',
    'module',
    'can-symbol',
    '../helpers'
], function (require, exports, module) {
    'use strict';
    var canSymbol = require('can-symbol');
    var helpers = require('../helpers');
    var plainFunctionPrototypePropertyNames = Object.getOwnPropertyNames(function () {
    }.prototype);
    var plainFunctionPrototypeProto = Object.getPrototypeOf(function () {
    }.prototype);
    function isConstructorLike(func) {
        var value = func[canSymbol.for('can.new')];
        if (value !== undefined) {
            return value;
        }
        if (typeof func !== 'function') {
            return false;
        }
        var prototype = func.prototype;
        if (!prototype) {
            return false;
        }
        if (plainFunctionPrototypeProto !== Object.getPrototypeOf(prototype)) {
            return true;
        }
        var propertyNames = Object.getOwnPropertyNames(prototype);
        if (propertyNames.length === plainFunctionPrototypePropertyNames.length) {
            for (var i = 0, len = propertyNames.length; i < len; i++) {
                if (propertyNames[i] !== plainFunctionPrototypePropertyNames[i]) {
                    return true;
                }
            }
            return false;
        } else {
            return true;
        }
    }
    var getNewOrApply = helpers.makeGetFirstSymbolValue([
        'can.new',
        'can.apply'
    ]);
    function isFunctionLike(obj) {
        var result, symbolValue = !!obj && obj[canSymbol.for('can.isFunctionLike')];
        if (symbolValue !== undefined) {
            return symbolValue;
        }
        result = getNewOrApply(obj);
        if (result !== undefined) {
            return !!result;
        }
        return typeof obj === 'function';
    }
    function isPrimitive(obj) {
        var type = typeof obj;
        if (obj == null || type !== 'function' && type !== 'object') {
            return true;
        } else {
            return false;
        }
    }
    var coreHasOwn = Object.prototype.hasOwnProperty;
    var funcToString = Function.prototype.toString;
    var objectCtorString = funcToString.call(Object);
    function isPlainObject(obj) {
        if (!obj || typeof obj !== 'object') {
            return false;
        }
        var proto = Object.getPrototypeOf(obj);
        if (proto === Object.prototype || proto === null) {
            return true;
        }
        var Constructor = coreHasOwn.call(proto, 'constructor') && proto.constructor;
        return typeof Constructor === 'function' && Constructor instanceof Constructor && funcToString.call(Constructor) === objectCtorString;
    }
    function isBuiltIn(obj) {
        if (isPrimitive(obj) || Array.isArray(obj) || isPlainObject(obj) || Object.prototype.toString.call(obj) !== '[object Object]' && Object.prototype.toString.call(obj).indexOf('[object ') !== -1) {
            return true;
        } else {
            return false;
        }
    }
    function isValueLike(obj) {
        var symbolValue;
        if (isPrimitive(obj)) {
            return true;
        }
        symbolValue = obj[canSymbol.for('can.isValueLike')];
        if (typeof symbolValue !== 'undefined') {
            return symbolValue;
        }
        var value = obj[canSymbol.for('can.getValue')];
        if (value !== undefined) {
            return !!value;
        }
    }
    function isMapLike(obj) {
        if (isPrimitive(obj)) {
            return false;
        }
        var isMapLike = obj[canSymbol.for('can.isMapLike')];
        if (typeof isMapLike !== 'undefined') {
            return !!isMapLike;
        }
        var value = obj[canSymbol.for('can.getKeyValue')];
        if (value !== undefined) {
            return !!value;
        }
        return true;
    }
    var onValueSymbol = canSymbol.for('can.onValue'), onKeyValueSymbol = canSymbol.for('can.onKeyValue'), onPatchesSymbol = canSymbol.for('can.onPatches');
    function isObservableLike(obj) {
        if (isPrimitive(obj)) {
            return false;
        }
        return Boolean(obj[onValueSymbol] || obj[onKeyValueSymbol] || obj[onPatchesSymbol]);
    }
    function isListLike(list) {
        var symbolValue, type = typeof list;
        if (type === 'string') {
            return true;
        }
        if (isPrimitive(list)) {
            return false;
        }
        symbolValue = list[canSymbol.for('can.isListLike')];
        if (typeof symbolValue !== 'undefined') {
            return symbolValue;
        }
        var value = list[canSymbol.iterator];
        if (value !== undefined) {
            return !!value;
        }
        if (Array.isArray(list)) {
            return true;
        }
        return helpers.hasLength(list);
    }
    var supportsSymbols = typeof Symbol !== 'undefined' && typeof Symbol.for === 'function';
    var isSymbolLike;
    if (supportsSymbols) {
        isSymbolLike = function (symbol) {
            return typeof symbol === 'symbol';
        };
    } else {
        var symbolStart = '@@symbol';
        isSymbolLike = function (symbol) {
            if (typeof symbol === 'object' && !Array.isArray(symbol)) {
                return symbol.toString().substr(0, symbolStart.length) === symbolStart;
            } else {
                return false;
            }
        };
    }
    module.exports = {
        isConstructorLike: isConstructorLike,
        isFunctionLike: isFunctionLike,
        isListLike: isListLike,
        isMapLike: isMapLike,
        isObservableLike: isObservableLike,
        isPrimitive: isPrimitive,
        isBuiltIn: isBuiltIn,
        isValueLike: isValueLike,
        isSymbolLike: isSymbolLike,
        isMoreListLikeThanMapLike: function (obj) {
            if (Array.isArray(obj)) {
                return true;
            }
            if (obj instanceof Array) {
                return true;
            }
            if (obj == null) {
                return false;
            }
            var value = obj[canSymbol.for('can.isMoreListLikeThanMapLike')];
            if (value !== undefined) {
                return value;
            }
            var isListLike = this.isListLike(obj), isMapLike = this.isMapLike(obj);
            if (isListLike && !isMapLike) {
                return true;
            } else if (!isListLike && isMapLike) {
                return false;
            }
        },
        isIteratorLike: function (obj) {
            return obj && typeof obj === 'object' && typeof obj.next === 'function' && obj.next.length === 0;
        },
        isPromise: function (obj) {
            return obj instanceof Promise || Object.prototype.toString.call(obj) === '[object Promise]';
        },
        isPlainObject: isPlainObject
    };
});
/*can-reflect@1.17.6#reflections/call/call*/
define('can-reflect@1.17.6#reflections/call/call', [
    'require',
    'exports',
    'module',
    'can-symbol',
    '../type/type'
], function (require, exports, module) {
    'use strict';
    var canSymbol = require('can-symbol');
    var typeReflections = require('../type/type');
    module.exports = {
        call: function (func, context) {
            var args = [].slice.call(arguments, 2);
            var apply = func[canSymbol.for('can.apply')];
            if (apply) {
                return apply.call(func, context, args);
            } else {
                return func.apply(context, args);
            }
        },
        apply: function (func, context, args) {
            var apply = func[canSymbol.for('can.apply')];
            if (apply) {
                return apply.call(func, context, args);
            } else {
                return func.apply(context, args);
            }
        },
        'new': function (func) {
            var args = [].slice.call(arguments, 1);
            var makeNew = func[canSymbol.for('can.new')];
            if (makeNew) {
                return makeNew.apply(func, args);
            } else {
                var context = Object.create(func.prototype);
                var ret = func.apply(context, args);
                if (typeReflections.isPrimitive(ret)) {
                    return context;
                } else {
                    return ret;
                }
            }
        }
    };
});
/*can-reflect@1.17.6#reflections/get-set/get-set*/
define('can-reflect@1.17.6#reflections/get-set/get-set', [
    'require',
    'exports',
    'module',
    'can-symbol',
    '../type/type'
], function (require, exports, module) {
    'use strict';
    var canSymbol = require('can-symbol');
    var typeReflections = require('../type/type');
    var setKeyValueSymbol = canSymbol.for('can.setKeyValue'), getKeyValueSymbol = canSymbol.for('can.getKeyValue'), getValueSymbol = canSymbol.for('can.getValue'), setValueSymbol = canSymbol.for('can.setValue');
    var reflections = {
        setKeyValue: function (obj, key, value) {
            if (typeReflections.isSymbolLike(key)) {
                if (typeof key === 'symbol') {
                    obj[key] = value;
                } else {
                    Object.defineProperty(obj, key, {
                        enumerable: false,
                        configurable: true,
                        value: value,
                        writable: true
                    });
                }
                return;
            }
            var setKeyValue = obj[setKeyValueSymbol];
            if (setKeyValue !== undefined) {
                return setKeyValue.call(obj, key, value);
            } else {
                obj[key] = value;
            }
        },
        getKeyValue: function (obj, key) {
            var getKeyValue = obj[getKeyValueSymbol];
            if (getKeyValue) {
                return getKeyValue.call(obj, key);
            }
            return obj[key];
        },
        deleteKeyValue: function (obj, key) {
            var deleteKeyValue = obj[canSymbol.for('can.deleteKeyValue')];
            if (deleteKeyValue) {
                return deleteKeyValue.call(obj, key);
            }
            delete obj[key];
        },
        getValue: function (value) {
            if (typeReflections.isPrimitive(value)) {
                return value;
            }
            var getValue = value[getValueSymbol];
            if (getValue) {
                return getValue.call(value);
            }
            return value;
        },
        setValue: function (item, value) {
            var setValue = item && item[setValueSymbol];
            if (setValue) {
                return setValue.call(item, value);
            } else {
                throw new Error('can-reflect.setValue - Can not set value.');
            }
        },
        splice: function (obj, index, removing, adding) {
            var howMany;
            if (typeof removing !== 'number') {
                var updateValues = obj[canSymbol.for('can.updateValues')];
                if (updateValues) {
                    return updateValues.call(obj, index, removing, adding);
                }
                howMany = removing.length;
            } else {
                howMany = removing;
            }
            if (arguments.length <= 3) {
                adding = [];
            }
            var splice = obj[canSymbol.for('can.splice')];
            if (splice) {
                return splice.call(obj, index, howMany, adding);
            }
            return [].splice.apply(obj, [
                index,
                howMany
            ].concat(adding));
        },
        addValues: function (obj, adding, index) {
            var add = obj[canSymbol.for('can.addValues')];
            if (add) {
                return add.call(obj, adding, index);
            }
            if (Array.isArray(obj) && index === undefined) {
                return obj.push.apply(obj, adding);
            }
            return reflections.splice(obj, index, [], adding);
        },
        removeValues: function (obj, removing, index) {
            var removeValues = obj[canSymbol.for('can.removeValues')];
            if (removeValues) {
                return removeValues.call(obj, removing, index);
            }
            if (Array.isArray(obj) && index === undefined) {
                removing.forEach(function (item) {
                    var index = obj.indexOf(item);
                    if (index >= 0) {
                        obj.splice(index, 1);
                    }
                });
                return;
            }
            return reflections.splice(obj, index, removing, []);
        }
    };
    reflections.get = reflections.getKeyValue;
    reflections.set = reflections.setKeyValue;
    reflections['delete'] = reflections.deleteKeyValue;
    module.exports = reflections;
});
/*can-reflect@1.17.6#reflections/observe/observe*/
define('can-reflect@1.17.6#reflections/observe/observe', [
    'require',
    'exports',
    'module',
    'can-symbol'
], function (require, exports, module) {
    'use strict';
    var canSymbol = require('can-symbol');
    var slice = [].slice;
    function makeFallback(symbolName, fallbackName) {
        return function (obj, event, handler, queueName) {
            var method = obj[canSymbol.for(symbolName)];
            if (method !== undefined) {
                return method.call(obj, event, handler, queueName);
            }
            return this[fallbackName].apply(this, arguments);
        };
    }
    function makeErrorIfMissing(symbolName, errorMessage) {
        return function (obj) {
            var method = obj[canSymbol.for(symbolName)];
            if (method !== undefined) {
                var args = slice.call(arguments, 1);
                return method.apply(obj, args);
            }
            throw new Error(errorMessage);
        };
    }
    module.exports = {
        onKeyValue: makeFallback('can.onKeyValue', 'onEvent'),
        offKeyValue: makeFallback('can.offKeyValue', 'offEvent'),
        onKeys: makeErrorIfMissing('can.onKeys', 'can-reflect: can not observe an onKeys event'),
        onKeysAdded: makeErrorIfMissing('can.onKeysAdded', 'can-reflect: can not observe an onKeysAdded event'),
        onKeysRemoved: makeErrorIfMissing('can.onKeysRemoved', 'can-reflect: can not unobserve an onKeysRemoved event'),
        getKeyDependencies: makeErrorIfMissing('can.getKeyDependencies', 'can-reflect: can not determine dependencies'),
        getWhatIChange: makeErrorIfMissing('can.getWhatIChange', 'can-reflect: can not determine dependencies'),
        getChangesDependencyRecord: function getChangesDependencyRecord(handler) {
            var fn = handler[canSymbol.for('can.getChangesDependencyRecord')];
            if (typeof fn === 'function') {
                return fn();
            }
        },
        keyHasDependencies: makeErrorIfMissing('can.keyHasDependencies', 'can-reflect: can not determine if this has key dependencies'),
        onValue: makeErrorIfMissing('can.onValue', 'can-reflect: can not observe value change'),
        offValue: makeErrorIfMissing('can.offValue', 'can-reflect: can not unobserve value change'),
        getValueDependencies: makeErrorIfMissing('can.getValueDependencies', 'can-reflect: can not determine dependencies'),
        valueHasDependencies: makeErrorIfMissing('can.valueHasDependencies', 'can-reflect: can not determine if value has dependencies'),
        onPatches: makeErrorIfMissing('can.onPatches', 'can-reflect: can not observe patches on object'),
        offPatches: makeErrorIfMissing('can.offPatches', 'can-reflect: can not unobserve patches on object'),
        onInstancePatches: makeErrorIfMissing('can.onInstancePatches', 'can-reflect: can not observe onInstancePatches on Type'),
        offInstancePatches: makeErrorIfMissing('can.offInstancePatches', 'can-reflect: can not unobserve onInstancePatches on Type'),
        onInstanceBoundChange: makeErrorIfMissing('can.onInstanceBoundChange', 'can-reflect: can not observe bound state change in instances.'),
        offInstanceBoundChange: makeErrorIfMissing('can.offInstanceBoundChange', 'can-reflect: can not unobserve bound state change'),
        isBound: makeErrorIfMissing('can.isBound', 'can-reflect: cannot determine if object is bound'),
        onEvent: function (obj, eventName, callback, queue) {
            if (obj) {
                var onEvent = obj[canSymbol.for('can.onEvent')];
                if (onEvent !== undefined) {
                    return onEvent.call(obj, eventName, callback, queue);
                } else if (obj.addEventListener) {
                    obj.addEventListener(eventName, callback, queue);
                }
            }
        },
        offEvent: function (obj, eventName, callback, queue) {
            if (obj) {
                var offEvent = obj[canSymbol.for('can.offEvent')];
                if (offEvent !== undefined) {
                    return offEvent.call(obj, eventName, callback, queue);
                } else if (obj.removeEventListener) {
                    obj.removeEventListener(eventName, callback, queue);
                }
            }
        },
        setPriority: function (obj, priority) {
            if (obj) {
                var setPriority = obj[canSymbol.for('can.setPriority')];
                if (setPriority !== undefined) {
                    setPriority.call(obj, priority);
                    return true;
                }
            }
            return false;
        },
        getPriority: function (obj) {
            if (obj) {
                var getPriority = obj[canSymbol.for('can.getPriority')];
                if (getPriority !== undefined) {
                    return getPriority.call(obj);
                }
            }
            return undefined;
        }
    };
});
/*can-reflect@1.17.6#reflections/shape/shape*/
define('can-reflect@1.17.6#reflections/shape/shape', [
    'require',
    'exports',
    'module',
    'can-symbol',
    '../get-set/get-set',
    '../type/type',
    '../helpers'
], function (require, exports, module) {
    'use strict';
    var canSymbol = require('can-symbol');
    var getSetReflections = require('../get-set/get-set');
    var typeReflections = require('../type/type');
    var helpers = require('../helpers');
    var getPrototypeOfWorksWithPrimitives = true;
    try {
        Object.getPrototypeOf(1);
    } catch (e) {
        getPrototypeOfWorksWithPrimitives = false;
    }
    var ArrayMap;
    if (typeof Map === 'function') {
        ArrayMap = Map;
    } else {
        var isEven = function isEven(num) {
            return num % 2 === 0;
        };
        ArrayMap = function () {
            this.contents = [];
        };
        ArrayMap.prototype = {
            _getIndex: function (key) {
                var idx;
                do {
                    idx = this.contents.indexOf(key, idx);
                } while (idx !== -1 && !isEven(idx));
                return idx;
            },
            has: function (key) {
                return this._getIndex(key) !== -1;
            },
            get: function (key) {
                var idx = this._getIndex(key);
                if (idx !== -1) {
                    return this.contents[idx + 1];
                }
            },
            set: function (key, value) {
                var idx = this._getIndex(key);
                if (idx !== -1) {
                    this.contents[idx + 1] = value;
                } else {
                    this.contents.push(key);
                    this.contents.push(value);
                }
            },
            'delete': function (key) {
                var idx = this._getIndex(key);
                if (idx !== -1) {
                    this.contents.splice(idx, 2);
                }
            }
        };
    }
    var shapeReflections;
    var shiftFirstArgumentToThis = function (func) {
        return function () {
            var args = [this];
            args.push.apply(args, arguments);
            return func.apply(null, args);
        };
    };
    var getKeyValueSymbol = canSymbol.for('can.getKeyValue');
    var shiftedGetKeyValue = shiftFirstArgumentToThis(getSetReflections.getKeyValue);
    var setKeyValueSymbol = canSymbol.for('can.setKeyValue');
    var shiftedSetKeyValue = shiftFirstArgumentToThis(getSetReflections.setKeyValue);
    var sizeSymbol = canSymbol.for('can.size');
    var hasUpdateSymbol = helpers.makeGetFirstSymbolValue([
        'can.updateDeep',
        'can.assignDeep',
        'can.setKeyValue'
    ]);
    var shouldUpdateOrAssign = function (obj) {
        return typeReflections.isPlainObject(obj) || Array.isArray(obj) || !!hasUpdateSymbol(obj);
    };
    function isSerializedHelper(obj) {
        if (typeReflections.isPrimitive(obj)) {
            return true;
        }
        if (hasUpdateSymbol(obj)) {
            return false;
        }
        return typeReflections.isBuiltIn(obj) && !typeReflections.isPlainObject(obj) && !Array.isArray(obj);
    }
    var Object_Keys;
    try {
        Object.keys(1);
        Object_Keys = Object.keys;
    } catch (e) {
        Object_Keys = function (obj) {
            if (typeReflections.isPrimitive(obj)) {
                return [];
            } else {
                return Object.keys(obj);
            }
        };
    }
    function createSerializeMap(Type) {
        var MapType = Type || ArrayMap;
        return {
            unwrap: new MapType(),
            serialize: new MapType(),
            isSerializing: {
                unwrap: new MapType(),
                serialize: new MapType()
            },
            circularReferenceIsSerializing: {
                unwrap: new MapType(),
                serialize: new MapType()
            }
        };
    }
    function makeSerializer(methodName, symbolsToCheck) {
        var serializeMap = null;
        function SerializeOperation(MapType) {
            this.first = !serializeMap;
            if (this.first) {
                serializeMap = createSerializeMap(MapType);
            }
            this.map = serializeMap;
            this.result = null;
        }
        SerializeOperation.prototype.end = function () {
            if (this.first) {
                serializeMap = null;
            }
            return this.result;
        };
        return function serializer(value, MapType) {
            if (isSerializedHelper(value)) {
                return value;
            }
            var operation = new SerializeOperation(MapType);
            if (typeReflections.isValueLike(value)) {
                operation.result = this[methodName](getSetReflections.getValue(value));
            } else {
                var isListLike = typeReflections.isIteratorLike(value) || typeReflections.isMoreListLikeThanMapLike(value);
                operation.result = isListLike ? [] : {};
                if (operation.map[methodName].has(value)) {
                    if (operation.map.isSerializing[methodName].has(value)) {
                        operation.map.circularReferenceIsSerializing[methodName].set(value, true);
                    }
                    return operation.map[methodName].get(value);
                } else {
                    operation.map[methodName].set(value, operation.result);
                }
                for (var i = 0, len = symbolsToCheck.length; i < len; i++) {
                    var serializer = value[symbolsToCheck[i]];
                    if (serializer) {
                        operation.map.isSerializing[methodName].set(value, true);
                        var oldResult = operation.result;
                        operation.result = serializer.call(value, oldResult);
                        operation.map.isSerializing[methodName].delete(value);
                        if (operation.result !== oldResult) {
                            if (operation.map.circularReferenceIsSerializing[methodName].has(value)) {
                                operation.end();
                                throw new Error('Cannot serialize cirular reference!');
                            }
                            operation.map[methodName].set(value, operation.result);
                        }
                        return operation.end();
                    }
                }
                if (typeof obj === 'function') {
                    operation.map[methodName].set(value, value);
                    operation.result = value;
                } else if (isListLike) {
                    this.eachIndex(value, function (childValue, index) {
                        operation.result[index] = this[methodName](childValue);
                    }, this);
                } else {
                    this.eachKey(value, function (childValue, prop) {
                        operation.result[prop] = this[methodName](childValue);
                    }, this);
                }
            }
            return operation.end();
        };
    }
    var makeMap;
    if (typeof Map !== 'undefined') {
        makeMap = function (keys) {
            var map = new Map();
            shapeReflections.eachIndex(keys, function (key) {
                map.set(key, true);
            });
            return map;
        };
    } else {
        makeMap = function (keys) {
            var map = {};
            keys.forEach(function (key) {
                map[key] = true;
            });
            return {
                get: function (key) {
                    return map[key];
                },
                set: function (key, value) {
                    map[key] = value;
                },
                keys: function () {
                    return keys;
                }
            };
        };
    }
    var fastHasOwnKey = function (obj) {
        var hasOwnKey = obj[canSymbol.for('can.hasOwnKey')];
        if (hasOwnKey) {
            return hasOwnKey.bind(obj);
        } else {
            var map = makeMap(shapeReflections.getOwnEnumerableKeys(obj));
            return function (key) {
                return map.get(key);
            };
        }
    };
    function addPatch(patches, patch) {
        var lastPatch = patches[patches.length - 1];
        if (lastPatch) {
            if (lastPatch.deleteCount === lastPatch.insert.length && patch.index - lastPatch.index === lastPatch.deleteCount) {
                lastPatch.insert.push.apply(lastPatch.insert, patch.insert);
                lastPatch.deleteCount += patch.deleteCount;
                return;
            }
        }
        patches.push(patch);
    }
    function updateDeepList(target, source, isAssign) {
        var sourceArray = this.toArray(source);
        var patches = [], lastIndex = -1;
        this.eachIndex(target, function (curVal, index) {
            lastIndex = index;
            if (index >= sourceArray.length) {
                if (!isAssign) {
                    addPatch(patches, {
                        index: index,
                        deleteCount: target.length - index + 1,
                        insert: []
                    });
                }
                return false;
            }
            var newVal = sourceArray[index];
            if (typeReflections.isPrimitive(curVal) || typeReflections.isPrimitive(newVal) || shouldUpdateOrAssign(curVal) === false) {
                addPatch(patches, {
                    index: index,
                    deleteCount: 1,
                    insert: [newVal]
                });
            } else {
                if (isAssign === true) {
                    this.assignDeep(curVal, newVal);
                } else {
                    this.updateDeep(curVal, newVal);
                }
            }
        }, this);
        if (sourceArray.length > lastIndex) {
            addPatch(patches, {
                index: lastIndex + 1,
                deleteCount: 0,
                insert: sourceArray.slice(lastIndex + 1)
            });
        }
        for (var i = 0, patchLen = patches.length; i < patchLen; i++) {
            var patch = patches[i];
            getSetReflections.splice(target, patch.index, patch.deleteCount, patch.insert);
        }
        return target;
    }
    shapeReflections = {
        each: function (obj, callback, context) {
            if (typeReflections.isIteratorLike(obj) || typeReflections.isMoreListLikeThanMapLike(obj)) {
                return shapeReflections.eachIndex(obj, callback, context);
            } else {
                return shapeReflections.eachKey(obj, callback, context);
            }
        },
        eachIndex: function (list, callback, context) {
            if (Array.isArray(list)) {
                return shapeReflections.eachListLike(list, callback, context);
            } else {
                var iter, iterator = list[canSymbol.iterator];
                if (typeReflections.isIteratorLike(list)) {
                    iter = list;
                } else if (iterator) {
                    iter = iterator.call(list);
                }
                if (iter) {
                    var res, index = 0;
                    while (!(res = iter.next()).done) {
                        if (callback.call(context || list, res.value, index++, list) === false) {
                            break;
                        }
                    }
                } else {
                    shapeReflections.eachListLike(list, callback, context);
                }
            }
            return list;
        },
        eachListLike: function (list, callback, context) {
            var index = -1;
            var length = list.length;
            if (length === undefined) {
                var size = list[sizeSymbol];
                if (size) {
                    length = size.call(list);
                } else {
                    throw new Error('can-reflect: unable to iterate.');
                }
            }
            while (++index < length) {
                var item = list[index];
                if (callback.call(context || item, item, index, list) === false) {
                    break;
                }
            }
            return list;
        },
        toArray: function (obj) {
            var arr = [];
            shapeReflections.each(obj, function (value) {
                arr.push(value);
            });
            return arr;
        },
        eachKey: function (obj, callback, context) {
            if (obj) {
                var enumerableKeys = shapeReflections.getOwnEnumerableKeys(obj);
                var getKeyValue = obj[getKeyValueSymbol] || shiftedGetKeyValue;
                return shapeReflections.eachIndex(enumerableKeys, function (key) {
                    var value = getKeyValue.call(obj, key);
                    return callback.call(context || obj, value, key, obj);
                });
            }
            return obj;
        },
        'hasOwnKey': function (obj, key) {
            var hasOwnKey = obj[canSymbol.for('can.hasOwnKey')];
            if (hasOwnKey) {
                return hasOwnKey.call(obj, key);
            }
            var getOwnKeys = obj[canSymbol.for('can.getOwnKeys')];
            if (getOwnKeys) {
                var found = false;
                shapeReflections.eachIndex(getOwnKeys.call(obj), function (objKey) {
                    if (objKey === key) {
                        found = true;
                        return false;
                    }
                });
                return found;
            }
            return obj.hasOwnProperty(key);
        },
        getOwnEnumerableKeys: function (obj) {
            var getOwnEnumerableKeys = obj[canSymbol.for('can.getOwnEnumerableKeys')];
            if (getOwnEnumerableKeys) {
                return getOwnEnumerableKeys.call(obj);
            }
            if (obj[canSymbol.for('can.getOwnKeys')] && obj[canSymbol.for('can.getOwnKeyDescriptor')]) {
                var keys = [];
                shapeReflections.eachIndex(shapeReflections.getOwnKeys(obj), function (key) {
                    var descriptor = shapeReflections.getOwnKeyDescriptor(obj, key);
                    if (descriptor.enumerable) {
                        keys.push(key);
                    }
                }, this);
                return keys;
            } else {
                return Object_Keys(obj);
            }
        },
        getOwnKeys: function (obj) {
            var getOwnKeys = obj[canSymbol.for('can.getOwnKeys')];
            if (getOwnKeys) {
                return getOwnKeys.call(obj);
            } else {
                return Object.getOwnPropertyNames(obj);
            }
        },
        getOwnKeyDescriptor: function (obj, key) {
            var getOwnKeyDescriptor = obj[canSymbol.for('can.getOwnKeyDescriptor')];
            if (getOwnKeyDescriptor) {
                return getOwnKeyDescriptor.call(obj, key);
            } else {
                return Object.getOwnPropertyDescriptor(obj, key);
            }
        },
        unwrap: makeSerializer('unwrap', [canSymbol.for('can.unwrap')]),
        serialize: makeSerializer('serialize', [
            canSymbol.for('can.serialize'),
            canSymbol.for('can.unwrap')
        ]),
        assignMap: function (target, source) {
            var hasOwnKey = fastHasOwnKey(target);
            var getKeyValue = target[getKeyValueSymbol] || shiftedGetKeyValue;
            var setKeyValue = target[setKeyValueSymbol] || shiftedSetKeyValue;
            shapeReflections.eachKey(source, function (value, key) {
                if (!hasOwnKey(key) || getKeyValue.call(target, key) !== value) {
                    setKeyValue.call(target, key, value);
                }
            });
            return target;
        },
        assignList: function (target, source) {
            var inserting = shapeReflections.toArray(source);
            getSetReflections.splice(target, 0, inserting, inserting);
            return target;
        },
        assign: function (target, source) {
            if (typeReflections.isIteratorLike(source) || typeReflections.isMoreListLikeThanMapLike(source)) {
                shapeReflections.assignList(target, source);
            } else {
                shapeReflections.assignMap(target, source);
            }
            return target;
        },
        assignDeepMap: function (target, source) {
            var hasOwnKey = fastHasOwnKey(target);
            var getKeyValue = target[getKeyValueSymbol] || shiftedGetKeyValue;
            var setKeyValue = target[setKeyValueSymbol] || shiftedSetKeyValue;
            shapeReflections.eachKey(source, function (newVal, key) {
                if (!hasOwnKey(key)) {
                    getSetReflections.setKeyValue(target, key, newVal);
                } else {
                    var curVal = getKeyValue.call(target, key);
                    if (newVal === curVal) {
                    } else if (typeReflections.isPrimitive(curVal) || typeReflections.isPrimitive(newVal) || shouldUpdateOrAssign(curVal) === false) {
                        setKeyValue.call(target, key, newVal);
                    } else {
                        shapeReflections.assignDeep(curVal, newVal);
                    }
                }
            }, this);
            return target;
        },
        assignDeepList: function (target, source) {
            return updateDeepList.call(this, target, source, true);
        },
        assignDeep: function (target, source) {
            var assignDeep = target[canSymbol.for('can.assignDeep')];
            if (assignDeep) {
                assignDeep.call(target, source);
            } else if (typeReflections.isMoreListLikeThanMapLike(source)) {
                shapeReflections.assignDeepList(target, source);
            } else {
                shapeReflections.assignDeepMap(target, source);
            }
            return target;
        },
        updateMap: function (target, source) {
            var sourceKeyMap = makeMap(shapeReflections.getOwnEnumerableKeys(source));
            var sourceGetKeyValue = source[getKeyValueSymbol] || shiftedGetKeyValue;
            var targetSetKeyValue = target[setKeyValueSymbol] || shiftedSetKeyValue;
            shapeReflections.eachKey(target, function (curVal, key) {
                if (!sourceKeyMap.get(key)) {
                    getSetReflections.deleteKeyValue(target, key);
                    return;
                }
                sourceKeyMap.set(key, false);
                var newVal = sourceGetKeyValue.call(source, key);
                if (newVal !== curVal) {
                    targetSetKeyValue.call(target, key, newVal);
                }
            }, this);
            shapeReflections.eachIndex(sourceKeyMap.keys(), function (key) {
                if (sourceKeyMap.get(key)) {
                    targetSetKeyValue.call(target, key, sourceGetKeyValue.call(source, key));
                }
            });
            return target;
        },
        updateList: function (target, source) {
            var inserting = shapeReflections.toArray(source);
            getSetReflections.splice(target, 0, target, inserting);
            return target;
        },
        update: function (target, source) {
            if (typeReflections.isIteratorLike(source) || typeReflections.isMoreListLikeThanMapLike(source)) {
                shapeReflections.updateList(target, source);
            } else {
                shapeReflections.updateMap(target, source);
            }
            return target;
        },
        updateDeepMap: function (target, source) {
            var sourceKeyMap = makeMap(shapeReflections.getOwnEnumerableKeys(source));
            var sourceGetKeyValue = source[getKeyValueSymbol] || shiftedGetKeyValue;
            var targetSetKeyValue = target[setKeyValueSymbol] || shiftedSetKeyValue;
            shapeReflections.eachKey(target, function (curVal, key) {
                if (!sourceKeyMap.get(key)) {
                    getSetReflections.deleteKeyValue(target, key);
                    return;
                }
                sourceKeyMap.set(key, false);
                var newVal = sourceGetKeyValue.call(source, key);
                if (typeReflections.isPrimitive(curVal) || typeReflections.isPrimitive(newVal) || shouldUpdateOrAssign(curVal) === false) {
                    targetSetKeyValue.call(target, key, newVal);
                } else {
                    shapeReflections.updateDeep(curVal, newVal);
                }
            }, this);
            shapeReflections.eachIndex(sourceKeyMap.keys(), function (key) {
                if (sourceKeyMap.get(key)) {
                    targetSetKeyValue.call(target, key, sourceGetKeyValue.call(source, key));
                }
            });
            return target;
        },
        updateDeepList: function (target, source) {
            return updateDeepList.call(this, target, source);
        },
        updateDeep: function (target, source) {
            var updateDeep = target[canSymbol.for('can.updateDeep')];
            if (updateDeep) {
                updateDeep.call(target, source);
            } else if (typeReflections.isMoreListLikeThanMapLike(source)) {
                shapeReflections.updateDeepList(target, source);
            } else {
                shapeReflections.updateDeepMap(target, source);
            }
            return target;
        },
        hasKey: function (obj, key) {
            if (obj == null) {
                return false;
            }
            if (typeReflections.isPrimitive(obj)) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    return true;
                } else {
                    var proto;
                    if (getPrototypeOfWorksWithPrimitives) {
                        proto = Object.getPrototypeOf(obj);
                    } else {
                        proto = obj.__proto__;
                    }
                    if (proto !== undefined) {
                        return key in proto;
                    } else {
                        return obj[key] !== undefined;
                    }
                }
            }
            var hasKey = obj[canSymbol.for('can.hasKey')];
            if (hasKey) {
                return hasKey.call(obj, key);
            }
            var found = shapeReflections.hasOwnKey(obj, key);
            return found || key in obj;
        },
        getAllEnumerableKeys: function () {
        },
        getAllKeys: function () {
        },
        assignSymbols: function (target, source) {
            shapeReflections.eachKey(source, function (value, key) {
                var symbol = typeReflections.isSymbolLike(canSymbol[key]) ? canSymbol[key] : canSymbol.for(key);
                getSetReflections.setKeyValue(target, symbol, value);
            });
            return target;
        },
        isSerialized: isSerializedHelper,
        size: function (obj) {
            if (obj == null) {
                return 0;
            }
            var size = obj[sizeSymbol];
            var count = 0;
            if (size) {
                return size.call(obj);
            } else if (helpers.hasLength(obj)) {
                return obj.length;
            } else if (typeReflections.isListLike(obj)) {
                shapeReflections.eachIndex(obj, function () {
                    count++;
                });
                return count;
            } else if (obj) {
                return shapeReflections.getOwnEnumerableKeys(obj).length;
            } else {
                return undefined;
            }
        },
        defineInstanceKey: function (cls, key, properties) {
            var defineInstanceKey = cls[canSymbol.for('can.defineInstanceKey')];
            if (defineInstanceKey) {
                return defineInstanceKey.call(cls, key, properties);
            }
            var proto = cls.prototype;
            defineInstanceKey = proto[canSymbol.for('can.defineInstanceKey')];
            if (defineInstanceKey) {
                defineInstanceKey.call(proto, key, properties);
            } else {
                Object.defineProperty(proto, key, shapeReflections.assign({
                    configurable: true,
                    enumerable: !typeReflections.isSymbolLike(key),
                    writable: true
                }, properties));
            }
        }
    };
    shapeReflections.isSerializable = shapeReflections.isSerialized;
    shapeReflections.keys = shapeReflections.getOwnEnumerableKeys;
    module.exports = shapeReflections;
});
/*can-reflect@1.17.6#reflections/shape/schema/schema*/
define('can-reflect@1.17.6#reflections/shape/schema/schema', [
    'require',
    'exports',
    'module',
    'can-symbol',
    '../../type/type',
    '../../get-set/get-set',
    '../shape'
], function (require, exports, module) {
    'use strict';
    var canSymbol = require('can-symbol');
    var typeReflections = require('../../type/type');
    var getSetReflections = require('../../get-set/get-set');
    var shapeReflections = require('../shape');
    var getSchemaSymbol = canSymbol.for('can.getSchema'), isMemberSymbol = canSymbol.for('can.isMember'), newSymbol = canSymbol.for('can.new');
    function comparator(a, b) {
        return a.localeCompare(b);
    }
    function sort(obj) {
        if (typeReflections.isPrimitive(obj)) {
            return obj;
        }
        var out;
        if (typeReflections.isListLike(obj)) {
            out = [];
            shapeReflections.eachKey(obj, function (item) {
                out.push(sort(item));
            });
            return out;
        }
        if (typeReflections.isMapLike(obj)) {
            out = {};
            shapeReflections.getOwnKeys(obj).sort(comparator).forEach(function (key) {
                out[key] = sort(getSetReflections.getKeyValue(obj, key));
            });
            return out;
        }
        return obj;
    }
    function isPrimitiveConverter(Type) {
        return Type === Number || Type === String || Type === Boolean;
    }
    var schemaReflections = {
        getSchema: function (type) {
            if (type === undefined) {
                return undefined;
            }
            var getSchema = type[getSchemaSymbol];
            if (getSchema === undefined) {
                type = type.constructor;
                getSchema = type && type[getSchemaSymbol];
            }
            return getSchema !== undefined ? getSchema.call(type) : undefined;
        },
        getIdentity: function (value, schema) {
            schema = schema || schemaReflections.getSchema(value);
            if (schema === undefined) {
                throw new Error('can-reflect.getIdentity - Unable to find a schema for the given value.');
            }
            var identity = schema.identity;
            if (!identity || identity.length === 0) {
                throw new Error('can-reflect.getIdentity - Provided schema lacks an identity property.');
            } else if (identity.length === 1) {
                return getSetReflections.getKeyValue(value, identity[0]);
            } else {
                var id = {};
                identity.forEach(function (key) {
                    id[key] = getSetReflections.getKeyValue(value, key);
                });
                return JSON.stringify(schemaReflections.cloneKeySort(id));
            }
        },
        cloneKeySort: function (obj) {
            return sort(obj);
        },
        convert: function (value, Type) {
            if (isPrimitiveConverter(Type)) {
                return Type(value);
            }
            var isMemberTest = Type[isMemberSymbol], isMember = false, type = typeof Type, createNew = Type[newSymbol];
            if (isMemberTest !== undefined) {
                isMember = isMemberTest.call(Type, value);
            } else if (type === 'function') {
                if (typeReflections.isConstructorLike(Type)) {
                    isMember = value instanceof Type;
                }
            }
            if (isMember) {
                return value;
            }
            if (createNew !== undefined) {
                return createNew.call(Type, value);
            } else if (type === 'function') {
                if (typeReflections.isConstructorLike(Type)) {
                    return new Type(value);
                } else {
                    return Type(value);
                }
            } else {
                throw new Error('can-reflect: Can not convert values into type. Type must provide `can.new` symbol.');
            }
        }
    };
    module.exports = schemaReflections;
});
/*can-reflect@1.17.6#reflections/get-name/get-name*/
define('can-reflect@1.17.6#reflections/get-name/get-name', [
    'require',
    'exports',
    'module',
    'can-symbol',
    '../type/type'
], function (require, exports, module) {
    'use strict';
    var canSymbol = require('can-symbol');
    var typeReflections = require('../type/type');
    var getNameSymbol = canSymbol.for('can.getName');
    function setName(obj, nameGetter) {
        if (typeof nameGetter !== 'function') {
            var value = nameGetter;
            nameGetter = function () {
                return value;
            };
        }
        Object.defineProperty(obj, getNameSymbol, { value: nameGetter });
    }
    var anonymousID = 0;
    function getName(obj) {
        var type = typeof obj;
        if (obj === null || type !== 'object' && type !== 'function') {
            return '' + obj;
        }
        var nameGetter = obj[getNameSymbol];
        if (nameGetter) {
            return nameGetter.call(obj);
        }
        if (type === 'function') {
            if (!('name' in obj)) {
                obj.name = 'functionIE' + anonymousID++;
            }
            return obj.name;
        }
        if (obj.constructor && obj !== obj.constructor) {
            var parent = getName(obj.constructor);
            if (parent) {
                if (typeReflections.isValueLike(obj)) {
                    return parent + '<>';
                }
                if (typeReflections.isMoreListLikeThanMapLike(obj)) {
                    return parent + '[]';
                }
                if (typeReflections.isMapLike(obj)) {
                    return parent + '{}';
                }
            }
        }
        return undefined;
    }
    module.exports = {
        setName: setName,
        getName: getName
    };
});
/*can-reflect@1.17.6#types/map*/
define('can-reflect@1.17.6#types/map', [
    'require',
    'exports',
    'module',
    '../reflections/shape/shape',
    'can-symbol'
], function (require, exports, module) {
    'use strict';
    var shape = require('../reflections/shape/shape');
    var CanSymbol = require('can-symbol');
    function keysPolyfill() {
        var keys = [];
        var currentIndex = 0;
        this.forEach(function (val, key) {
            keys.push(key);
        });
        return {
            next: function () {
                return {
                    value: keys[currentIndex],
                    done: currentIndex++ === keys.length
                };
            }
        };
    }
    if (typeof Map !== 'undefined') {
        shape.assignSymbols(Map.prototype, {
            'can.getOwnEnumerableKeys': Map.prototype.keys,
            'can.setKeyValue': Map.prototype.set,
            'can.getKeyValue': Map.prototype.get,
            'can.deleteKeyValue': Map.prototype['delete'],
            'can.hasOwnKey': Map.prototype.has
        });
        if (typeof Map.prototype.keys !== 'function') {
            Map.prototype.keys = Map.prototype[CanSymbol.for('can.getOwnEnumerableKeys')] = keysPolyfill;
        }
    }
    if (typeof WeakMap !== 'undefined') {
        shape.assignSymbols(WeakMap.prototype, {
            'can.getOwnEnumerableKeys': function () {
                throw new Error('can-reflect: WeakMaps do not have enumerable keys.');
            },
            'can.setKeyValue': WeakMap.prototype.set,
            'can.getKeyValue': WeakMap.prototype.get,
            'can.deleteKeyValue': WeakMap.prototype['delete'],
            'can.hasOwnKey': WeakMap.prototype.has
        });
    }
});
/*can-reflect@1.17.6#types/set*/
define('can-reflect@1.17.6#types/set', [
    'require',
    'exports',
    'module',
    '../reflections/shape/shape',
    'can-symbol'
], function (require, exports, module) {
    'use strict';
    var shape = require('../reflections/shape/shape');
    var CanSymbol = require('can-symbol');
    if (typeof Set !== 'undefined') {
        shape.assignSymbols(Set.prototype, {
            'can.isMoreListLikeThanMapLike': true,
            'can.updateValues': function (index, removing, adding) {
                if (removing !== adding) {
                    shape.each(removing, function (value) {
                        this.delete(value);
                    }, this);
                }
                shape.each(adding, function (value) {
                    this.add(value);
                }, this);
            },
            'can.size': function () {
                return this.size;
            }
        });
        if (typeof Set.prototype[CanSymbol.iterator] !== 'function') {
            Set.prototype[CanSymbol.iterator] = function () {
                var arr = [];
                var currentIndex = 0;
                this.forEach(function (val) {
                    arr.push(val);
                });
                return {
                    next: function () {
                        return {
                            value: arr[currentIndex],
                            done: currentIndex++ === arr.length
                        };
                    }
                };
            };
        }
    }
    if (typeof WeakSet !== 'undefined') {
        shape.assignSymbols(WeakSet.prototype, {
            'can.isListLike': true,
            'can.isMoreListLikeThanMapLike': true,
            'can.updateValues': function (index, removing, adding) {
                if (removing !== adding) {
                    shape.each(removing, function (value) {
                        this.delete(value);
                    }, this);
                }
                shape.each(adding, function (value) {
                    this.add(value);
                }, this);
            },
            'can.size': function () {
                throw new Error('can-reflect: WeakSets do not have enumerable keys.');
            }
        });
    }
});
/*can-reflect@1.17.6#can-reflect*/
define('can-reflect@1.17.6#can-reflect', [
    'require',
    'exports',
    'module',
    './reflections/call/call',
    './reflections/get-set/get-set',
    './reflections/observe/observe',
    './reflections/shape/shape',
    './reflections/shape/schema/schema',
    './reflections/type/type',
    './reflections/get-name/get-name',
    'can-namespace',
    './types/map',
    './types/set'
], function (require, exports, module) {
    'use strict';
    var functionReflections = require('./reflections/call/call');
    var getSet = require('./reflections/get-set/get-set');
    var observe = require('./reflections/observe/observe');
    var shape = require('./reflections/shape/shape');
    var schema = require('./reflections/shape/schema/schema');
    var type = require('./reflections/type/type');
    var getName = require('./reflections/get-name/get-name');
    var namespace = require('can-namespace');
    var reflect = {};
    [
        functionReflections,
        getSet,
        observe,
        shape,
        type,
        getName,
        schema
    ].forEach(function (reflections) {
        for (var prop in reflections) {
            reflect[prop] = reflections[prop];
            if (process.env.NODE_ENV !== 'production') {
                if (typeof reflections[prop] === 'function') {
                    var propDescriptor = Object.getOwnPropertyDescriptor(reflections[prop], 'name');
                    if (!propDescriptor || propDescriptor.writable && propDescriptor.configurable) {
                        Object.defineProperty(reflections[prop], 'name', { value: 'canReflect.' + prop });
                    }
                }
            }
        }
    });
    require('./types/map');
    require('./types/set');
    module.exports = namespace.Reflect = reflect;
});
/*can-globals@1.2.0#can-globals-proto*/
define('can-globals@1.2.0#can-globals-proto', [
    'require',
    'exports',
    'module',
    'can-reflect'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var canReflect = require('can-reflect');
        function dispatch(key) {
            var handlers = this.eventHandlers[key];
            if (handlers) {
                var handlersCopy = handlers.slice();
                var value = this.getKeyValue(key);
                for (var i = 0; i < handlersCopy.length; i++) {
                    handlersCopy[i](value);
                }
            }
        }
        function Globals() {
            this.eventHandlers = {};
            this.properties = {};
        }
        Globals.prototype.define = function (key, value, enableCache) {
            if (enableCache === undefined) {
                enableCache = true;
            }
            if (!this.properties[key]) {
                this.properties[key] = {
                    default: value,
                    value: value,
                    enableCache: enableCache
                };
            }
            return this;
        };
        Globals.prototype.getKeyValue = function (key) {
            var property = this.properties[key];
            if (property) {
                if (typeof property.value === 'function') {
                    if (property.cachedValue) {
                        return property.cachedValue;
                    }
                    if (property.enableCache) {
                        property.cachedValue = property.value();
                        return property.cachedValue;
                    } else {
                        return property.value();
                    }
                }
                return property.value;
            }
        };
        Globals.prototype.makeExport = function (key) {
            return function (value) {
                if (arguments.length === 0) {
                    return this.getKeyValue(key);
                }
                if (typeof value === 'undefined' || value === null) {
                    this.deleteKeyValue(key);
                } else {
                    if (typeof value === 'function') {
                        this.setKeyValue(key, function () {
                            return value;
                        });
                    } else {
                        this.setKeyValue(key, value);
                    }
                    return value;
                }
            }.bind(this);
        };
        Globals.prototype.offKeyValue = function (key, handler) {
            if (this.properties[key]) {
                var handlers = this.eventHandlers[key];
                if (handlers) {
                    var i = handlers.indexOf(handler);
                    handlers.splice(i, 1);
                }
            }
            return this;
        };
        Globals.prototype.onKeyValue = function (key, handler) {
            if (this.properties[key]) {
                if (!this.eventHandlers[key]) {
                    this.eventHandlers[key] = [];
                }
                this.eventHandlers[key].push(handler);
            }
            return this;
        };
        Globals.prototype.deleteKeyValue = function (key) {
            var property = this.properties[key];
            if (property !== undefined) {
                property.value = property.default;
                property.cachedValue = undefined;
                dispatch.call(this, key);
            }
            return this;
        };
        Globals.prototype.setKeyValue = function (key, value) {
            if (!this.properties[key]) {
                return this.define(key, value);
            }
            var property = this.properties[key];
            property.value = value;
            property.cachedValue = undefined;
            dispatch.call(this, key);
            return this;
        };
        Globals.prototype.reset = function () {
            for (var key in this.properties) {
                if (this.properties.hasOwnProperty(key)) {
                    this.properties[key].value = this.properties[key].default;
                    this.properties[key].cachedValue = undefined;
                    dispatch.call(this, key);
                }
            }
            return this;
        };
        canReflect.assignSymbols(Globals.prototype, {
            'can.getKeyValue': Globals.prototype.getKeyValue,
            'can.setKeyValue': Globals.prototype.setKeyValue,
            'can.deleteKeyValue': Globals.prototype.deleteKeyValue,
            'can.onKeyValue': Globals.prototype.onKeyValue,
            'can.offKeyValue': Globals.prototype.offKeyValue
        });
        module.exports = Globals;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-globals@1.2.0#can-globals-instance*/
define('can-globals@1.2.0#can-globals-instance', [
    'require',
    'exports',
    'module',
    'can-namespace',
    './can-globals-proto'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var namespace = require('can-namespace');
        var Globals = require('./can-globals-proto');
        var globals = new Globals();
        if (namespace.globals) {
            throw new Error('You can\'t have two versions of can-globals, check your dependencies');
        } else {
            module.exports = namespace.globals = globals;
        }
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-globals@1.2.0#global/global*/
define('can-globals@1.2.0#global/global', [
    'require',
    'exports',
    'module',
    'can-globals/can-globals-instance'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var globals = require('can-globals/can-globals-instance');
        globals.define('global', function () {
            return typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope ? self : typeof process === 'object' && {}.toString.call(process) === '[object process]' ? global : window;
        });
        module.exports = globals.makeExport('global');
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-globals@1.2.0#document/document*/
define('can-globals@1.2.0#document/document', [
    'require',
    'exports',
    'module',
    'can-globals/global/global',
    'can-globals/can-globals-instance'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        require('can-globals/global/global');
        var globals = require('can-globals/can-globals-instance');
        globals.define('document', function () {
            return globals.getKeyValue('global').document;
        });
        module.exports = globals.makeExport('document');
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-globals@1.2.0#is-node/is-node*/
define('can-globals@1.2.0#is-node/is-node', [
    'require',
    'exports',
    'module',
    'can-globals/can-globals-instance'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var globals = require('can-globals/can-globals-instance');
        globals.define('isNode', function () {
            return typeof process === 'object' && {}.toString.call(process) === '[object process]';
        });
        module.exports = globals.makeExport('isNode');
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-globals@1.2.0#is-browser-window/is-browser-window*/
define('can-globals@1.2.0#is-browser-window/is-browser-window', [
    'require',
    'exports',
    'module',
    'can-globals/can-globals-instance',
    '../is-node/is-node'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var globals = require('can-globals/can-globals-instance');
        require('../is-node/is-node');
        globals.define('isBrowserWindow', function () {
            var isNode = globals.getKeyValue('isNode');
            return typeof window !== 'undefined' && typeof document !== 'undefined' && isNode === false;
        });
        module.exports = globals.makeExport('isBrowserWindow');
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-util@3.14.0#js/is-plain-object/is-plain-object*/
define('can-util@3.14.0#js/is-plain-object/is-plain-object', [
    'require',
    'exports',
    'module',
    'can-namespace'
], function (require, exports, module) {
    'use strict';
    var namespace = require('can-namespace');
    var core_hasOwn = Object.prototype.hasOwnProperty;
    function isWindow(obj) {
        return obj !== null && obj == obj.window;
    }
    function isPlainObject(obj) {
        if (!obj || typeof obj !== 'object' || obj.nodeType || isWindow(obj) || obj.constructor && obj.constructor.shortName) {
            return false;
        }
        try {
            if (obj.constructor && !core_hasOwn.call(obj, 'constructor') && !core_hasOwn.call(obj.constructor.prototype, 'isPrototypeOf')) {
                return false;
            }
        } catch (e) {
            return false;
        }
        var key;
        for (key in obj) {
        }
        return key === undefined || core_hasOwn.call(obj, key);
    }
    module.exports = namespace.isPlainObject = isPlainObject;
});
/*can-util@3.14.0#dom/events/events*/
define('can-util@3.14.0#dom/events/events', [
    'require',
    'exports',
    'module',
    'can-globals/document/document',
    'can-globals/is-browser-window/is-browser-window',
    '../../js/is-plain-object/is-plain-object',
    'can-log/dev/dev',
    'can-namespace'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var getDocument = require('can-globals/document/document');
        var isBrowserWindow = require('can-globals/is-browser-window/is-browser-window');
        var isPlainObject = require('../../js/is-plain-object/is-plain-object');
        var fixSyntheticEventsOnDisabled = false;
        var dev = require('can-log/dev/dev');
        var namespace = require('can-namespace');
        function isDispatchingOnDisabled(element, ev) {
            var isInsertedOrRemoved = isPlainObject(ev) ? ev.type === 'inserted' || ev.type === 'removed' : ev === 'inserted' || ev === 'removed';
            var isDisabled = !!element.disabled;
            return isInsertedOrRemoved && isDisabled;
        }
        module.exports = namespace.events = {
            addEventListener: function () {
                this.addEventListener.apply(this, arguments);
            },
            removeEventListener: function () {
                this.removeEventListener.apply(this, arguments);
            },
            canAddEventListener: function () {
                return this.nodeName && (this.nodeType === 1 || this.nodeType === 9) || this === window;
            },
            dispatch: function (event, args, bubbles) {
                var ret;
                var dispatchingOnDisabled = fixSyntheticEventsOnDisabled && isDispatchingOnDisabled(this, event);
                var doc = this.ownerDocument || getDocument();
                var ev = doc.createEvent('HTMLEvents');
                var isString = typeof event === 'string';
                ev.initEvent(isString ? event : event.type, bubbles === undefined ? true : bubbles, false);
                if (!isString) {
                    for (var prop in event) {
                        if (ev[prop] === undefined) {
                            ev[prop] = event[prop];
                        }
                    }
                }
                if (this.disabled === true && ev.type !== 'fix_synthetic_events_on_disabled_test') {
                    if (process.env.NODE_ENV !== 'production') {
                        dev.warn('can-util/dom/events::dispatch: Dispatching a synthetic event on a disabled is ' + 'problematic in FireFox and Internet Explorer. We recommend avoiding this if at ' + 'all possible. see https://github.com/canjs/can-util/issues/294');
                    }
                }
                ev.args = args;
                if (dispatchingOnDisabled) {
                    this.disabled = false;
                }
                ret = this.dispatchEvent(ev);
                if (dispatchingOnDisabled) {
                    this.disabled = true;
                }
                return ret;
            }
        };
        (function () {
            if (!isBrowserWindow()) {
                return;
            }
            var testEventName = 'fix_synthetic_events_on_disabled_test';
            var input = document.createElement('input');
            input.disabled = true;
            var timer = setTimeout(function () {
                fixSyntheticEventsOnDisabled = true;
            }, 50);
            var onTest = function onTest() {
                clearTimeout(timer);
                module.exports.removeEventListener.call(input, testEventName, onTest);
            };
            module.exports.addEventListener.call(input, testEventName, onTest);
            try {
                module.exports.dispatch.call(input, testEventName, [], false);
            } catch (e) {
                onTest();
                fixSyntheticEventsOnDisabled = true;
            }
        }());
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-util@3.14.0#js/is-array-like/is-array-like*/
define('can-util@3.14.0#js/is-array-like/is-array-like', [
    'require',
    'exports',
    'module',
    'can-namespace'
], function (require, exports, module) {
    'use strict';
    var namespace = require('can-namespace');
    function isArrayLike(obj) {
        var type = typeof obj;
        if (type === 'string') {
            return true;
        } else if (type === 'number') {
            return false;
        }
        var length = obj && type !== 'boolean' && typeof obj !== 'number' && 'length' in obj && obj.length;
        return typeof obj !== 'function' && (length === 0 || typeof length === 'number' && length > 0 && length - 1 in obj);
    }
    module.exports = namespace.isArrayLike = isArrayLike;
});
/*can-util@3.14.0#js/is-iterable/is-iterable*/
define('can-util@3.14.0#js/is-iterable/is-iterable', [
    'require',
    'exports',
    'module',
    'can-symbol'
], function (require, exports, module) {
    'use strict';
    var canSymbol = require('can-symbol');
    module.exports = function (obj) {
        return obj && !!obj[canSymbol.iterator || canSymbol.for('iterator')];
    };
});
/*can-util@3.14.0#js/each/each*/
define('can-util@3.14.0#js/each/each', [
    'require',
    'exports',
    'module',
    '../is-array-like/is-array-like',
    '../is-iterable/is-iterable',
    'can-symbol',
    'can-namespace'
], function (require, exports, module) {
    'use strict';
    var isArrayLike = require('../is-array-like/is-array-like');
    var has = Object.prototype.hasOwnProperty;
    var isIterable = require('../is-iterable/is-iterable');
    var canSymbol = require('can-symbol');
    var namespace = require('can-namespace');
    function each(elements, callback, context) {
        var i = 0, key, len, item;
        if (elements) {
            if (isArrayLike(elements)) {
                for (len = elements.length; i < len; i++) {
                    item = elements[i];
                    if (callback.call(context || item, item, i, elements) === false) {
                        break;
                    }
                }
            } else if (isIterable(elements)) {
                var iter = elements[canSymbol.iterator || canSymbol.for('iterator')]();
                var res, value;
                while (!(res = iter.next()).done) {
                    value = res.value;
                    callback.call(context || elements, Array.isArray(value) ? value[1] : value, value[0]);
                }
            } else if (typeof elements === 'object') {
                for (key in elements) {
                    if (has.call(elements, key) && callback.call(context || elements[key], elements[key], key, elements) === false) {
                        break;
                    }
                }
            }
        }
        return elements;
    }
    module.exports = namespace.each = each;
});
/*can-util@3.14.0#js/make-array/make-array*/
define('can-util@3.14.0#js/make-array/make-array', [
    'require',
    'exports',
    'module',
    '../each/each',
    '../is-array-like/is-array-like',
    'can-namespace'
], function (require, exports, module) {
    'use strict';
    var each = require('../each/each');
    var isArrayLike = require('../is-array-like/is-array-like');
    var namespace = require('can-namespace');
    function makeArray(element) {
        var ret = [];
        if (isArrayLike(element)) {
            each(element, function (a, i) {
                ret[i] = a;
            });
        } else if (element === 0 || element) {
            ret.push(element);
        }
        return ret;
    }
    module.exports = namespace.makeArray = makeArray;
});
/*can-util@3.14.0#js/set-immediate/set-immediate*/
define('can-util@3.14.0#js/set-immediate/set-immediate', [
    'require',
    'exports',
    'module',
    'can-globals/global/global',
    'can-namespace'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var global = require('can-globals/global/global')();
        var namespace = require('can-namespace');
        module.exports = namespace.setImmediate = global.setImmediate || function (cb) {
            return setTimeout(cb, 0);
        };
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-cid@1.3.0#can-cid*/
define('can-cid@1.3.0#can-cid', [
    'require',
    'exports',
    'module',
    'can-namespace'
], function (require, exports, module) {
    'use strict';
    var namespace = require('can-namespace');
    var _cid = 0;
    var domExpando = 'can' + new Date();
    var cid = function (object, name) {
        var propertyName = object.nodeName ? domExpando : '_cid';
        if (!object[propertyName]) {
            _cid++;
            object[propertyName] = (name || '') + _cid;
        }
        return object[propertyName];
    };
    cid.domExpando = domExpando;
    cid.get = function (object) {
        var type = typeof object;
        var isObject = type !== null && (type === 'object' || type === 'function');
        return isObject ? cid(object) : type + ':' + object;
    };
    if (namespace.cid) {
        throw new Error('You can\'t have two versions of can-cid, check your dependencies');
    } else {
        module.exports = namespace.cid = cid;
    }
});
/*can-globals@1.2.0#mutation-observer/mutation-observer*/
define('can-globals@1.2.0#mutation-observer/mutation-observer', [
    'require',
    'exports',
    'module',
    'can-globals/global/global',
    'can-globals/can-globals-instance'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        require('can-globals/global/global');
        var globals = require('can-globals/can-globals-instance');
        globals.define('MutationObserver', function () {
            var GLOBAL = globals.getKeyValue('global');
            return GLOBAL.MutationObserver || GLOBAL.WebKitMutationObserver || GLOBAL.MozMutationObserver;
        });
        module.exports = globals.makeExport('MutationObserver');
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-util@3.14.0#dom/child-nodes/child-nodes*/
define('can-util@3.14.0#dom/child-nodes/child-nodes', [
    'require',
    'exports',
    'module',
    'can-namespace'
], function (require, exports, module) {
    'use strict';
    var namespace = require('can-namespace');
    function childNodes(node) {
        var childNodes = node.childNodes;
        if ('length' in childNodes) {
            return childNodes;
        } else {
            var cur = node.firstChild;
            var nodes = [];
            while (cur) {
                nodes.push(cur);
                cur = cur.nextSibling;
            }
            return nodes;
        }
    }
    module.exports = namespace.childNodes = childNodes;
});
/*can-util@3.14.0#dom/contains/contains*/
define('can-util@3.14.0#dom/contains/contains', [
    'require',
    'exports',
    'module',
    'can-namespace'
], function (require, exports, module) {
    'use strict';
    var namespace = require('can-namespace');
    module.exports = namespace.contains = function (child) {
        return this.contains(child);
    };
});
/*can-util@3.14.0#dom/dispatch/dispatch*/
define('can-util@3.14.0#dom/dispatch/dispatch', [
    'require',
    'exports',
    'module',
    '../events/events',
    'can-namespace'
], function (require, exports, module) {
    'use strict';
    var domEvents = require('../events/events');
    var namespace = require('can-namespace');
    module.exports = namespace.dispatch = function () {
        return domEvents.dispatch.apply(this, arguments);
    };
});
/*can-dom-data-state@0.2.0#can-dom-data-state*/
define('can-dom-data-state@0.2.0#can-dom-data-state', [
    'require',
    'exports',
    'module',
    'can-namespace',
    'can-cid'
], function (require, exports, module) {
    'use strict';
    var namespace = require('can-namespace');
    var CID = require('can-cid');
    var data = {};
    var isEmptyObject = function (obj) {
        for (var prop in obj) {
            return false;
        }
        return true;
    };
    var setData = function (name, value) {
        var id = CID(this);
        var store = data[id] || (data[id] = {});
        if (name !== undefined) {
            store[name] = value;
        }
        return store;
    };
    var deleteNode = function () {
        var id = CID.get(this);
        var nodeDeleted = false;
        if (id && data[id]) {
            nodeDeleted = true;
            delete data[id];
        }
        return nodeDeleted;
    };
    var domDataState = {
        _data: data,
        getCid: function () {
            return CID.get(this);
        },
        cid: function () {
            return CID(this);
        },
        expando: CID.domExpando,
        get: function (key) {
            var id = CID.get(this), store = id && data[id];
            return key === undefined ? store : store && store[key];
        },
        set: setData,
        clean: function (prop) {
            var id = CID.get(this);
            var itemData = data[id];
            if (itemData && itemData[prop]) {
                delete itemData[prop];
            }
            if (isEmptyObject(itemData)) {
                deleteNode.call(this);
            }
        },
        delete: deleteNode
    };
    if (namespace.domDataState) {
        throw new Error('You can\'t have two versions of can-dom-data-state, check your dependencies');
    } else {
        module.exports = namespace.domDataState = domDataState;
    }
});
/*can-cid@1.3.0#helpers*/
define('can-cid@1.3.0#helpers', function (require, exports, module) {
    'use strict';
    module.exports = {
        each: function (obj, cb, context) {
            for (var prop in obj) {
                cb.call(context, obj[prop], prop);
            }
            return obj;
        }
    };
});
/*can-cid@1.3.0#set/set*/
define('can-cid@1.3.0#set/set', [
    'require',
    'exports',
    'module',
    '../can-cid',
    '../helpers'
], function (require, exports, module) {
    'use strict';
    var getCID = require('../can-cid').get;
    var helpers = require('../helpers');
    var CIDSet;
    if (typeof Set !== 'undefined') {
        CIDSet = Set;
    } else {
        var CIDSet = function () {
            this.values = {};
        };
        CIDSet.prototype.add = function (value) {
            this.values[getCID(value)] = value;
        };
        CIDSet.prototype['delete'] = function (key) {
            var has = getCID(key) in this.values;
            if (has) {
                delete this.values[getCID(key)];
            }
            return has;
        };
        CIDSet.prototype.forEach = function (cb, thisArg) {
            helpers.each(this.values, cb, thisArg);
        };
        CIDSet.prototype.has = function (value) {
            return getCID(value) in this.values;
        };
        CIDSet.prototype.clear = function () {
            return this.values = {};
        };
        Object.defineProperty(CIDSet.prototype, 'size', {
            get: function () {
                var size = 0;
                helpers.each(this.values, function () {
                    size++;
                });
                return size;
            }
        });
    }
    module.exports = CIDSet;
});
/*can-util@3.14.0#js/is-container/is-container*/
define('can-util@3.14.0#js/is-container/is-container', function (require, exports, module) {
    'use strict';
    module.exports = function (current) {
        return /^f|^o/.test(typeof current);
    };
});
/*can-util@3.14.0#js/get/get*/
define('can-util@3.14.0#js/get/get', [
    'require',
    'exports',
    'module',
    '../is-container/is-container'
], function (require, exports, module) {
    'use strict';
    var isContainer = require('../is-container/is-container');
    function get(obj, name) {
        var parts = typeof name !== 'undefined' ? (name + '').replace(/\[/g, '.').replace(/]/g, '').split('.') : [], length = parts.length, current, i, container;
        if (!length) {
            return obj;
        }
        current = obj;
        for (i = 0; i < length && isContainer(current) && current !== null; i++) {
            container = current;
            current = container[parts[i]];
        }
        return current;
    }
    module.exports = get;
});
/*can-util@3.14.0#js/is-array/is-array*/
define('can-util@3.14.0#js/is-array/is-array', [
    'require',
    'exports',
    'module',
    'can-log/dev/dev',
    'can-namespace'
], function (require, exports, module) {
    'use strict';
    var dev = require('can-log/dev/dev');
    var namespace = require('can-namespace');
    var hasWarned = false;
    module.exports = namespace.isArray = function (arr) {
        if (!hasWarned) {
            dev.warn('js/is-array/is-array is deprecated; use Array.isArray');
            hasWarned = true;
        }
        return Array.isArray(arr);
    };
});
/*can-util@3.14.0#js/string/string*/
define('can-util@3.14.0#js/string/string', [
    'require',
    'exports',
    'module',
    '../get/get',
    '../is-container/is-container',
    'can-log/dev/dev',
    '../is-array/is-array',
    'can-namespace'
], function (require, exports, module) {
    'use strict';
    var get = require('../get/get');
    var isContainer = require('../is-container/is-container');
    var canDev = require('can-log/dev/dev');
    var isArray = require('../is-array/is-array');
    var namespace = require('can-namespace');
    var strUndHash = /_|-/, strColons = /\=\=/, strWords = /([A-Z]+)([A-Z][a-z])/g, strLowUp = /([a-z\d])([A-Z])/g, strDash = /([a-z\d])([A-Z])/g, strReplacer = /\{([^\}]+)\}/g, strQuote = /"/g, strSingleQuote = /'/g, strHyphenMatch = /-+(.)?/g, strCamelMatch = /[a-z][A-Z]/g, convertBadValues = function (content) {
            var isInvalid = content === null || content === undefined || isNaN(content) && '' + content === 'NaN';
            return '' + (isInvalid ? '' : content);
        }, deleteAtPath = function (data, path) {
            var parts = path ? path.replace(/\[/g, '.').replace(/]/g, '').split('.') : [];
            var current = data;
            for (var i = 0; i < parts.length - 1; i++) {
                if (current) {
                    current = current[parts[i]];
                }
            }
            if (current) {
                delete current[parts[parts.length - 1]];
            }
        };
    var string = {
        esc: function (content) {
            return convertBadValues(content).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(strQuote, '&#34;').replace(strSingleQuote, '&#39;');
        },
        getObject: function (name, roots) {
            if (process.env.NODE_ENV !== 'production') {
                canDev.warn('string.getObject is deprecated, please use can-util/js/get/get instead.');
            }
            roots = isArray(roots) ? roots : [roots || window];
            var result, l = roots.length;
            for (var i = 0; i < l; i++) {
                result = get(roots[i], name);
                if (result) {
                    return result;
                }
            }
        },
        capitalize: function (s, cache) {
            return s.charAt(0).toUpperCase() + s.slice(1);
        },
        camelize: function (str) {
            return convertBadValues(str).replace(strHyphenMatch, function (match, chr) {
                return chr ? chr.toUpperCase() : '';
            });
        },
        hyphenate: function (str) {
            return convertBadValues(str).replace(strCamelMatch, function (str, offset) {
                return str.charAt(0) + '-' + str.charAt(1).toLowerCase();
            });
        },
        underscore: function (s) {
            return s.replace(strColons, '/').replace(strWords, '$1_$2').replace(strLowUp, '$1_$2').replace(strDash, '_').toLowerCase();
        },
        sub: function (str, data, remove) {
            var obs = [];
            str = str || '';
            obs.push(str.replace(strReplacer, function (whole, inside) {
                var ob = get(data, inside);
                if (remove === true) {
                    deleteAtPath(data, inside);
                }
                if (ob === undefined || ob === null) {
                    obs = null;
                    return '';
                }
                if (isContainer(ob) && obs) {
                    obs.push(ob);
                    return '';
                }
                return '' + ob;
            }));
            return obs === null ? obs : obs.length <= 1 ? obs[0] : obs;
        },
        replaceWith: function (str, data, replacer, shouldRemoveMatchedPaths) {
            return str.replace(strReplacer, function (whole, path) {
                var value = get(data, path);
                if (shouldRemoveMatchedPaths) {
                    deleteAtPath(data, path);
                }
                return replacer(path, value);
            });
        },
        replacer: strReplacer,
        undHash: strUndHash
    };
    module.exports = namespace.string = string;
});
/*can-util@3.14.0#dom/mutation-observer/document/document*/
define('can-util@3.14.0#dom/mutation-observer/document/document', [
    'require',
    'exports',
    'module',
    'can-globals/document/document',
    'can-dom-data-state',
    'can-globals/mutation-observer/mutation-observer',
    '../../../js/each/each',
    'can-cid/set/set',
    '../../../js/make-array/make-array',
    '../../../js/string/string'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var getDocument = require('can-globals/document/document');
        var domDataState = require('can-dom-data-state');
        var getMutationObserver = require('can-globals/mutation-observer/mutation-observer');
        var each = require('../../../js/each/each');
        var CIDStore = require('can-cid/set/set');
        var makeArray = require('../../../js/make-array/make-array');
        var string = require('../../../js/string/string');
        var dispatchIfListening = function (mutatedNode, nodes, dispatched) {
            if (dispatched.has(mutatedNode)) {
                return true;
            }
            dispatched.add(mutatedNode);
            if (nodes.name === 'removedNodes') {
                var documentElement = getDocument().documentElement;
                if (documentElement.contains(mutatedNode)) {
                    return;
                }
            }
            nodes.handlers.forEach(function (handler) {
                handler(mutatedNode);
            });
            nodes.afterHandlers.forEach(function (handler) {
                handler(mutatedNode);
            });
        };
        var mutationObserverDocument = {
            add: function (handler) {
                var MO = getMutationObserver();
                if (MO) {
                    var documentElement = getDocument().documentElement;
                    var globalObserverData = domDataState.get.call(documentElement, 'globalObserverData');
                    if (!globalObserverData) {
                        var observer = new MO(function (mutations) {
                            globalObserverData.handlers.forEach(function (handler) {
                                handler(mutations);
                            });
                        });
                        observer.observe(documentElement, {
                            childList: true,
                            subtree: true
                        });
                        globalObserverData = {
                            observer: observer,
                            handlers: []
                        };
                        domDataState.set.call(documentElement, 'globalObserverData', globalObserverData);
                    }
                    globalObserverData.handlers.push(handler);
                }
            },
            remove: function (handler) {
                var documentElement = getDocument().documentElement;
                var globalObserverData = domDataState.get.call(documentElement, 'globalObserverData');
                if (globalObserverData) {
                    var index = globalObserverData.handlers.indexOf(handler);
                    if (index >= 0) {
                        globalObserverData.handlers.splice(index, 1);
                    }
                    if (globalObserverData.handlers.length === 0) {
                        globalObserverData.observer.disconnect();
                        domDataState.clean.call(documentElement, 'globalObserverData');
                    }
                }
            }
        };
        var makeMutationMethods = function (name) {
            var mutationName = name.toLowerCase() + 'Nodes';
            var getMutationData = function () {
                var documentElement = getDocument().documentElement;
                var mutationData = domDataState.get.call(documentElement, mutationName + 'MutationData');
                if (!mutationData) {
                    mutationData = {
                        name: mutationName,
                        handlers: [],
                        afterHandlers: [],
                        hander: null
                    };
                    if (getMutationObserver()) {
                        domDataState.set.call(documentElement, mutationName + 'MutationData', mutationData);
                    }
                }
                return mutationData;
            };
            var setup = function () {
                var mutationData = getMutationData();
                if (mutationData.handlers.length === 0 || mutationData.afterHandlers.length === 0) {
                    mutationData.handler = function (mutations) {
                        var dispatched = new CIDStore();
                        mutations.forEach(function (mutation) {
                            each(mutation[mutationName], function (mutatedNode) {
                                var children = mutatedNode.getElementsByTagName && makeArray(mutatedNode.getElementsByTagName('*'));
                                var alreadyChecked = dispatchIfListening(mutatedNode, mutationData, dispatched);
                                if (children && !alreadyChecked) {
                                    for (var j = 0, child; (child = children[j]) !== undefined; j++) {
                                        dispatchIfListening(child, mutationData, dispatched);
                                    }
                                }
                            });
                        });
                    };
                    this.add(mutationData.handler);
                }
                return mutationData;
            };
            var teardown = function () {
                var documentElement = getDocument().documentElement;
                var mutationData = getMutationData();
                if (mutationData.handlers.length === 0 && mutationData.afterHandlers.length === 0) {
                    this.remove(mutationData.handler);
                    domDataState.clean.call(documentElement, mutationName + 'MutationData');
                }
            };
            var createOnOffHandlers = function (name, handlerList) {
                mutationObserverDocument['on' + name] = function (handler) {
                    var mutationData = setup.call(this);
                    mutationData[handlerList].push(handler);
                };
                mutationObserverDocument['off' + name] = function (handler) {
                    var mutationData = getMutationData();
                    var index = mutationData[handlerList].indexOf(handler);
                    if (index >= 0) {
                        mutationData[handlerList].splice(index, 1);
                    }
                    teardown.call(this);
                };
            };
            var createHandlers = function (name) {
                createOnOffHandlers(name, 'handlers');
                createOnOffHandlers('After' + name, 'afterHandlers');
            };
            createHandlers(string.capitalize(mutationName));
        };
        makeMutationMethods('added');
        makeMutationMethods('removed');
        module.exports = mutationObserverDocument;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-util@3.14.0#dom/data/data*/
define('can-util@3.14.0#dom/data/data', [
    'require',
    'exports',
    'module',
    'can-dom-data-state',
    '../mutation-observer/document/document',
    'can-namespace'
], function (require, exports, module) {
    'use strict';
    var domDataState = require('can-dom-data-state');
    var mutationDocument = require('../mutation-observer/document/document');
    var namespace = require('can-namespace');
    var elementSetCount = 0;
    var deleteNode = function () {
        elementSetCount -= 1;
        return domDataState.delete.call(this);
    };
    var cleanupDomData = function (node) {
        if (domDataState.get.call(node) !== undefined) {
            deleteNode.call(node);
        }
        if (elementSetCount === 0) {
            mutationDocument.offAfterRemovedNodes(cleanupDomData);
        }
    };
    module.exports = namespace.data = {
        getCid: domDataState.getCid,
        cid: domDataState.cid,
        expando: domDataState.expando,
        clean: domDataState.clean,
        get: domDataState.get,
        set: function (name, value) {
            if (elementSetCount === 0) {
                mutationDocument.onAfterRemovedNodes(cleanupDomData);
            }
            elementSetCount += domDataState.get.call(this) ? 0 : 1;
            domDataState.set.call(this, name, value);
        },
        delete: deleteNode,
        _getElementSetCount: function () {
            return elementSetCount;
        }
    };
});
/*can-util@3.14.0#dom/mutate/mutate*/
define('can-util@3.14.0#dom/mutate/mutate', [
    'require',
    'exports',
    'module',
    '../../js/make-array/make-array',
    'can-namespace',
    '../../js/set-immediate/set-immediate',
    'can-cid',
    'can-globals/mutation-observer/mutation-observer',
    '../child-nodes/child-nodes',
    '../contains/contains',
    '../dispatch/dispatch',
    'can-globals/document/document',
    '../data/data'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var makeArray = require('../../js/make-array/make-array');
        var namespace = require('can-namespace');
        var setImmediate = require('../../js/set-immediate/set-immediate');
        var CID = require('can-cid');
        var getMutationObserver = require('can-globals/mutation-observer/mutation-observer');
        var childNodes = require('../child-nodes/child-nodes');
        var domContains = require('../contains/contains');
        var domDispatch = require('../dispatch/dispatch');
        var getDocument = require('can-globals/document/document');
        var domData = require('../data/data');
        var mutatedElements;
        var checks = {
            inserted: function (root, elem) {
                return domContains.call(root, elem);
            },
            removed: function (root, elem) {
                return !domContains.call(root, elem);
            }
        };
        var fireOn = function (elems, root, check, event, dispatched) {
            if (!elems.length) {
                return;
            }
            var children, cid;
            for (var i = 0, elem; (elem = elems[i]) !== undefined; i++) {
                cid = CID(elem);
                if (elem.getElementsByTagName && check(root, elem) && !dispatched[cid]) {
                    dispatched[cid] = true;
                    children = makeArray(elem.getElementsByTagName('*'));
                    domDispatch.call(elem, event, [], false);
                    if (event === 'removed') {
                        domData.delete.call(elem);
                    }
                    for (var j = 0, child; (child = children[j]) !== undefined; j++) {
                        cid = CID(child);
                        if (!dispatched[cid]) {
                            domDispatch.call(child, event, [], false);
                            if (event === 'removed') {
                                domData.delete.call(child);
                            }
                            dispatched[cid] = true;
                        }
                    }
                }
            }
        };
        var fireMutations = function () {
            var mutations = mutatedElements;
            mutatedElements = null;
            var firstElement = mutations[0][1][0];
            var doc = getDocument() || firstElement.ownerDocument || firstElement;
            var root = doc.contains ? doc : doc.documentElement;
            var dispatched = {
                inserted: {},
                removed: {}
            };
            mutations.forEach(function (mutation) {
                fireOn(mutation[1], root, checks[mutation[0]], mutation[0], dispatched[mutation[0]]);
            });
        };
        var mutated = function (elements, type) {
            if (!getMutationObserver() && elements.length) {
                var firstElement = elements[0];
                var doc = getDocument() || firstElement.ownerDocument || firstElement;
                var root = doc.contains ? doc : doc.documentElement;
                if (checks.inserted(root, firstElement)) {
                    if (!mutatedElements) {
                        mutatedElements = [];
                        setImmediate(fireMutations);
                    }
                    mutatedElements.push([
                        type,
                        elements
                    ]);
                }
            }
        };
        module.exports = namespace.mutate = {
            appendChild: function (child) {
                if (getMutationObserver()) {
                    this.appendChild(child);
                } else {
                    var children;
                    if (child.nodeType === 11) {
                        children = makeArray(childNodes(child));
                    } else {
                        children = [child];
                    }
                    this.appendChild(child);
                    mutated(children, 'inserted');
                }
            },
            insertBefore: function (child, ref, document) {
                if (getMutationObserver()) {
                    this.insertBefore(child, ref);
                } else {
                    var children;
                    if (child.nodeType === 11) {
                        children = makeArray(childNodes(child));
                    } else {
                        children = [child];
                    }
                    this.insertBefore(child, ref);
                    mutated(children, 'inserted');
                }
            },
            removeChild: function (child) {
                if (getMutationObserver()) {
                    this.removeChild(child);
                } else {
                    mutated([child], 'removed');
                    this.removeChild(child);
                }
            },
            replaceChild: function (newChild, oldChild) {
                if (getMutationObserver()) {
                    this.replaceChild(newChild, oldChild);
                } else {
                    var children;
                    if (newChild.nodeType === 11) {
                        children = makeArray(childNodes(newChild));
                    } else {
                        children = [newChild];
                    }
                    mutated([oldChild], 'removed');
                    this.replaceChild(newChild, oldChild);
                    mutated(children, 'inserted');
                }
            },
            inserted: function (elements) {
                mutated(elements, 'inserted');
            },
            removed: function (elements) {
                mutated(elements, 'removed');
            }
        };
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-cid@1.3.0#map/map*/
define('can-cid@1.3.0#map/map', [
    'require',
    'exports',
    'module',
    '../can-cid',
    '../helpers'
], function (require, exports, module) {
    'use strict';
    var getCID = require('../can-cid').get;
    var helpers = require('../helpers');
    var CIDMap;
    if (typeof Map !== 'undefined') {
        CIDMap = Map;
    } else {
        var CIDMap = function () {
            this.values = {};
        };
        CIDMap.prototype.set = function (key, value) {
            this.values[getCID(key)] = {
                key: key,
                value: value
            };
        };
        CIDMap.prototype['delete'] = function (key) {
            var has = getCID(key) in this.values;
            if (has) {
                delete this.values[getCID(key)];
            }
            return has;
        };
        CIDMap.prototype.forEach = function (cb, thisArg) {
            helpers.each(this.values, function (pair) {
                return cb.call(thisArg || this, pair.value, pair.key, this);
            }, this);
        };
        CIDMap.prototype.has = function (key) {
            return getCID(key) in this.values;
        };
        CIDMap.prototype.get = function (key) {
            var obj = this.values[getCID(key)];
            return obj && obj.value;
        };
        CIDMap.prototype.clear = function () {
            return this.values = {};
        };
        Object.defineProperty(CIDMap.prototype, 'size', {
            get: function () {
                var size = 0;
                helpers.each(this.values, function () {
                    size++;
                });
                return size;
            }
        });
    }
    module.exports = CIDMap;
});
/*can-util@3.14.0#js/cid-map/cid-map*/
define('can-util@3.14.0#js/cid-map/cid-map', [
    'require',
    'exports',
    'module',
    'can-cid/map/map'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        module.exports = require('can-cid/map/map');
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-view-nodelist@3.1.1#can-view-nodelist*/
define('can-view-nodelist@3.1.1#can-view-nodelist', [
    'require',
    'exports',
    'module',
    'can-util/js/make-array/make-array',
    'can-util/js/each/each',
    'can-namespace',
    'can-util/dom/mutate/mutate',
    'can-util/js/cid-map/cid-map'
], function (require, exports, module) {
    var makeArray = require('can-util/js/make-array/make-array');
    var each = require('can-util/js/each/each');
    var namespace = require('can-namespace');
    var domMutate = require('can-util/dom/mutate/mutate');
    var CIDMap = require('can-util/js/cid-map/cid-map');
    var nodeMap = new CIDMap(), splice = [].splice, push = [].push, itemsInChildListTree = function (list) {
            var count = 0;
            for (var i = 0, len = list.length; i < len; i++) {
                var item = list[i];
                if (item.nodeType) {
                    count++;
                } else {
                    count += itemsInChildListTree(item);
                }
            }
            return count;
        }, replacementMap = function (replacements) {
            var map = new CIDMap();
            for (var i = 0, len = replacements.length; i < len; i++) {
                var node = nodeLists.first(replacements[i]);
                map.set(node, replacements[i]);
            }
            return map;
        }, addUnfoundAsDeepChildren = function (list, rMap) {
            rMap.forEach(function (replacement) {
                list.newDeepChildren.push(replacement);
            });
        };
    var nodeLists = {
        update: function (nodeList, newNodes) {
            var oldNodes = nodeLists.unregisterChildren(nodeList);
            newNodes = makeArray(newNodes);
            var oldListLength = nodeList.length;
            splice.apply(nodeList, [
                0,
                oldListLength
            ].concat(newNodes));
            if (nodeList.replacements) {
                nodeLists.nestReplacements(nodeList);
                nodeList.deepChildren = nodeList.newDeepChildren;
                nodeList.newDeepChildren = [];
            } else {
                nodeLists.nestList(nodeList);
            }
            return oldNodes;
        },
        nestReplacements: function (list) {
            var index = 0, rMap = replacementMap(list.replacements), rCount = list.replacements.length;
            while (index < list.length && rCount) {
                var node = list[index], replacement = rMap.get(node);
                if (replacement) {
                    rMap['delete'](node);
                    list.splice(index, itemsInChildListTree(replacement), replacement);
                    rCount--;
                }
                index++;
            }
            if (rCount) {
                addUnfoundAsDeepChildren(list, rMap);
            }
            list.replacements = [];
        },
        nestList: function (list) {
            var index = 0;
            while (index < list.length) {
                var node = list[index], childNodeList = nodeMap.get(node);
                if (childNodeList) {
                    if (childNodeList !== list) {
                        list.splice(index, itemsInChildListTree(childNodeList), childNodeList);
                    }
                } else {
                    nodeMap.set(node, list);
                }
                index++;
            }
        },
        last: function (nodeList) {
            var last = nodeList[nodeList.length - 1];
            if (last.nodeType) {
                return last;
            } else {
                return nodeLists.last(last);
            }
        },
        first: function (nodeList) {
            var first = nodeList[0];
            if (first.nodeType) {
                return first;
            } else {
                return nodeLists.first(first);
            }
        },
        flatten: function (nodeList) {
            var items = [];
            for (var i = 0; i < nodeList.length; i++) {
                var item = nodeList[i];
                if (item.nodeType) {
                    items.push(item);
                } else {
                    items.push.apply(items, nodeLists.flatten(item));
                }
            }
            return items;
        },
        register: function (nodeList, unregistered, parent, directlyNested) {
            nodeList.unregistered = unregistered;
            nodeList.parentList = parent;
            nodeList.nesting = parent && typeof parent.nesting !== 'undefined' ? parent.nesting + 1 : 0;
            if (parent) {
                nodeList.deepChildren = [];
                nodeList.newDeepChildren = [];
                nodeList.replacements = [];
                if (parent !== true) {
                    if (directlyNested) {
                        parent.replacements.push(nodeList);
                    } else {
                        parent.newDeepChildren.push(nodeList);
                    }
                }
            } else {
                nodeLists.nestList(nodeList);
            }
            return nodeList;
        },
        unregisterChildren: function (nodeList) {
            var nodes = [];
            each(nodeList, function (node) {
                if (node.nodeType) {
                    if (!nodeList.replacements) {
                        nodeMap['delete'](node);
                    }
                    nodes.push(node);
                } else {
                    push.apply(nodes, nodeLists.unregister(node, true));
                }
            });
            each(nodeList.deepChildren, function (nodeList) {
                nodeLists.unregister(nodeList, true);
            });
            return nodes;
        },
        unregister: function (nodeList, isChild) {
            var nodes = nodeLists.unregisterChildren(nodeList, true);
            if (nodeList.unregistered) {
                var unregisteredCallback = nodeList.unregistered;
                nodeList.replacements = nodeList.unregistered = null;
                if (!isChild) {
                    var deepChildren = nodeList.parentList && nodeList.parentList.deepChildren;
                    if (deepChildren) {
                        var index = deepChildren.indexOf(nodeList);
                        if (index !== -1) {
                            deepChildren.splice(index, 1);
                        }
                    }
                }
                unregisteredCallback();
            }
            return nodes;
        },
        after: function (oldElements, newFrag) {
            var last = oldElements[oldElements.length - 1];
            if (last.nextSibling) {
                domMutate.insertBefore.call(last.parentNode, newFrag, last.nextSibling);
            } else {
                domMutate.appendChild.call(last.parentNode, newFrag);
            }
        },
        replace: function (oldElements, newFrag) {
            var selectedValue, parentNode = oldElements[0].parentNode;
            if (parentNode.nodeName.toUpperCase() === 'SELECT' && parentNode.selectedIndex >= 0) {
                selectedValue = parentNode.value;
            }
            if (oldElements.length === 1) {
                domMutate.replaceChild.call(parentNode, newFrag, oldElements[0]);
            } else {
                nodeLists.after(oldElements, newFrag);
                nodeLists.remove(oldElements);
            }
            if (selectedValue !== undefined) {
                parentNode.value = selectedValue;
            }
        },
        remove: function (elementsToBeRemoved) {
            var parent = elementsToBeRemoved[0] && elementsToBeRemoved[0].parentNode;
            each(elementsToBeRemoved, function (child) {
                domMutate.removeChild.call(parent, child);
            });
        },
        nodeMap: nodeMap
    };
    module.exports = namespace.nodeLists = nodeLists;
});
/*can-util@3.14.0#dom/fragment/fragment*/
define('can-util@3.14.0#dom/fragment/fragment', [
    'require',
    'exports',
    'module',
    'can-globals/document/document',
    '../child-nodes/child-nodes',
    'can-namespace'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var getDocument = require('can-globals/document/document');
        var childNodes = require('../child-nodes/child-nodes');
        var namespace = require('can-namespace');
        var fragmentRE = /^\s*<(\w+)[^>]*>/, toString = {}.toString, fragment = function (html, name, doc) {
                if (name === undefined) {
                    name = fragmentRE.test(html) && RegExp.$1;
                }
                if (html && toString.call(html.replace) === '[object Function]') {
                    html = html.replace(/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi, '<$1></$2>');
                }
                var container = doc.createElement('div'), temp = doc.createElement('div');
                if (name === 'tbody' || name === 'tfoot' || name === 'thead' || name === 'colgroup') {
                    temp.innerHTML = '<table>' + html + '</table>';
                    container = temp.firstChild.nodeType === 3 ? temp.lastChild : temp.firstChild;
                } else if (name === 'col') {
                    temp.innerHTML = '<table><colgroup>' + html + '</colgroup></table>';
                    container = temp.firstChild.nodeType === 3 ? temp.lastChild : temp.firstChild.firstChild;
                } else if (name === 'tr') {
                    temp.innerHTML = '<table><tbody>' + html + '</tbody></table>';
                    container = temp.firstChild.nodeType === 3 ? temp.lastChild : temp.firstChild.firstChild;
                } else if (name === 'td' || name === 'th') {
                    temp.innerHTML = '<table><tbody><tr>' + html + '</tr></tbody></table>';
                    container = temp.firstChild.nodeType === 3 ? temp.lastChild : temp.firstChild.firstChild.firstChild;
                } else if (name === 'option') {
                    temp.innerHTML = '<select>' + html + '</select>';
                    container = temp.firstChild.nodeType === 3 ? temp.lastChild : temp.firstChild;
                } else {
                    container.innerHTML = '' + html;
                }
                var tmp = {}, children = childNodes(container);
                tmp.length = children.length;
                for (var i = 0; i < children.length; i++) {
                    tmp[i] = children[i];
                }
                return [].slice.call(tmp);
            };
        var buildFragment = function (html, doc) {
            if (html && html.nodeType === 11) {
                return html;
            }
            if (!doc) {
                doc = getDocument();
            } else if (doc.length) {
                doc = doc[0];
            }
            var parts = fragment(html, undefined, doc), frag = (doc || document).createDocumentFragment();
            for (var i = 0, length = parts.length; i < length; i++) {
                frag.appendChild(parts[i]);
            }
            return frag;
        };
        module.exports = namespace.fragment = buildFragment;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-util@3.14.0#dom/frag/frag*/
define('can-util@3.14.0#dom/frag/frag', [
    'require',
    'exports',
    'module',
    'can-globals/document/document',
    '../fragment/fragment',
    '../../js/each/each',
    '../child-nodes/child-nodes',
    'can-namespace',
    'can-symbol'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var getDocument = require('can-globals/document/document');
        var fragment = require('../fragment/fragment');
        var each = require('../../js/each/each');
        var childNodes = require('../child-nodes/child-nodes');
        var namespace = require('can-namespace');
        var canSymbol = require('can-symbol');
        var toDOMSymbol = canSymbol.for('can.toDOM');
        var makeFrag = function (item, doc) {
            var document = doc || getDocument();
            var frag;
            if (!item || typeof item === 'string') {
                frag = fragment(item == null ? '' : '' + item, document);
                if (!frag.firstChild) {
                    frag.appendChild(document.createTextNode(''));
                }
                return frag;
            } else if (typeof item[toDOMSymbol] === 'function') {
                return makeFrag(item[toDOMSymbol]());
            } else if (item.nodeType === 11) {
                return item;
            } else if (typeof item.nodeType === 'number') {
                frag = document.createDocumentFragment();
                frag.appendChild(item);
                return frag;
            } else if (typeof item.length === 'number') {
                frag = document.createDocumentFragment();
                each(item, function (item) {
                    frag.appendChild(makeFrag(item));
                });
                if (!childNodes(frag).length) {
                    frag.appendChild(document.createTextNode(''));
                }
                return frag;
            } else {
                frag = fragment('' + item, document);
                if (!childNodes(frag).length) {
                    frag.appendChild(document.createTextNode(''));
                }
                return frag;
            }
        };
        module.exports = namespace.frag = makeFrag;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-util@3.14.0#dom/is-of-global-document/is-of-global-document*/
define('can-util@3.14.0#dom/is-of-global-document/is-of-global-document', [
    'require',
    'exports',
    'module',
    'can-globals/document/document',
    'can-namespace'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var getDocument = require('can-globals/document/document');
        var namespace = require('can-namespace');
        module.exports = namespace.isOfGlobalDocument = function (el) {
            return (el.ownerDocument || el) === getDocument();
        };
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-util@3.14.0#dom/events/make-mutation-event/make-mutation-event*/
define('can-util@3.14.0#dom/events/make-mutation-event/make-mutation-event', [
    'require',
    'exports',
    'module',
    '../events',
    '../../data/data',
    'can-globals/mutation-observer/mutation-observer',
    '../../dispatch/dispatch',
    '../../mutation-observer/document/document',
    'can-globals/document/document',
    'can-cid/map/map',
    '../../../js/string/string',
    '../../is-of-global-document/is-of-global-document'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var events = require('../events');
        var domData = require('../../data/data');
        var getMutationObserver = require('can-globals/mutation-observer/mutation-observer');
        var domDispatch = require('../../dispatch/dispatch');
        var mutationDocument = require('../../mutation-observer/document/document');
        var getDocument = require('can-globals/document/document');
        var CIDMap = require('can-cid/map/map');
        var string = require('../../../js/string/string');
        require('../../is-of-global-document/is-of-global-document');
        module.exports = function (specialEventName, mutationNodesProperty) {
            var originalAdd = events.addEventListener, originalRemove = events.removeEventListener;
            events.addEventListener = function (eventName) {
                if (eventName === specialEventName && getMutationObserver()) {
                    var documentElement = getDocument().documentElement;
                    var specialEventData = domData.get.call(documentElement, specialEventName + 'Data');
                    if (!specialEventData) {
                        specialEventData = {
                            handler: function (mutatedNode) {
                                if (specialEventData.nodeIdsRespondingToInsert.has(mutatedNode)) {
                                    domDispatch.call(mutatedNode, specialEventName, [], false);
                                    specialEventData.nodeIdsRespondingToInsert.delete(mutatedNode);
                                }
                            },
                            nodeIdsRespondingToInsert: new CIDMap()
                        };
                        mutationDocument['on' + string.capitalize(mutationNodesProperty)](specialEventData.handler);
                        domData.set.call(documentElement, specialEventName + 'Data', specialEventData);
                    }
                    if (this.nodeType !== 11) {
                        var count = specialEventData.nodeIdsRespondingToInsert.get(this) || 0;
                        specialEventData.nodeIdsRespondingToInsert.set(this, count + 1);
                    }
                }
                return originalAdd.apply(this, arguments);
            };
            events.removeEventListener = function (eventName) {
                if (eventName === specialEventName && getMutationObserver()) {
                    var documentElement = getDocument().documentElement;
                    var specialEventData = domData.get.call(documentElement, specialEventName + 'Data');
                    if (specialEventData) {
                        var newCount = specialEventData.nodeIdsRespondingToInsert.get(this) - 1;
                        if (newCount) {
                            specialEventData.nodeIdsRespondingToInsert.set(this, newCount);
                        } else {
                            specialEventData.nodeIdsRespondingToInsert.delete(this);
                        }
                        if (!specialEventData.nodeIdsRespondingToInsert.size) {
                            mutationDocument['off' + string.capitalize(mutationNodesProperty)](specialEventData.handler);
                            domData.clean.call(documentElement, specialEventName + 'Data');
                        }
                    }
                }
                return originalRemove.apply(this, arguments);
            };
        };
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-util@3.14.0#dom/events/removed/removed*/
define('can-util@3.14.0#dom/events/removed/removed', [
    'require',
    'exports',
    'module',
    '../make-mutation-event/make-mutation-event'
], function (require, exports, module) {
    'use strict';
    var makeMutationEvent = require('../make-mutation-event/make-mutation-event');
    makeMutationEvent('removed', 'removedNodes');
});
/*can-view-live@3.2.6#lib/core*/
define('can-view-live@3.2.6#lib/core', [
    'require',
    'exports',
    'module',
    'can-view-parser',
    'can-util/dom/events/events',
    'can-view-nodelist',
    'can-util/dom/frag/frag',
    'can-util/dom/child-nodes/child-nodes',
    'can-reflect',
    'can-util/dom/events/removed/removed'
], function (require, exports, module) {
    var parser = require('can-view-parser');
    var domEvents = require('can-util/dom/events/events');
    var nodeLists = require('can-view-nodelist');
    var makeFrag = require('can-util/dom/frag/frag');
    var childNodes = require('can-util/dom/child-nodes/child-nodes');
    var canReflect = require('can-reflect');
    require('can-util/dom/events/removed/removed');
    var childMutationCallbacks = {};
    var live = {
        setup: function (el, bind, unbind) {
            var tornDown = false, teardown = function () {
                    if (!tornDown) {
                        tornDown = true;
                        unbind(data);
                        domEvents.removeEventListener.call(el, 'removed', teardown);
                    }
                    return true;
                }, data = {
                    teardownCheck: function (parent) {
                        return parent ? false : teardown();
                    }
                };
            domEvents.addEventListener.call(el, 'removed', teardown);
            bind(data);
            return data;
        },
        listen: function (el, compute, change) {
            return live.setup(el, function () {
                canReflect.onValue(compute, change);
            }, function (data) {
                canReflect.offValue(compute, change);
                if (data.nodeList) {
                    nodeLists.unregister(data.nodeList);
                }
            });
        },
        getAttributeParts: function (newVal) {
            var attrs = {}, attr;
            parser.parseAttrs(newVal, {
                attrStart: function (name) {
                    attrs[name] = '';
                    attr = name;
                },
                attrValue: function (value) {
                    attrs[attr] += value;
                },
                attrEnd: function () {
                }
            });
            return attrs;
        },
        isNode: function (obj) {
            return obj && obj.nodeType;
        },
        addTextNodeIfNoChildren: function (frag) {
            if (!frag.firstChild) {
                frag.appendChild(frag.ownerDocument.createTextNode(''));
            }
        },
        registerChildMutationCallback: function (tag, callback) {
            if (callback) {
                childMutationCallbacks[tag] = callback;
            } else {
                return childMutationCallbacks[tag];
            }
        },
        callChildMutationCallback: function (el) {
            var callback = el && childMutationCallbacks[el.nodeName.toLowerCase()];
            if (callback) {
                callback(el);
            }
        },
        replace: function (nodes, val, teardown) {
            var oldNodes = nodes.slice(0), frag = makeFrag(val);
            nodeLists.register(nodes, teardown);
            nodeLists.update(nodes, childNodes(frag));
            nodeLists.replace(oldNodes, frag);
            return nodes;
        },
        getParentNode: function (el, defaultParentNode) {
            return defaultParentNode && el.parentNode.nodeType === 11 ? defaultParentNode : el.parentNode;
        },
        makeString: function (txt) {
            return txt == null ? '' : '' + txt;
        }
    };
    module.exports = live;
});
/*can-types@1.4.0#can-types*/
define('can-types@1.4.0#can-types', [
    'require',
    'exports',
    'module',
    'can-namespace',
    'can-reflect',
    'can-symbol',
    'can-log/dev/dev'
], function (require, exports, module) {
    'use strict';
    var namespace = require('can-namespace');
    var canReflect = require('can-reflect');
    var canSymbol = require('can-symbol');
    var dev = require('can-log/dev/dev');
    var types = {
        isMapLike: function (obj) {
            if (process.env.NODE_ENV !== 'production') {
                dev.warn('can-types.isMapLike(obj) is deprecated, please use `canReflect.isObservableLike(obj) && canReflect.isMapLike(obj)` instead.');
            }
            return canReflect.isObservableLike(obj) && canReflect.isMapLike(obj);
        },
        isListLike: function (obj) {
            if (process.env.NODE_ENV !== 'production') {
                dev.warn('can-types.isListLike(obj) is deprecated, please use `canReflect.isObservableLike(obj) && canReflect.isListLike(obj)` instead.');
            }
            return canReflect.isObservableLike(obj) && canReflect.isListLike(obj);
        },
        isPromise: function (obj) {
            if (process.env.NODE_ENV !== 'production') {
                dev.warn('can-types.isPromise is deprecated, please use canReflect.isPromise instead.');
            }
            return canReflect.isPromise(obj);
        },
        isConstructor: function (func) {
            if (process.env.NODE_ENV !== 'production') {
                dev.warn('can-types.isConstructor is deprecated, please use canReflect.isConstructorLike instead.');
            }
            return canReflect.isConstructorLike(func);
        },
        isCallableForValue: function (obj) {
            if (process.env.NODE_ENV !== 'production') {
                dev.warn('can-types.isCallableForValue(obj) is deprecated, please use `canReflect.isFunctionLike(obj) && !canReflect.isConstructorLike(obj)` instead.');
            }
            return obj && canReflect.isFunctionLike(obj) && !canReflect.isConstructorLike(obj);
        },
        isCompute: function (obj) {
            if (process.env.NODE_ENV !== 'production') {
                dev.warn('can-types.isCompute is deprecated.');
            }
            return obj && obj.isComputed;
        },
        get iterator() {
            if (process.env.NODE_ENV !== 'production') {
                dev.warn('can-types.iterator is deprecated, use `canSymbol.iterator || canSymbol.for("iterator")` instead.');
            }
            return canSymbol.iterator || canSymbol.for('iterator');
        },
        DefaultMap: null,
        DefaultList: null,
        queueTask: function (task) {
            var args = task[2] || [];
            task[0].apply(task[1], args);
        },
        wrapElement: function (element) {
            return element;
        },
        unwrapElement: function (element) {
            return element;
        }
    };
    if (namespace.types) {
        throw new Error('You can\'t have two versions of can-types, check your dependencies');
    } else {
        module.exports = namespace.types = types;
    }
});
/*can-util@3.14.0#js/diff/diff*/
define('can-util@3.14.0#js/diff/diff', [
    'require',
    'exports',
    'module',
    'can-namespace'
], function (require, exports, module) {
    'use strict';
    var namespace = require('can-namespace');
    var slice = [].slice;
    var defaultIdentity = function (a, b) {
        return a === b;
    };
    function reverseDiff(oldDiffStopIndex, newDiffStopIndex, oldList, newList, identity) {
        var oldIndex = oldList.length - 1, newIndex = newList.length - 1;
        while (oldIndex > oldDiffStopIndex && newIndex > newDiffStopIndex) {
            var oldItem = oldList[oldIndex], newItem = newList[newIndex];
            if (identity(oldItem, newItem)) {
                oldIndex--;
                newIndex--;
                continue;
            } else {
                return [{
                        index: newDiffStopIndex,
                        deleteCount: oldIndex - oldDiffStopIndex + 1,
                        insert: slice.call(newList, newDiffStopIndex, newIndex + 1)
                    }];
            }
        }
        return [{
                index: newDiffStopIndex,
                deleteCount: oldIndex - oldDiffStopIndex + 1,
                insert: slice.call(newList, newDiffStopIndex, newIndex + 1)
            }];
    }
    module.exports = namespace.diff = function (oldList, newList, identity) {
        identity = identity || defaultIdentity;
        var oldIndex = 0, newIndex = 0, oldLength = oldList.length, newLength = newList.length, patches = [];
        while (oldIndex < oldLength && newIndex < newLength) {
            var oldItem = oldList[oldIndex], newItem = newList[newIndex];
            if (identity(oldItem, newItem)) {
                oldIndex++;
                newIndex++;
                continue;
            }
            if (newIndex + 1 < newLength && identity(oldItem, newList[newIndex + 1])) {
                patches.push({
                    index: newIndex,
                    deleteCount: 0,
                    insert: [newList[newIndex]]
                });
                oldIndex++;
                newIndex += 2;
                continue;
            } else if (oldIndex + 1 < oldLength && identity(oldList[oldIndex + 1], newItem)) {
                patches.push({
                    index: newIndex,
                    deleteCount: 1,
                    insert: []
                });
                oldIndex += 2;
                newIndex++;
                continue;
            } else {
                patches.push.apply(patches, reverseDiff(oldIndex, newIndex, oldList, newList, identity));
                return patches;
            }
        }
        if (newIndex === newLength && oldIndex === oldLength) {
            return patches;
        }
        patches.push({
            index: newIndex,
            deleteCount: oldLength - oldIndex,
            insert: slice.call(newList, newIndex)
        });
        return patches;
    };
});
/*can-assign@1.3.1#can-assign*/
define('can-assign@1.3.1#can-assign', [
    'require',
    'exports',
    'module',
    'can-namespace'
], function (require, exports, module) {
    var namespace = require('can-namespace');
    module.exports = namespace.assign = function (d, s) {
        for (var prop in s) {
            var desc = Object.getOwnPropertyDescriptor(d, prop);
            if (!desc || desc.writable !== false) {
                d[prop] = s[prop];
            }
        }
        return d;
    };
});
/*can-util@3.14.0#dom/events/attributes/attributes*/
define('can-util@3.14.0#dom/events/attributes/attributes', [
    'require',
    'exports',
    'module',
    '../events',
    '../../is-of-global-document/is-of-global-document',
    '../../data/data',
    'can-globals/mutation-observer/mutation-observer',
    'can-assign',
    '../../dispatch/dispatch'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var events = require('../events');
        var isOfGlobalDocument = require('../../is-of-global-document/is-of-global-document');
        var domData = require('../../data/data');
        var getMutationObserver = require('can-globals/mutation-observer/mutation-observer');
        var assign = require('can-assign');
        var domDispatch = require('../../dispatch/dispatch');
        var originalAdd = events.addEventListener, originalRemove = events.removeEventListener;
        events.addEventListener = function (eventName) {
            if (eventName === 'attributes') {
                var MutationObserver = getMutationObserver();
                if (isOfGlobalDocument(this) && MutationObserver) {
                    var existingObserver = domData.get.call(this, 'canAttributesObserver');
                    if (!existingObserver) {
                        var self = this;
                        var observer = new MutationObserver(function (mutations) {
                            mutations.forEach(function (mutation) {
                                var copy = assign({}, mutation);
                                domDispatch.call(self, copy, [], false);
                            });
                        });
                        observer.observe(this, {
                            attributes: true,
                            attributeOldValue: true
                        });
                        domData.set.call(this, 'canAttributesObserver', observer);
                    }
                } else {
                    domData.set.call(this, 'canHasAttributesBindings', true);
                }
            }
            return originalAdd.apply(this, arguments);
        };
        events.removeEventListener = function (eventName) {
            if (eventName === 'attributes') {
                var MutationObserver = getMutationObserver();
                var observer;
                if (isOfGlobalDocument(this) && MutationObserver) {
                    observer = domData.get.call(this, 'canAttributesObserver');
                    if (observer && observer.disconnect) {
                        observer.disconnect();
                        domData.clean.call(this, 'canAttributesObserver');
                    }
                } else {
                    domData.clean.call(this, 'canHasAttributesBindings');
                }
            }
            return originalRemove.apply(this, arguments);
        };
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-util@3.14.0#dom/events/inserted/inserted*/
define('can-util@3.14.0#dom/events/inserted/inserted', [
    'require',
    'exports',
    'module',
    '../make-mutation-event/make-mutation-event'
], function (require, exports, module) {
    'use strict';
    var makeMutationEvent = require('../make-mutation-event/make-mutation-event');
    makeMutationEvent('inserted', 'addedNodes');
});
/*can-util@3.14.0#dom/attr/attr*/
define('can-util@3.14.0#dom/attr/attr', [
    'require',
    'exports',
    'module',
    'can-namespace',
    '../../js/set-immediate/set-immediate',
    'can-globals/document/document',
    'can-globals/global/global',
    '../is-of-global-document/is-of-global-document',
    '../data/data',
    '../contains/contains',
    '../events/events',
    '../dispatch/dispatch',
    'can-globals/mutation-observer/mutation-observer',
    '../../js/each/each',
    'can-types',
    '../../js/diff/diff',
    '../events/attributes/attributes',
    '../events/inserted/inserted'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var namespace = require('can-namespace');
        var setImmediate = require('../../js/set-immediate/set-immediate');
        var getDocument = require('can-globals/document/document');
        var global = require('can-globals/global/global')();
        var isOfGlobalDocument = require('../is-of-global-document/is-of-global-document');
        var setData = require('../data/data');
        var domContains = require('../contains/contains');
        var domEvents = require('../events/events');
        var domDispatch = require('../dispatch/dispatch');
        var getMutationObserver = require('can-globals/mutation-observer/mutation-observer');
        var each = require('../../js/each/each');
        var types = require('can-types');
        var diff = require('../../js/diff/diff');
        require('../events/attributes/attributes');
        require('../events/inserted/inserted');
        var namespaces = { 'xlink': 'http://www.w3.org/1999/xlink' };
        var formElements = {
                'INPUT': true,
                'TEXTAREA': true,
                'SELECT': true
            }, toString = function (value) {
                if (value == null) {
                    return '';
                } else {
                    return '' + value;
                }
            }, isSVG = function (el) {
                return el.namespaceURI === 'http://www.w3.org/2000/svg';
            }, truthy = function () {
                return true;
            }, getSpecialTest = function (special) {
                return special && special.test || truthy;
            }, propProp = function (prop, obj) {
                obj = obj || {};
                obj.get = function () {
                    return this[prop];
                };
                obj.set = function (value) {
                    if (this[prop] !== value) {
                        this[prop] = value;
                    }
                    return value;
                };
                return obj;
            }, booleanProp = function (prop) {
                return {
                    isBoolean: true,
                    set: function (value) {
                        if (prop in this) {
                            this[prop] = value !== false;
                        } else {
                            this.setAttribute(prop, '');
                        }
                    },
                    remove: function () {
                        this[prop] = false;
                    }
                };
            }, setupMO = function (el, callback) {
                var attrMO = setData.get.call(el, 'attrMO');
                if (!attrMO) {
                    var onMutation = function () {
                        callback.call(el);
                    };
                    var MO = getMutationObserver();
                    if (MO) {
                        var observer = new MO(onMutation);
                        observer.observe(el, {
                            childList: true,
                            subtree: true
                        });
                        setData.set.call(el, 'attrMO', observer);
                    } else {
                        setData.set.call(el, 'attrMO', true);
                        setData.set.call(el, 'canBindingCallback', { onMutation: onMutation });
                    }
                }
            }, _findOptionToSelect = function (parent, value) {
                var child = parent.firstChild;
                while (child) {
                    if (child.nodeName === 'OPTION' && value === child.value) {
                        return child;
                    }
                    if (child.nodeName === 'OPTGROUP') {
                        var groupChild = _findOptionToSelect(child, value);
                        if (groupChild) {
                            return groupChild;
                        }
                    }
                    child = child.nextSibling;
                }
            }, setChildOptions = function (el, value) {
                var option;
                if (value != null) {
                    option = _findOptionToSelect(el, value);
                }
                if (option) {
                    option.selected = true;
                } else {
                    el.selectedIndex = -1;
                }
            }, forEachOption = function (parent, fn) {
                var child = parent.firstChild;
                while (child) {
                    if (child.nodeName === 'OPTION') {
                        fn(child);
                    }
                    if (child.nodeName === 'OPTGROUP') {
                        forEachOption(child, fn);
                    }
                    child = child.nextSibling;
                }
            }, collectSelectedOptions = function (parent) {
                var selectedValues = [];
                forEachOption(parent, function (option) {
                    if (option.selected) {
                        selectedValues.push(option.value);
                    }
                });
                return selectedValues;
            }, markSelectedOptions = function (parent, values) {
                forEachOption(parent, function (option) {
                    option.selected = values.indexOf(option.value) !== -1;
                });
            }, setChildOptionsOnChange = function (select, aEL) {
                var handler = setData.get.call(select, 'attrSetChildOptions');
                if (handler) {
                    return Function.prototype;
                }
                handler = function () {
                    setChildOptions(select, select.value);
                };
                setData.set.call(select, 'attrSetChildOptions', handler);
                aEL.call(select, 'change', handler);
                return function (rEL) {
                    setData.clean.call(select, 'attrSetChildOptions');
                    rEL.call(select, 'change', handler);
                };
            }, attr = {
                special: {
                    checked: {
                        get: function () {
                            return this.checked;
                        },
                        set: function (val) {
                            var notFalse = !!val || val === '' || arguments.length === 0;
                            this.checked = notFalse;
                            if (notFalse && this.type === 'radio') {
                                this.defaultChecked = true;
                            }
                            return val;
                        },
                        remove: function () {
                            this.checked = false;
                        },
                        test: function () {
                            return this.nodeName === 'INPUT';
                        }
                    },
                    'class': {
                        get: function () {
                            if (isSVG(this)) {
                                return this.getAttribute('class');
                            }
                            return this.className;
                        },
                        set: function (val) {
                            val = val || '';
                            if (isSVG(this)) {
                                this.setAttribute('class', '' + val);
                            } else {
                                this.className = val;
                            }
                            return val;
                        }
                    },
                    disabled: booleanProp('disabled'),
                    focused: {
                        get: function () {
                            return this === document.activeElement;
                        },
                        set: function (val) {
                            var cur = attr.get(this, 'focused');
                            var docEl = this.ownerDocument.documentElement;
                            var element = this;
                            function focusTask() {
                                if (val) {
                                    element.focus();
                                } else {
                                    element.blur();
                                }
                            }
                            if (cur !== val) {
                                if (!domContains.call(docEl, element)) {
                                    var initialSetHandler = function () {
                                        domEvents.removeEventListener.call(element, 'inserted', initialSetHandler);
                                        focusTask();
                                    };
                                    domEvents.addEventListener.call(element, 'inserted', initialSetHandler);
                                } else {
                                    types.queueTask([
                                        focusTask,
                                        this,
                                        []
                                    ]);
                                }
                            }
                            return !!val;
                        },
                        addEventListener: function (eventName, handler, aEL) {
                            aEL.call(this, 'focus', handler);
                            aEL.call(this, 'blur', handler);
                            return function (rEL) {
                                rEL.call(this, 'focus', handler);
                                rEL.call(this, 'blur', handler);
                            };
                        },
                        test: function () {
                            return this.nodeName === 'INPUT';
                        }
                    },
                    'for': propProp('htmlFor'),
                    innertext: propProp('innerText'),
                    innerhtml: propProp('innerHTML'),
                    innerHTML: propProp('innerHTML', {
                        addEventListener: function (eventName, handler, aEL) {
                            var handlers = [];
                            var el = this;
                            each([
                                'change',
                                'blur'
                            ], function (eventName) {
                                var localHandler = function () {
                                    handler.apply(this, arguments);
                                };
                                domEvents.addEventListener.call(el, eventName, localHandler);
                                handlers.push([
                                    eventName,
                                    localHandler
                                ]);
                            });
                            return function (rEL) {
                                each(handlers, function (info) {
                                    rEL.call(el, info[0], info[1]);
                                });
                            };
                        }
                    }),
                    required: booleanProp('required'),
                    readonly: booleanProp('readOnly'),
                    selected: {
                        get: function () {
                            return this.selected;
                        },
                        set: function (val) {
                            val = !!val;
                            setData.set.call(this, 'lastSetValue', val);
                            return this.selected = val;
                        },
                        addEventListener: function (eventName, handler, aEL) {
                            var option = this;
                            var select = this.parentNode;
                            var lastVal = option.selected;
                            var localHandler = function (changeEvent) {
                                var curVal = option.selected;
                                lastVal = setData.get.call(option, 'lastSetValue') || lastVal;
                                if (curVal !== lastVal) {
                                    lastVal = curVal;
                                    domDispatch.call(option, eventName);
                                }
                            };
                            var removeChangeHandler = setChildOptionsOnChange(select, aEL);
                            domEvents.addEventListener.call(select, 'change', localHandler);
                            aEL.call(option, eventName, handler);
                            return function (rEL) {
                                removeChangeHandler(rEL);
                                domEvents.removeEventListener.call(select, 'change', localHandler);
                                rEL.call(option, eventName, handler);
                            };
                        },
                        test: function () {
                            return this.nodeName === 'OPTION' && this.parentNode && this.parentNode.nodeName === 'SELECT';
                        }
                    },
                    src: {
                        set: function (val) {
                            if (val == null || val === '') {
                                this.removeAttribute('src');
                                return null;
                            } else {
                                this.setAttribute('src', val);
                                return val;
                            }
                        }
                    },
                    style: {
                        set: function () {
                            var el = global.document && getDocument().createElement('div');
                            if (el && el.style && 'cssText' in el.style) {
                                return function (val) {
                                    return this.style.cssText = val || '';
                                };
                            } else {
                                return function (val) {
                                    return this.setAttribute('style', val);
                                };
                            }
                        }()
                    },
                    textcontent: propProp('textContent'),
                    value: {
                        get: function () {
                            var value = this.value;
                            if (this.nodeName === 'SELECT') {
                                if ('selectedIndex' in this && this.selectedIndex === -1) {
                                    value = undefined;
                                }
                            }
                            return value;
                        },
                        set: function (value) {
                            var nodeName = this.nodeName.toLowerCase();
                            if (nodeName === 'input' || nodeName === 'textarea') {
                                value = toString(value);
                            }
                            if (this.value !== value || nodeName === 'option') {
                                this.value = value;
                            }
                            if (attr.defaultValue[nodeName]) {
                                this.defaultValue = value;
                            }
                            if (nodeName === 'select') {
                                setData.set.call(this, 'attrValueLastVal', value);
                                setChildOptions(this, value === null ? value : this.value);
                                var docEl = this.ownerDocument.documentElement;
                                if (!domContains.call(docEl, this)) {
                                    var select = this;
                                    var initialSetHandler = function () {
                                        domEvents.removeEventListener.call(select, 'inserted', initialSetHandler);
                                        setChildOptions(select, value === null ? value : select.value);
                                    };
                                    domEvents.addEventListener.call(this, 'inserted', initialSetHandler);
                                }
                                setupMO(this, function () {
                                    var value = setData.get.call(this, 'attrValueLastVal');
                                    attr.set(this, 'value', value);
                                    domDispatch.call(this, 'change');
                                });
                            }
                            return value;
                        },
                        test: function () {
                            return formElements[this.nodeName];
                        }
                    },
                    values: {
                        get: function () {
                            return collectSelectedOptions(this);
                        },
                        set: function (values) {
                            values = values || [];
                            markSelectedOptions(this, values);
                            setData.set.call(this, 'stickyValues', attr.get(this, 'values'));
                            setupMO(this, function () {
                                var previousValues = setData.get.call(this, 'stickyValues');
                                attr.set(this, 'values', previousValues);
                                var currentValues = setData.get.call(this, 'stickyValues');
                                var changes = diff(previousValues.slice().sort(), currentValues.slice().sort());
                                if (changes.length) {
                                    domDispatch.call(this, 'values');
                                }
                            });
                            return values;
                        },
                        addEventListener: function (eventName, handler, aEL) {
                            var localHandler = function () {
                                domDispatch.call(this, 'values');
                            };
                            domEvents.addEventListener.call(this, 'change', localHandler);
                            aEL.call(this, eventName, handler);
                            return function (rEL) {
                                domEvents.removeEventListener.call(this, 'change', localHandler);
                                rEL.call(this, eventName, handler);
                            };
                        }
                    }
                },
                defaultValue: {
                    input: true,
                    textarea: true
                },
                setAttrOrProp: function (el, attrName, val) {
                    attrName = attrName.toLowerCase();
                    var special = attr.special[attrName];
                    if (special && special.isBoolean && !val) {
                        this.remove(el, attrName);
                    } else {
                        this.set(el, attrName, val);
                    }
                },
                set: function (el, attrName, val) {
                    var usingMutationObserver = isOfGlobalDocument(el) && getMutationObserver();
                    attrName = attrName.toLowerCase();
                    var oldValue;
                    if (!usingMutationObserver) {
                        oldValue = attr.get(el, attrName);
                    }
                    var newValue;
                    var special = attr.special[attrName];
                    var setter = special && special.set;
                    var test = getSpecialTest(special);
                    if (typeof setter === 'function' && test.call(el)) {
                        if (arguments.length === 2) {
                            newValue = setter.call(el);
                        } else {
                            newValue = setter.call(el, val);
                        }
                    } else {
                        attr.setAttribute(el, attrName, val);
                    }
                    if (!usingMutationObserver && newValue !== oldValue) {
                        attr.trigger(el, attrName, oldValue);
                    }
                },
                setSelectValue: function (el, value) {
                    attr.set(el, 'value', value);
                },
                setAttribute: function () {
                    var doc = getDocument();
                    if (doc && document.createAttribute) {
                        try {
                            doc.createAttribute('{}');
                        } catch (e) {
                            var invalidNodes = {}, attributeDummy = document.createElement('div');
                            return function (el, attrName, val) {
                                var first = attrName.charAt(0), cachedNode, node, attr;
                                if ((first === '{' || first === '(' || first === '*') && el.setAttributeNode) {
                                    cachedNode = invalidNodes[attrName];
                                    if (!cachedNode) {
                                        attributeDummy.innerHTML = '<div ' + attrName + '=""></div>';
                                        cachedNode = invalidNodes[attrName] = attributeDummy.childNodes[0].attributes[0];
                                    }
                                    node = cachedNode.cloneNode();
                                    node.value = val;
                                    el.setAttributeNode(node);
                                } else {
                                    attr = attrName.split(':');
                                    if (attr.length !== 1 && namespaces[attr[0]]) {
                                        el.setAttributeNS(namespaces[attr[0]], attrName, val);
                                    } else {
                                        el.setAttribute(attrName, val);
                                    }
                                }
                            };
                        }
                    }
                    return function (el, attrName, val) {
                        el.setAttribute(attrName, val);
                    };
                }(),
                trigger: function (el, attrName, oldValue) {
                    if (setData.get.call(el, 'canHasAttributesBindings')) {
                        attrName = attrName.toLowerCase();
                        return setImmediate(function () {
                            domDispatch.call(el, {
                                type: 'attributes',
                                attributeName: attrName,
                                target: el,
                                oldValue: oldValue,
                                bubbles: false
                            }, []);
                        });
                    }
                },
                get: function (el, attrName) {
                    attrName = attrName.toLowerCase();
                    var special = attr.special[attrName];
                    var getter = special && special.get;
                    var test = getSpecialTest(special);
                    if (typeof getter === 'function' && test.call(el)) {
                        return getter.call(el);
                    } else {
                        return el.getAttribute(attrName);
                    }
                },
                remove: function (el, attrName) {
                    attrName = attrName.toLowerCase();
                    var oldValue;
                    if (!getMutationObserver()) {
                        oldValue = attr.get(el, attrName);
                    }
                    var special = attr.special[attrName];
                    var setter = special && special.set;
                    var remover = special && special.remove;
                    var test = getSpecialTest(special);
                    if (typeof remover === 'function' && test.call(el)) {
                        remover.call(el);
                    } else if (typeof setter === 'function' && test.call(el)) {
                        setter.call(el, undefined);
                    } else {
                        el.removeAttribute(attrName);
                    }
                    if (!getMutationObserver() && oldValue != null) {
                        attr.trigger(el, attrName, oldValue);
                    }
                },
                has: function () {
                    var el = getDocument() && document.createElement('div');
                    if (el && el.hasAttribute) {
                        return function (el, name) {
                            return el.hasAttribute(name);
                        };
                    } else {
                        return function (el, name) {
                            return el.getAttribute(name) !== null;
                        };
                    }
                }()
            };
        var oldAddEventListener = domEvents.addEventListener;
        domEvents.addEventListener = function (eventName, handler) {
            var special = attr.special[eventName];
            if (special && special.addEventListener) {
                var teardown = special.addEventListener.call(this, eventName, handler, oldAddEventListener);
                var teardowns = setData.get.call(this, 'attrTeardowns');
                if (!teardowns) {
                    setData.set.call(this, 'attrTeardowns', teardowns = {});
                }
                if (!teardowns[eventName]) {
                    teardowns[eventName] = [];
                }
                teardowns[eventName].push({
                    teardown: teardown,
                    handler: handler
                });
                return;
            }
            return oldAddEventListener.apply(this, arguments);
        };
        var oldRemoveEventListener = domEvents.removeEventListener;
        domEvents.removeEventListener = function (eventName, handler) {
            var special = attr.special[eventName];
            if (special && special.addEventListener) {
                var teardowns = setData.get.call(this, 'attrTeardowns');
                if (teardowns && teardowns[eventName]) {
                    var eventTeardowns = teardowns[eventName];
                    for (var i = 0, len = eventTeardowns.length; i < len; i++) {
                        if (eventTeardowns[i].handler === handler) {
                            eventTeardowns[i].teardown.call(this, oldRemoveEventListener);
                            eventTeardowns.splice(i, 1);
                            break;
                        }
                    }
                    if (eventTeardowns.length === 0) {
                        delete teardowns[eventName];
                    }
                }
                return;
            }
            return oldRemoveEventListener.apply(this, arguments);
        };
        module.exports = namespace.attr = attr;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-view-live@3.2.6#lib/attr*/
define('can-view-live@3.2.6#lib/attr', [
    'require',
    'exports',
    'module',
    'can-util/dom/attr/attr',
    './core',
    'can-reflect'
], function (require, exports, module) {
    var attr = require('can-util/dom/attr/attr');
    var live = require('./core');
    var canReflect = require('can-reflect');
    live.attr = function (el, attributeName, compute) {
        live.listen(el, compute, function (newVal) {
            attr.set(el, attributeName, newVal);
        });
        attr.set(el, attributeName, canReflect.getValue(compute));
    };
});
/*can-util@3.14.0#js/is-empty-object/is-empty-object*/
define('can-util@3.14.0#js/is-empty-object/is-empty-object', [
    'require',
    'exports',
    'module',
    'can-namespace'
], function (require, exports, module) {
    'use strict';
    var namespace = require('can-namespace');
    module.exports = namespace.isEmptyObject = function (obj) {
        for (var prop in obj) {
            return false;
        }
        return true;
    };
});
/*can-util@3.14.0#dom/matches/matches*/
define('can-util@3.14.0#dom/matches/matches', [
    'require',
    'exports',
    'module',
    'can-namespace'
], function (require, exports, module) {
    'use strict';
    var namespace = require('can-namespace');
    var matchesMethod = function (element) {
        return element.matches || element.webkitMatchesSelector || element.webkitMatchesSelector || element.mozMatchesSelector || element.msMatchesSelector || element.oMatchesSelector;
    };
    module.exports = namespace.matches = function () {
        var method = matchesMethod(this);
        return method ? method.apply(this, arguments) : false;
    };
});
/*can-util@3.14.0#dom/events/delegate/delegate*/
define('can-util@3.14.0#dom/events/delegate/delegate', [
    'require',
    'exports',
    'module',
    '../events',
    '../../data/data',
    '../../matches/matches',
    '../../../js/each/each',
    '../../../js/is-empty-object/is-empty-object',
    'can-cid'
], function (require, exports, module) {
    'use strict';
    var domEvents = require('../events');
    var domData = require('../../data/data');
    var domMatches = require('../../matches/matches');
    var each = require('../../../js/each/each');
    var isEmptyObject = require('../../../js/is-empty-object/is-empty-object');
    var canCid = require('can-cid');
    var dataName = 'delegateEvents';
    var useCapture = function (eventType) {
        return eventType === 'focus' || eventType === 'blur';
    };
    var handleEvent = function (overrideEventType, ev) {
        var events = domData.get.call(this, dataName);
        var eventTypeEvents = events[overrideEventType || ev.type];
        var matches = [];
        if (eventTypeEvents) {
            var selectorDelegates = [];
            each(eventTypeEvents, function (delegates) {
                selectorDelegates.push(delegates);
            });
            var cur = ev.target;
            do {
                selectorDelegates.forEach(function (delegates) {
                    if (domMatches.call(cur, delegates[0].selector)) {
                        matches.push({
                            target: cur,
                            delegates: delegates
                        });
                    }
                });
                cur = cur.parentNode;
            } while (cur && cur !== ev.currentTarget);
        }
        var oldStopProp = ev.stopPropagation;
        ev.stopPropagation = function () {
            oldStopProp.apply(this, arguments);
            this.cancelBubble = true;
        };
        for (var i = 0; i < matches.length; i++) {
            var match = matches[i];
            var delegates = match.delegates;
            for (var d = 0, dLen = delegates.length; d < dLen; d++) {
                if (delegates[d].handler.call(match.target, ev) === false) {
                    return false;
                }
                if (ev.cancelBubble) {
                    return;
                }
            }
        }
    };
    domEvents.addDelegateListener = function (eventType, selector, handler) {
        var events = domData.get.call(this, dataName), eventTypeEvents;
        if (!events) {
            domData.set.call(this, dataName, events = {});
        }
        if (!(eventTypeEvents = events[eventType])) {
            eventTypeEvents = events[eventType] = {};
            var delegateHandler = handleEvent.bind(this, eventType);
            domData.set.call(this, canCid(handler), delegateHandler);
            domEvents.addEventListener.call(this, eventType, delegateHandler, useCapture(eventType));
        }
        if (!eventTypeEvents[selector]) {
            eventTypeEvents[selector] = [];
        }
        eventTypeEvents[selector].push({
            handler: handler,
            selector: selector
        });
    };
    domEvents.removeDelegateListener = function (eventType, selector, handler) {
        var events = domData.get.call(this, dataName);
        if (events && events[eventType] && events[eventType][selector]) {
            var eventTypeEvents = events[eventType], delegates = eventTypeEvents[selector], i = 0;
            while (i < delegates.length) {
                if (delegates[i].handler === handler) {
                    delegates.splice(i, 1);
                } else {
                    i++;
                }
            }
            if (delegates.length === 0) {
                delete eventTypeEvents[selector];
                if (isEmptyObject(eventTypeEvents)) {
                    var delegateHandler = domData.get.call(this, canCid(handler));
                    domEvents.removeEventListener.call(this, eventType, delegateHandler, useCapture(eventType));
                    delete events[eventType];
                    if (isEmptyObject(events)) {
                        domData.clean.call(this, dataName);
                    }
                }
            }
        }
    };
});
/*can-util@3.14.0#js/single-reference/single-reference*/
define('can-util@3.14.0#js/single-reference/single-reference', [
    'require',
    'exports',
    'module',
    'can-cid'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var CID = require('can-cid');
        var singleReference;
        function getKeyName(key, extraKey) {
            var keyCID = key != null && (typeof key === 'object' || typeof key === 'function') ? CID(key) : '' + key;
            var keyName = extraKey ? keyCID + ':' + extraKey : keyCID;
            return keyName || key;
        }
        singleReference = {
            set: function (obj, key, value, extraKey) {
                obj[getKeyName(key, extraKey)] = value;
            },
            getAndDelete: function (obj, key, extraKey) {
                var keyName = getKeyName(key, extraKey);
                var value = obj[keyName];
                delete obj[keyName];
                return value;
            }
        };
        module.exports = singleReference;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-util@3.14.0#js/cid/get-cid*/
define('can-util@3.14.0#js/cid/get-cid', [
    'require',
    'exports',
    'module',
    'can-cid',
    'can-dom-data-state'
], function (require, exports, module) {
    'use strict';
    var CID = require('can-cid');
    var domDataState = require('can-dom-data-state');
    module.exports = function (obj) {
        if (typeof obj.nodeType === 'number') {
            return domDataState.cid.call(obj);
        } else {
            var type = typeof obj;
            var isObject = type !== null && (type === 'object' || type === 'function');
            return type + ':' + (isObject ? CID(obj) : obj);
        }
    };
});
/*can-util@3.14.0#dom/events/delegate/enter-leave*/
define('can-util@3.14.0#dom/events/delegate/enter-leave', [
    'require',
    'exports',
    'module',
    '../events',
    '../../../js/single-reference/single-reference',
    '../../../js/cid/get-cid'
], function (require, exports, module) {
    'use strict';
    var domEvents = require('../events'), singleRef = require('../../../js/single-reference/single-reference'), cid = require('../../../js/cid/get-cid');
    var eventMap = {
            mouseenter: 'mouseover',
            mouseleave: 'mouseout',
            pointerenter: 'pointerover',
            pointerleave: 'pointerout'
        }, classMap = {
            mouseenter: 'MouseEvent',
            mouseleave: 'MouseEvent',
            pointerenter: 'PointerEvent',
            pointerleave: 'PointerEvent'
        }, _addDelegateListener = domEvents.addDelegateListener, _removeDelegateListener = domEvents.removeDelegateListener;
    domEvents.addDelegateListener = function (eventType, selector, handler) {
        if (eventMap[eventType] !== undefined) {
            var origHandler = handler, origType = eventType;
            eventType = eventMap[eventType];
            handler = function (event) {
                var target = this, related = event.relatedTarget;
                if (!related || related !== target && !target.contains(related)) {
                    var eventClass = classMap[origType];
                    if (eventClass === 'MouseEvent') {
                        var newEv = document.createEvent(eventClass);
                        newEv.initMouseEvent(origType, false, false, event.view, event.detail, event.screenX, event.screenY, event.clientX, event.clientY, event.ctrlKey, event.altKey, event.shiftKey, event.metaKey, event.button, event.relatedTarget);
                        event = newEv;
                    } else if (eventClass === 'PointerEvent') {
                        event = new PointerEvent(origType, event);
                    }
                    return origHandler.call(this, event);
                }
            };
            singleRef.set(origHandler, cid(this) + eventType, handler);
        }
        _addDelegateListener.call(this, eventType, selector, handler);
    };
    domEvents.removeDelegateListener = function (eventType, selector, handler) {
        if (eventMap[eventType] !== undefined) {
            eventType = eventMap[eventType];
            handler = singleRef.getAndDelete(handler, cid(this) + eventType);
        }
        _removeDelegateListener.call(this, eventType, selector, handler);
    };
});
/*can-event@3.7.7#can-event*/
define('can-event@3.7.7#can-event', [
    'require',
    'exports',
    'module',
    'can-util/dom/events/events',
    'can-cid',
    'can-util/js/is-empty-object/is-empty-object',
    'can-util/dom/dispatch/dispatch',
    'can-namespace',
    'can-util/dom/events/delegate/delegate',
    'can-util/dom/events/delegate/enter-leave'
], function (require, exports, module) {
    var domEvents = require('can-util/dom/events/events');
    var CID = require('can-cid');
    var isEmptyObject = require('can-util/js/is-empty-object/is-empty-object');
    var domDispatch = require('can-util/dom/dispatch/dispatch');
    var namespace = require('can-namespace');
    require('can-util/dom/events/delegate/delegate');
    require('can-util/dom/events/delegate/enter-leave');
    function makeHandlerArgs(event, args) {
        if (typeof event === 'string') {
            event = { type: event };
        }
        var handlerArgs = [event];
        if (args) {
            handlerArgs.push.apply(handlerArgs, args);
        }
        return handlerArgs;
    }
    function getHandlers(eventName) {
        var events = this.__bindEvents;
        if (!events) {
            return;
        }
        return events[eventName];
    }
    var canEvent = {
        addEventListener: function (event, handler) {
            var allEvents = this.__bindEvents || (this.__bindEvents = {}), eventList = allEvents[event] || (allEvents[event] = []);
            eventList.push(handler);
            return this;
        },
        removeEventListener: function (event, fn) {
            if (!this.__bindEvents) {
                return this;
            }
            if (!arguments.length) {
                for (var bindEvent in this.__bindEvents) {
                    if (bindEvent === '_lifecycleBindings') {
                        this.__bindEvents._lifecycleBindings = null;
                    } else if (this.__bindEvents.hasOwnProperty(bindEvent)) {
                        canEvent.removeEventListener.call(this, bindEvent);
                    }
                }
                return this;
            }
            var handlers = this.__bindEvents[event] || [], i = 0, handler, isFunction = typeof fn === 'function';
            while (i < handlers.length) {
                handler = handlers[i];
                if (isFunction && handler === fn || !isFunction && (handler.cid === fn || !fn)) {
                    handlers.splice(i, 1);
                } else {
                    i++;
                }
            }
            return this;
        },
        dispatchSync: function (event, args) {
            var handlerArgs = makeHandlerArgs(event, args);
            var handlers = getHandlers.call(this, handlerArgs[0].type);
            if (!handlers) {
                return;
            }
            handlers = handlers.slice(0);
            for (var i = 0, len = handlers.length; i < len; i++) {
                handlers[i].apply(this, handlerArgs);
            }
            return handlerArgs[0];
        },
        on: function (eventName, selector, handler) {
            var method = typeof selector === 'string' ? 'addDelegateListener' : 'addEventListener';
            var listenWithDOM = domEvents.canAddEventListener.call(this);
            var eventBinder = listenWithDOM ? domEvents[method] : this[method] || canEvent[method];
            return eventBinder.apply(this, arguments);
        },
        off: function (eventName, selector, handler) {
            var method = typeof selector === 'string' ? 'removeDelegateListener' : 'removeEventListener';
            var listenWithDOM = domEvents.canAddEventListener.call(this);
            var eventBinder = listenWithDOM ? domEvents[method] : this[method] || canEvent[method];
            return eventBinder.apply(this, arguments);
        },
        trigger: function () {
            var listenWithDOM = domEvents.canAddEventListener.call(this);
            var dispatch = listenWithDOM ? domDispatch : canEvent.dispatch;
            return dispatch.apply(this, arguments);
        },
        one: function (event, handler) {
            var one = function () {
                canEvent.off.call(this, event, one);
                return handler.apply(this, arguments);
            };
            canEvent.on.call(this, event, one);
            return this;
        },
        listenTo: function (other, event, handler) {
            var idedEvents = this.__listenToEvents;
            if (!idedEvents) {
                idedEvents = this.__listenToEvents = {};
            }
            var otherId = CID(other);
            var othersEvents = idedEvents[otherId];
            if (!othersEvents) {
                othersEvents = idedEvents[otherId] = {
                    obj: other,
                    events: {}
                };
            }
            var eventsEvents = othersEvents.events[event];
            if (!eventsEvents) {
                eventsEvents = othersEvents.events[event] = [];
            }
            eventsEvents.push(handler);
            canEvent.on.call(other, event, handler);
        },
        stopListening: function (other, event, handler) {
            var idedEvents = this.__listenToEvents, iterIdedEvents = idedEvents, i = 0;
            if (!idedEvents) {
                return this;
            }
            if (other) {
                var othercid = CID(other);
                (iterIdedEvents = {})[othercid] = idedEvents[othercid];
                if (!idedEvents[othercid]) {
                    return this;
                }
            }
            for (var cid in iterIdedEvents) {
                var othersEvents = iterIdedEvents[cid], eventsEvents;
                other = idedEvents[cid].obj;
                if (!event) {
                    eventsEvents = othersEvents.events;
                } else {
                    (eventsEvents = {})[event] = othersEvents.events[event];
                }
                for (var eventName in eventsEvents) {
                    var handlers = eventsEvents[eventName] || [];
                    i = 0;
                    while (i < handlers.length) {
                        if (handler && handler === handlers[i] || !handler) {
                            canEvent.off.call(other, eventName, handlers[i]);
                            handlers.splice(i, 1);
                        } else {
                            i++;
                        }
                    }
                    if (!handlers.length) {
                        delete othersEvents.events[eventName];
                    }
                }
                if (isEmptyObject(othersEvents.events)) {
                    delete idedEvents[cid];
                }
            }
            return this;
        }
    };
    canEvent.addEvent = canEvent.bind = function () {
        return canEvent.addEventListener.apply(this, arguments);
    };
    canEvent.unbind = canEvent.removeEvent = function () {
        return canEvent.removeEventListener.apply(this, arguments);
    };
    canEvent.delegate = canEvent.on;
    canEvent.undelegate = canEvent.off;
    canEvent.dispatch = canEvent.dispatchSync;
    Object.defineProperty(canEvent, 'makeHandlerArgs', {
        enumerable: false,
        value: makeHandlerArgs
    });
    Object.defineProperty(canEvent, 'handlers', {
        enumerable: false,
        value: getHandlers
    });
    Object.defineProperty(canEvent, 'flush', {
        enumerable: false,
        writable: true,
        value: function () {
        }
    });
    module.exports = namespace.event = canEvent;
});
/*can-util@3.14.0#js/last/last*/
define('can-util@3.14.0#js/last/last', [
    'require',
    'exports',
    'module',
    'can-namespace'
], function (require, exports, module) {
    'use strict';
    var namespace = require('can-namespace');
    module.exports = namespace.last = function (arr) {
        return arr && arr[arr.length - 1];
    };
});
/*can-util@3.14.0#js/dev/dev*/
define('can-util@3.14.0#js/dev/dev', [
    'require',
    'exports',
    'module',
    'can-namespace',
    'can-log/dev/dev'
], function (require, exports, module) {
    'use strict';
    var namespace = require('can-namespace');
    if (process.env.NODE_ENV !== 'production') {
    }
    module.exports = namespace.dev = require('can-log/dev/dev');
});
/*can-util@3.14.0#js/log/log*/
define('can-util@3.14.0#js/log/log', [
    'require',
    'exports',
    'module',
    'can-log'
], function (require, exports, module) {
    'use strict';
    if (process.env.NODE_ENV !== 'production') {
    }
    module.exports = require('can-log');
});
/*can-event@3.7.7#batch/batch*/
define('can-event@3.7.7#batch/batch', [
    'require',
    'exports',
    'module',
    '../can-event',
    'can-util/js/last/last',
    'can-namespace',
    'can-types',
    'can-util/js/dev/dev',
    'can-util/js/log/log'
], function (require, exports, module) {
    'use strict';
    var canEvent = require('../can-event');
    var last = require('can-util/js/last/last');
    var namespace = require('can-namespace');
    var canTypes = require('can-types');
    var canDev = require('can-util/js/dev/dev');
    var canLog = require('can-util/js/log/log');
    var consoleDefined = typeof console !== 'undefined';
    var group = consoleDefined && console.group && console.group.bind(console) || function () {
    };
    var groupEnd = consoleDefined && console.groupEnd && console.groupEnd.bind(console) || function () {
    };
    var batchNum = 1, collectionQueue = null, queues = [], dispatchingQueues = false, makeHandlerArgs = canEvent.makeHandlerArgs, getHandlers = canEvent.handlers;
    function addToCollectionQueue(item, event, args, handlers) {
        var handlerArgs = makeHandlerArgs(event, args);
        var tasks = [];
        for (var i = 0, len = handlers.length; i < len; i++) {
            tasks[i] = [
                handlers[i],
                item,
                handlerArgs
            ];
        }
        [].push.apply(collectionQueue.tasks, tasks);
    }
    var canBatch = {
        missingStopWarningTimeout: 5000,
        transactions: 0,
        start: function (batchStopHandler) {
            canBatch.transactions++;
            if (canBatch.transactions === 1) {
                var queue = {
                    number: batchNum++,
                    index: 0,
                    tasks: [],
                    batchEnded: false,
                    callbacksIndex: 0,
                    callbacks: [],
                    complete: false
                };
                var setupWarning = function () {
                    setTimeout(function () {
                        if (queue.complete === false) {
                            canDev.warn('can-event/batch/batch: start called without corresponding stop');
                        }
                    }, canBatch.missingStopWarningTimeout);
                };
                if (typeof CanZone !== 'undefined') {
                    CanZone.ignore(setupWarning)();
                } else {
                    setupWarning();
                }
                if (batchStopHandler) {
                    queue.callbacks.push(batchStopHandler);
                }
                collectionQueue = queue;
            }
        },
        collecting: function () {
            return collectionQueue;
        },
        dispatching: function () {
            return queues[0];
        },
        stop: function (force, callStart) {
            if (force) {
                canBatch.transactions = 0;
            } else {
                canBatch.transactions--;
            }
            if (canBatch.transactions === 0) {
                queues.push(collectionQueue);
                collectionQueue = null;
                if (!dispatchingQueues) {
                    canEvent.flush();
                }
            }
        },
        flush: function () {
            var debug = canDev.logLevel >= 1;
            dispatchingQueues = true;
            while (queues.length) {
                var queue = queues[0];
                var tasks = queue.tasks, callbacks = queue.callbacks;
                canBatch.batchNum = queue.number;
                var len = tasks.length;
                if (debug && queue.index === 0 && queue.index < len) {
                    group('batch running ' + queue.number);
                }
                while (queue.index < len) {
                    var task = tasks[queue.index++];
                    if (debug) {
                        var context = task[1];
                        var args = task[2];
                        if (args && args[0]) {
                            canLog.log('dispatching', args[0].type, 'on', context);
                        }
                    }
                    task[0].apply(task[1], task[2]);
                }
                if (!queue.batchEnded) {
                    if (debug) {
                        canLog.log('tasks ended');
                    }
                    queue.batchEnded = true;
                    canEvent.dispatchSync.call(canBatch, 'batchEnd', [queue.number]);
                }
                if (debug && queue.callbacksIndex < callbacks.length) {
                    canLog.log('calling callbacks');
                }
                while (queue.callbacksIndex < callbacks.length) {
                    callbacks[queue.callbacksIndex++]();
                }
                if (!queue.complete) {
                    queue.complete = true;
                    canBatch.batchNum = undefined;
                    queues.shift();
                    if (debug) {
                        groupEnd();
                    }
                }
            }
            dispatchingQueues = false;
        },
        dispatch: function (event, args) {
            if (arguments.length > 2) {
                canDev.warn('Arguments to dispatch should be an array, not multiple arguments.');
                args = Array.prototype.slice.call(arguments, 1);
            }
            if (args && !Array.isArray(args)) {
                canDev.warn('Arguments to dispatch should be an array.');
                args = [args];
            }
            var item = this, handlers;
            if (!item.__inSetup) {
                event = typeof event === 'string' ? { type: event } : event;
                if (event.batchNum) {
                    canBatch.batchNum = event.batchNum;
                    canEvent.dispatchSync.call(item, event, args);
                } else if (collectionQueue) {
                    handlers = getHandlers.call(this, event.type);
                    if (handlers) {
                        event.batchNum = collectionQueue.number;
                        addToCollectionQueue(item, event, args, handlers);
                    }
                } else if (queues.length) {
                    handlers = getHandlers.call(this, event.type);
                    if (handlers) {
                        canBatch.start();
                        event.batchNum = collectionQueue.number;
                        addToCollectionQueue(item, event, args, handlers);
                        last(queues).callbacks.push(canBatch.stop);
                    }
                } else {
                    handlers = getHandlers.call(this, event.type);
                    if (handlers) {
                        canBatch.start();
                        event.batchNum = collectionQueue.number;
                        addToCollectionQueue(item, event, args, handlers);
                        canBatch.stop();
                    }
                }
            }
        },
        queue: function (task, inCurrentBatch) {
            if (collectionQueue) {
                collectionQueue.tasks.push(task);
            } else if (queues.length) {
                if (inCurrentBatch && queues[0].index < queues.tasks.length) {
                    queues[0].tasks.push(task);
                } else {
                    canBatch.start();
                    collectionQueue.tasks.push(task);
                    last(queues).callbacks.push(canBatch.stop);
                }
            } else {
                canBatch.start();
                collectionQueue.tasks.push(task);
                canBatch.stop();
            }
        },
        queues: function () {
            return queues;
        },
        afterPreviousEvents: function (handler) {
            this.queue([handler]);
        },
        after: function (handler) {
            var queue = collectionQueue || queues[0];
            if (queue) {
                queue.callbacks.push(handler);
            } else {
                handler({});
            }
        }
    };
    Object.defineProperty(canBatch, 'debounce', {
        enumerable: false,
        value: function (handler) {
            var that = null;
            var args = null;
            return function () {
                if (!that) {
                    canEvent.addEventListener.call(canBatch, 'batchEnd', function listener() {
                        canEvent.removeEventListener.call(canBatch, 'batchEnd', listener);
                        handler.apply(that, args);
                        that = null;
                        args = null;
                    });
                }
                that = this;
                args = arguments;
            };
        }
    });
    canEvent.flush = canBatch.flush;
    canEvent.dispatch = canBatch.dispatch;
    canBatch.trigger = function () {
        canLog.warn('use canEvent.dispatch instead');
        return canEvent.dispatch.apply(this, arguments);
    };
    canTypes.queueTask = canBatch.queue;
    if (namespace.batch) {
        throw new Error('You can\'t have two versions of can-event/batch/batch, check your dependencies');
    } else {
        module.exports = namespace.batch = canBatch;
    }
});
/*can-util@3.14.0#js/assign/assign*/
define('can-util@3.14.0#js/assign/assign', [
    'require',
    'exports',
    'module',
    'can-namespace',
    'can-assign'
], function (require, exports, module) {
    'use strict';
    var namespace = require('can-namespace');
    if (process.env.NODE_ENV !== 'production') {
    }
    module.exports = namespace.assign = require('can-assign');
});
/*can-util@3.14.0#js/cid-set/cid-set*/
define('can-util@3.14.0#js/cid-set/cid-set', [
    'require',
    'exports',
    'module',
    'can-cid/set/set'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        if (process.env.NODE_ENV !== 'production') {
        }
        module.exports = require('can-cid/set/set');
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-observation@3.3.6#can-observation*/
define('can-observation@3.3.6#can-observation', [
    'require',
    'exports',
    'module',
    'can-event',
    'can-event',
    'can-event/batch/batch',
    'can-util/js/assign/assign',
    'can-util/js/is-empty-object/is-empty-object',
    'can-namespace',
    'can-util/js/log/log',
    'can-reflect',
    'can-symbol',
    'can-cid',
    'can-util/js/cid-map/cid-map',
    'can-util/js/cid-set/cid-set'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        require('can-event');
        var canEvent = require('can-event');
        var canBatch = require('can-event/batch/batch');
        var assign = require('can-util/js/assign/assign');
        var isEmptyObject = require('can-util/js/is-empty-object/is-empty-object');
        var namespace = require('can-namespace');
        var canLog = require('can-util/js/log/log');
        var canReflect = require('can-reflect');
        var canSymbol = require('can-symbol');
        var CID = require('can-cid');
        var CIDMap = require('can-util/js/cid-map/cid-map');
        var CIDSet = require('can-util/js/cid-set/cid-set');
        function Observation(func, context, compute) {
            this.newObserved = {};
            this.oldObserved = null;
            this.func = func;
            this.context = context;
            this.compute = compute && (compute.updater || 'isObservable' in compute) ? compute : { updater: compute };
            this.isObservable = typeof compute === 'object' ? compute.isObservable : true;
            var observation = this;
            this.onDependencyChange = function (value, legacyValue) {
                observation.dependencyChange(this, value, legacyValue);
            };
            this.ignore = 0;
            this.needsUpdate = false;
            this.handlers = null;
            CID(this);
        }
        var observationStack = [];
        Observation.observationStack = observationStack;
        var remaining = {
            updates: 0,
            notifications: 0
        };
        Observation.remaining = remaining;
        assign(Observation.prototype, {
            get: function () {
                if (this.isObservable && Observation.isRecording()) {
                    Observation.add(this);
                    if (!this.bound) {
                        Observation.temporarilyBind(this);
                    }
                }
                if (this.bound === true) {
                    canEvent.flush();
                    if (remaining.updates > 0) {
                        Observation.updateChildrenAndSelf(this);
                    }
                    return this.value;
                } else {
                    return this.func.call(this.context);
                }
            },
            getPrimaryDepth: function () {
                return this.compute._primaryDepth || 0;
            },
            addEdge: function (objEv) {
                if (objEv.event === 'undefined') {
                    canReflect.onValue(objEv.obj, this.onDependencyChange);
                } else {
                    canReflect.onKeyValue(objEv.obj, objEv.event, this.onDependencyChange);
                }
            },
            removeEdge: function (objEv) {
                if (objEv.event === 'undefined') {
                    canReflect.offValue(objEv.obj, this.onDependencyChange);
                } else {
                    canReflect.offKeyValue(objEv.obj, objEv.event, this.onDependencyChange);
                }
            },
            dependencyChange: function () {
                if (this.bound === true) {
                    if (canBatch.batchNum === undefined || canBatch.batchNum !== this.batchNum) {
                        Observation.registerUpdate(this, canBatch.batchNum);
                        this.batchNum = canBatch.batchNum;
                    }
                }
            },
            onDependencyChange: function (value) {
                this.dependencyChange(value);
            },
            update: function (batchNum) {
                if (this.needsUpdate === true) {
                    remaining.updates--;
                }
                this.needsUpdate = false;
                if (this.bound === true) {
                    var oldValue = this.value;
                    this.oldValue = null;
                    this.start();
                    if (oldValue !== this.value) {
                        this.compute.updater(this.value, oldValue, batchNum);
                        return true;
                    }
                }
            },
            getValueAndBind: function () {
                canLog.warn('can-observation: call start instead of getValueAndBind');
                return this.start();
            },
            start: function () {
                this.bound = true;
                this.oldObserved = this.newObserved || {};
                this.ignore = 0;
                this.newObserved = {};
                observationStack.push(this);
                this.value = this.func.call(this.context);
                observationStack.pop();
                this.updateBindings();
            },
            updateBindings: function () {
                var newObserved = this.newObserved, oldObserved = this.oldObserved, name, obEv;
                for (name in newObserved) {
                    obEv = newObserved[name];
                    if (!oldObserved[name]) {
                        this.addEdge(obEv);
                    } else {
                        oldObserved[name] = undefined;
                    }
                }
                for (name in oldObserved) {
                    obEv = oldObserved[name];
                    if (obEv !== undefined) {
                        this.removeEdge(obEv);
                    }
                }
            },
            teardown: function () {
                canLog.warn('can-observation: call stop instead of teardown');
                return this.stop();
            },
            stop: function () {
                this.bound = false;
                for (var name in this.newObserved) {
                    var ob = this.newObserved[name];
                    this.removeEdge(ob);
                }
                this.newObserved = {};
            }
        });
        var updateOrder = [], curPrimaryDepth = Infinity, maxPrimaryDepth = 0, currentBatchNum, isUpdating = false;
        var updateUpdateOrder = function (observation) {
            var primaryDepth = observation.getPrimaryDepth();
            if (primaryDepth < curPrimaryDepth) {
                curPrimaryDepth = primaryDepth;
            }
            if (primaryDepth > maxPrimaryDepth) {
                maxPrimaryDepth = primaryDepth;
            }
            var primary = updateOrder[primaryDepth] || (updateOrder[primaryDepth] = []);
            return primary;
        };
        Observation.registerUpdate = function (observation, batchNum) {
            if (observation.needsUpdate === true) {
                return;
            }
            remaining.updates++;
            observation.needsUpdate = true;
            var objs = updateUpdateOrder(observation);
            objs.push(observation);
        };
        var afterCallbacks = [];
        Observation.updateAndNotify = function (ev, batchNum) {
            currentBatchNum = batchNum;
            if (isUpdating === true) {
                return;
            }
            isUpdating = true;
            while (true) {
                if (curPrimaryDepth <= maxPrimaryDepth) {
                    var primary = updateOrder[curPrimaryDepth];
                    var lastUpdate = primary && primary.pop();
                    if (lastUpdate !== undefined) {
                        lastUpdate.update(currentBatchNum);
                    } else {
                        curPrimaryDepth++;
                    }
                } else {
                    updateOrder = [];
                    curPrimaryDepth = Infinity;
                    maxPrimaryDepth = 0;
                    isUpdating = false;
                    var afterCB = afterCallbacks;
                    afterCallbacks = [];
                    afterCB.forEach(function (cb) {
                        cb();
                    });
                    return;
                }
            }
        };
        canEvent.addEventListener.call(canBatch, 'batchEnd', Observation.updateAndNotify);
        Observation.afterUpdateAndNotify = function (callback) {
            canBatch.after(function () {
                if (isUpdating === true) {
                    afterCallbacks.push(callback);
                } else {
                    callback();
                }
            });
        };
        Observation.updateChildrenAndSelf = function (observation) {
            if (observation.needsUpdate === true) {
                return Observation.unregisterAndUpdate(observation);
            }
            var childHasChanged = false;
            for (var prop in observation.newObserved) {
                if (observation.newObserved[prop].obj.observation) {
                    if (Observation.updateChildrenAndSelf(observation.newObserved[prop].obj.observation)) {
                        childHasChanged = true;
                    }
                }
            }
            if (childHasChanged === true) {
                return observation.update(currentBatchNum);
            }
        };
        Observation.unregisterAndUpdate = function (observation) {
            var primaryDepth = observation.getPrimaryDepth();
            var primary = updateOrder[primaryDepth];
            if (primary !== undefined) {
                var index = primary.indexOf(observation);
                if (index !== -1) {
                    primary.splice(index, 1);
                }
            }
            return observation.update(currentBatchNum);
        };
        Observation.add = function (obj, event) {
            var top = observationStack[observationStack.length - 1];
            if (top !== undefined && !top.ignore) {
                var evStr = event + '', name = obj._cid + '|' + evStr;
                if (top.traps !== undefined) {
                    top.traps.push({
                        obj: obj,
                        event: evStr,
                        name: name
                    });
                } else {
                    top.newObserved[name] = {
                        obj: obj,
                        event: evStr
                    };
                }
            }
        };
        Observation.addAll = function (observes) {
            var top = observationStack[observationStack.length - 1];
            if (top !== undefined) {
                if (top.traps !== undefined) {
                    top.traps.push.apply(top.traps, observes);
                } else {
                    for (var i = 0, len = observes.length; i < len; i++) {
                        var trap = observes[i], name = trap.name;
                        if (top.newObserved[name] === undefined) {
                            top.newObserved[name] = trap;
                        }
                    }
                }
            }
        };
        Observation.ignore = function (fn) {
            return function () {
                if (observationStack.length > 0) {
                    var top = observationStack[observationStack.length - 1];
                    top.ignore++;
                    var res = fn.apply(this, arguments);
                    top.ignore--;
                    return res;
                } else {
                    return fn.apply(this, arguments);
                }
            };
        };
        Observation.trap = function () {
            if (observationStack.length > 0) {
                var top = observationStack[observationStack.length - 1];
                var oldTraps = top.traps;
                var traps = top.traps = [];
                return function () {
                    top.traps = oldTraps;
                    return traps;
                };
            } else {
                return function () {
                    return [];
                };
            }
        };
        Observation.trapsCount = function () {
            if (observationStack.length > 0) {
                var top = observationStack[observationStack.length - 1];
                return top.traps.length;
            } else {
                return 0;
            }
        };
        Observation.isRecording = function () {
            var len = observationStack.length;
            var last = len > 0 && observationStack[len - 1];
            return last && last.ignore === 0;
        };
        var noop = function () {
        };
        var observables;
        var unbindComputes = function () {
            for (var i = 0, len = observables.length; i < len; i++) {
                canReflect.offValue(observables[i], noop);
            }
            observables = null;
        };
        Observation.temporarilyBind = function (compute) {
            var computeInstance = compute.computeInstance || compute;
            canReflect.onValue(computeInstance, noop);
            if (!observables) {
                observables = [];
                setTimeout(unbindComputes, 10);
            }
            observables.push(computeInstance);
        };
        var callHandlers = function (newValue) {
            this.handlers.forEach(function (handler) {
                handler.call(this.compute, newValue);
            }, this);
        };
        canReflect.set(Observation.prototype, canSymbol.for('can.onValue'), function (handler) {
            if (!this.handlers) {
                this.handlers = [];
                if (this.compute.updater) {
                    canLog.warn('can-observation bound to with an existing handler');
                }
                this.compute.updater = callHandlers.bind(this);
            }
            if (!this.handlers.length) {
                this.start();
            }
            this.handlers.push(handler);
        });
        canReflect.set(Observation.prototype, canSymbol.for('can.offValue'), function (handler) {
            if (this.handlers) {
                var index = this.handlers.indexOf(handler);
                this.handlers.splice(index, 1);
                if (this.handlers.length === 0) {
                    this.stop();
                }
            }
        });
        canReflect.set(Observation.prototype, canSymbol.for('can.getValue'), Observation.prototype.get);
        Observation.prototype.hasDependencies = function () {
            return this.bound ? !isEmptyObject(this.newObserved) : undefined;
        };
        canReflect.set(Observation.prototype, canSymbol.for('can.isValueLike'), true);
        canReflect.set(Observation.prototype, canSymbol.for('can.isMapLike'), false);
        canReflect.set(Observation.prototype, canSymbol.for('can.isListLike'), false);
        canReflect.set(Observation.prototype, canSymbol.for('can.valueHasDependencies'), Observation.prototype.hasDependencies);
        canReflect.set(Observation.prototype, canSymbol.for('can.getValueDependencies'), function () {
            var rets;
            if (this.bound === true) {
                rets = {};
                canReflect.eachKey(this.newObserved || {}, function (dep) {
                    if (canReflect.isValueLike(dep.obj)) {
                        rets.valueDependencies = rets.valueDependencies || new CIDSet();
                        rets.valueDependencies.add(dep.obj);
                    } else {
                        rets.keyDependencies = rets.keyDependencies || new CIDMap();
                        if (rets.keyDependencies.get(dep.obj)) {
                            rets.keyDependencies.get(dep.obj).push(dep.event);
                        } else {
                            rets.keyDependencies.set(dep.obj, [dep.event]);
                        }
                    }
                });
            }
            return rets;
        });
        if (namespace.Observation) {
            throw new Error('You can\'t have two versions of can-observation, check your dependencies');
        } else {
            module.exports = namespace.Observation = Observation;
        }
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-util@3.14.0#js/global/global*/
define('can-util@3.14.0#js/global/global', [
    'require',
    'exports',
    'module',
    'can-namespace',
    'can-globals/global/global'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var namespace = require('can-namespace');
        if (process.env.NODE_ENV !== 'production') {
        }
        module.exports = namespace.global = require('can-globals/global/global');
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-view-callbacks@3.2.5#can-view-callbacks*/
define('can-view-callbacks@3.2.5#can-view-callbacks', [
    'require',
    'exports',
    'module',
    'can-observation',
    'can-util/js/dev/dev',
    'can-util/js/global/global',
    'can-util/dom/mutate/mutate',
    'can-namespace'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        var Observation = require('can-observation');
        var dev = require('can-util/js/dev/dev');
        var getGlobal = require('can-util/js/global/global');
        var domMutate = require('can-util/dom/mutate/mutate');
        var namespace = require('can-namespace');
        var requestedAttributes = {};
        var attr = function (attributeName, attrHandler) {
            if (attrHandler) {
                if (typeof attributeName === 'string') {
                    attributes[attributeName] = attrHandler;
                    if (requestedAttributes[attributeName]) {
                        dev.warn('can-view-callbacks: ' + attributeName + ' custom attribute behavior requested before it was defined.  Make sure ' + attributeName + ' is defined before it is needed.');
                    }
                } else {
                    regExpAttributes.push({
                        match: attributeName,
                        handler: attrHandler
                    });
                    Object.keys(requestedAttributes).forEach(function (requested) {
                        if (attributeName.test(requested)) {
                            dev.warn('can-view-callbacks: ' + requested + ' custom attribute behavior requested before it was defined.  Make sure ' + attributeName + ' is defined before it is needed.');
                        }
                    });
                }
            } else {
                var cb = attributes[attributeName];
                if (!cb) {
                    for (var i = 0, len = regExpAttributes.length; i < len; i++) {
                        var attrMatcher = regExpAttributes[i];
                        if (attrMatcher.match.test(attributeName)) {
                            return attrMatcher.handler;
                        }
                    }
                }
                requestedAttributes[attributeName] = true;
                return cb;
            }
        };
        var attributes = {}, regExpAttributes = [], automaticCustomElementCharacters = /[-\:]/;
        var defaultCallback = function () {
        };
        var tag = function (tagName, tagHandler) {
            if (tagHandler) {
                var GLOBAL = getGlobal();
                if (typeof tags[tagName.toLowerCase()] !== 'undefined') {
                    dev.warn('Custom tag: ' + tagName.toLowerCase() + ' is already defined');
                }
                if (!automaticCustomElementCharacters.test(tagName) && tagName !== 'content') {
                    dev.warn('Custom tag: ' + tagName.toLowerCase() + ' hyphen missed');
                }
                if (GLOBAL.html5) {
                    GLOBAL.html5.elements += ' ' + tagName;
                    GLOBAL.html5.shivDocument();
                }
                tags[tagName.toLowerCase()] = tagHandler;
            } else {
                var cb;
                if (tagHandler === null) {
                    delete tags[tagName.toLowerCase()];
                } else {
                    cb = tags[tagName.toLowerCase()];
                }
                if (!cb && automaticCustomElementCharacters.test(tagName)) {
                    cb = defaultCallback;
                }
                return cb;
            }
        };
        var tags = {};
        var callbacks = {
            _tags: tags,
            _attributes: attributes,
            _regExpAttributes: regExpAttributes,
            defaultCallback: defaultCallback,
            tag: tag,
            attr: attr,
            tagHandler: function (el, tagName, tagData) {
                var helperTagCallback = tagData.options.get('tags.' + tagName, { proxyMethods: false }), tagCallback = helperTagCallback || tags[tagName];
                var scope = tagData.scope, res;
                if (tagCallback) {
                    res = Observation.ignore(tagCallback)(el, tagData);
                } else {
                    res = scope;
                }
                if (!tagCallback) {
                    var GLOBAL = getGlobal();
                    var ceConstructor = GLOBAL.document.createElement(tagName).constructor;
                    if (ceConstructor === GLOBAL.HTMLElement || ceConstructor === GLOBAL.HTMLUnknownElement) {
                        dev.warn('can-view-callbacks: No custom element found for ' + tagName);
                    }
                }
                if (res && tagData.subtemplate) {
                    if (scope !== res) {
                        scope = scope.add(res);
                    }
                    var result = tagData.subtemplate(scope, tagData.options);
                    var frag = typeof result === 'string' ? can.view.frag(result) : result;
                    domMutate.appendChild.call(el, frag);
                }
            }
        };
        namespace.view = namespace.view || {};
        if (namespace.view.callbacks) {
            throw new Error('You can\'t have two versions of can-view-callbacks, check your dependencies');
        } else {
            module.exports = namespace.view.callbacks = callbacks;
        }
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-view-live@3.2.6#lib/attrs*/
define('can-view-live@3.2.6#lib/attrs', [
    'require',
    'exports',
    'module',
    './core',
    'can-view-callbacks',
    'can-util/dom/attr/attr',
    'can-util/dom/events/events',
    'can-types',
    'can-reflect'
], function (require, exports, module) {
    var live = require('./core');
    var viewCallbacks = require('can-view-callbacks');
    var attr = require('can-util/dom/attr/attr');
    var domEvents = require('can-util/dom/events/events');
    var types = require('can-types');
    var canReflect = require('can-reflect');
    live.attrs = function (el, compute, scope, options) {
        if (!canReflect.isObservableLike(compute)) {
            var attrs = live.getAttributeParts(compute);
            for (var name in attrs) {
                attr.set(el, name, attrs[name]);
            }
            return;
        }
        var oldAttrs = {};
        var setAttrs = function (newVal) {
            var newAttrs = live.getAttributeParts(newVal), name;
            for (name in newAttrs) {
                var newValue = newAttrs[name], oldValue = oldAttrs[name];
                if (newValue !== oldValue) {
                    attr.set(el, name, newValue);
                    var callback = viewCallbacks.attr(name);
                    if (callback) {
                        callback(el, {
                            attributeName: name,
                            scope: scope,
                            options: options
                        });
                    }
                }
                delete oldAttrs[name];
            }
            for (name in oldAttrs) {
                attr.remove(el, name);
            }
            oldAttrs = newAttrs;
        };
        var handler = function (newVal) {
            setAttrs(newVal);
        };
        canReflect.onValue(compute, handler);
        var teardownHandler = function () {
            canReflect.offValue(compute, handler);
            domEvents.removeEventListener.call(el, 'removed', teardownHandler);
        };
        domEvents.addEventListener.call(el, 'removed', teardownHandler);
        setAttrs(canReflect.getValue(compute));
    };
});
/*can-view-live@3.2.6#lib/html*/
define('can-view-live@3.2.6#lib/html', [
    'require',
    'exports',
    'module',
    './core',
    'can-view-nodelist',
    'can-util/dom/frag/frag',
    'can-util/js/make-array/make-array',
    'can-util/dom/child-nodes/child-nodes',
    'can-reflect'
], function (require, exports, module) {
    var live = require('./core');
    var nodeLists = require('can-view-nodelist');
    var makeFrag = require('can-util/dom/frag/frag');
    var makeArray = require('can-util/js/make-array/make-array');
    var childNodes = require('can-util/dom/child-nodes/child-nodes');
    var canReflect = require('can-reflect');
    live.html = function (el, compute, parentNode, nodeList) {
        var data, makeAndPut, nodes;
        parentNode = live.getParentNode(el, parentNode);
        data = live.listen(parentNode, compute, function (newVal) {
            var attached = nodeLists.first(nodes).parentNode;
            if (attached) {
                makeAndPut(newVal);
            }
            var pn = nodeLists.first(nodes).parentNode;
            data.teardownCheck(pn);
            live.callChildMutationCallback(pn);
        });
        nodes = nodeList || [el];
        makeAndPut = function (val) {
            var isFunction = typeof val === 'function', frag = makeFrag(isFunction ? '' : val), oldNodes = makeArray(nodes);
            live.addTextNodeIfNoChildren(frag);
            oldNodes = nodeLists.update(nodes, childNodes(frag));
            if (isFunction) {
                val(frag.firstChild);
            }
            nodeLists.replace(oldNodes, frag);
        };
        data.nodeList = nodes;
        if (!nodeList) {
            nodeLists.register(nodes, data.teardownCheck);
        } else {
            nodeList.unregistered = data.teardownCheck;
        }
        makeAndPut(canReflect.getValue(compute));
    };
});
/*can-view-live@3.2.6#lib/util/queueFns*/
define('can-view-live@3.2.6#lib/util/queueFns', [
    'require',
    'exports',
    'module',
    'can-observation'
], function (require, exports, module) {
    var Observation = require('can-observation');
    module.exports = function queueFns(fns, primaryDepth) {
        var updateQueue = [], queuedFns = {};
        var updateQueueObservation = {
            needsUpdate: false,
            update: function () {
                for (var i = 0; i < updateQueue.length; i++) {
                    var obj = updateQueue[i];
                    obj.fn.apply(obj.context, obj.args);
                }
                updateQueue = [];
            },
            getPrimaryDepth: function () {
                return primaryDepth || 0;
            }
        };
        var wrapFn = function (fn) {
            return function () {
                updateQueue.push({
                    fn: fn,
                    context: this,
                    args: arguments
                });
                updateQueueObservation.needsUpdate = false;
                Observation.registerUpdate(updateQueueObservation);
            };
        };
        for (var key in fns) {
            queuedFns[key] = wrapFn(fns[key]);
        }
        queuedFns.clear = function () {
            updateQueue = [];
        };
        return queuedFns;
    };
});
/*can-event@3.7.7#lifecycle/lifecycle*/
define('can-event@3.7.7#lifecycle/lifecycle', [
    'require',
    'exports',
    'module',
    'can-event'
], function (require, exports, module) {
    var canEvent = require('can-event');
    var lifecycle = function (prototype) {
        var baseAddEventListener = prototype.addEventListener;
        var baseRemoveEventListener = prototype.removeEventListener;
        prototype.addEventListener = function () {
            var ret = baseAddEventListener.apply(this, arguments);
            if (!this.__inSetup) {
                this.__bindEvents = this.__bindEvents || {};
                if (!this.__bindEvents._lifecycleBindings) {
                    this.__bindEvents._lifecycleBindings = 1;
                    if (this._eventSetup) {
                        this._eventSetup();
                    }
                } else {
                    this.__bindEvents._lifecycleBindings++;
                }
            }
            return ret;
        };
        prototype.removeEventListener = function (event, handler) {
            if (!this.__bindEvents) {
                return this;
            }
            var handlers = this.__bindEvents[event] || [];
            var handlerCount = handlers.length;
            var ret = baseRemoveEventListener.apply(this, arguments);
            if (this.__bindEvents._lifecycleBindings === null) {
                this.__bindEvents._lifecycleBindings = 0;
            } else {
                this.__bindEvents._lifecycleBindings -= handlerCount - handlers.length;
            }
            if (!this.__bindEvents._lifecycleBindings && this._eventTeardown) {
                this._eventTeardown();
            }
            return ret;
        };
        return prototype;
    };
    var baseEvents = lifecycle({
        addEventListener: canEvent.addEventListener,
        removeEventListener: canEvent.removeEventListener
    });
    lifecycle.addAndSetup = baseEvents.addEventListener;
    lifecycle.removeAndTeardown = baseEvents.removeEventListener;
    module.exports = lifecycle;
});
/*can-namespace@1.0.0#can-namespace*/
define('can-namespace@1.0.0#can-namespace', function (require, exports, module) {
    module.exports = {};
});
/*can-reflect-promise@1.1.5#can-reflect-promise*/
define('can-reflect-promise@1.1.5#can-reflect-promise', [
    'require',
    'exports',
    'module',
    'can-reflect',
    'can-symbol',
    'can-util/js/dev/dev',
    'can-observation',
    'can-cid',
    'can-util/js/assign/assign',
    'can-event',
    'can-util/js/single-reference/single-reference'
], function (require, exports, module) {
    var canReflect = require('can-reflect');
    var canSymbol = require('can-symbol');
    var dev = require('can-util/js/dev/dev');
    var Observation = require('can-observation');
    var CID = require('can-cid');
    var assign = require('can-util/js/assign/assign');
    var canEvent = require('can-event');
    var singleReference = require('can-util/js/single-reference/single-reference');
    var getValueSymbol = canSymbol.for('can.getValue'), getKeyValueSymbol = canSymbol.for('can.getKeyValue'), onValueSymbol = canSymbol.for('can.onValue'), onKeyValueSymbol = canSymbol.for('can.onKeyValue'), offKeyValueSymbol = canSymbol.for('can.offKeyValue'), observeDataSymbol = canSymbol.for('can.observeData');
    var promiseDataPrototype = {
        isPending: true,
        state: 'pending',
        isResolved: false,
        isRejected: false,
        value: undefined,
        reason: undefined
    };
    assign(promiseDataPrototype, canEvent);
    canReflect.set(promiseDataPrototype, onKeyValueSymbol, function (key, handler) {
        var observeData = this;
        var translated = function () {
            handler(observeData[key]);
        };
        singleReference.set(handler, this, translated, key);
        canEvent.on.call(this, 'state', translated);
    });
    canReflect.set(promiseDataPrototype, offKeyValueSymbol, function (key, handler) {
        var translated = singleReference.getAndDelete(handler, this, key);
        canEvent.off.call(this, 'state', translated);
    });
    function initPromise(promise) {
        var observeData = promise[observeDataSymbol];
        if (!observeData) {
            Object.defineProperty(promise, observeDataSymbol, {
                enumerable: false,
                configurable: false,
                writable: false,
                value: Object.create(promiseDataPrototype)
            });
            observeData = promise[observeDataSymbol];
            CID(observeData);
        }
        promise.then(function (value) {
            observeData.isPending = false;
            observeData.isResolved = true;
            observeData.value = value;
            observeData.state = 'resolved';
            observeData.dispatch('state', [
                'resolved',
                'pending'
            ]);
        }, function (reason) {
            observeData.isPending = false;
            observeData.isRejected = true;
            observeData.reason = reason;
            observeData.state = 'rejected';
            observeData.dispatch('state', [
                'rejected',
                'pending'
            ]);
            dev.error('Failed promise:', reason);
        });
    }
    function setupPromise(value) {
        var oldPromiseFn;
        var proto = 'getPrototypeOf' in Object ? Object.getPrototypeOf(value) : value.__proto__;
        if (value[getKeyValueSymbol] && value[observeDataSymbol]) {
            return;
        }
        if (proto === null || proto === Object.prototype) {
            proto = value;
            if (typeof proto.promise === 'function') {
                oldPromiseFn = proto.promise;
                proto.promise = function () {
                    var result = oldPromiseFn.call(proto);
                    setupPromise(result);
                    return result;
                };
            }
        }
        [
            getKeyValueSymbol,
            function (key) {
                if (!this[observeDataSymbol]) {
                    initPromise(this);
                }
                Observation.add(this[observeDataSymbol], 'state');
                switch (key) {
                case 'state':
                case 'isPending':
                case 'isResolved':
                case 'isRejected':
                case 'value':
                case 'reason':
                    return this[observeDataSymbol][key];
                default:
                    return this[key];
                }
            },
            getValueSymbol,
            function () {
                return this[getKeyValueSymbol]('value');
            },
            canSymbol.for('can.isValueLike'),
            false,
            onValueSymbol,
            function (handler) {
                return this[onKeyValueSymbol]('value', handler);
            },
            onKeyValueSymbol,
            function (key, handler) {
                if (!this[observeDataSymbol]) {
                    initPromise(this);
                }
                var promise = this;
                var translated = function () {
                    handler(promise[getKeyValueSymbol](key));
                };
                singleReference.set(handler, this, translated, key);
                canEvent.on.call(this[observeDataSymbol], 'state', translated);
            },
            canSymbol.for('can.offValue'),
            function (handler) {
                return this[offKeyValueSymbol]('value', handler);
            },
            offKeyValueSymbol,
            function (key, handler) {
                var translated = singleReference.getAndDelete(handler, this, key);
                if (translated) {
                    canEvent.off.call(this[observeDataSymbol], 'state', translated);
                }
            }
        ].forEach(function (symbol, index, list) {
            if (index % 2 === 0) {
                canReflect.set(proto, symbol, list[index + 1]);
            }
        });
    }
    module.exports = setupPromise;
});
/*can-stache-key@0.1.4#can-stache-key*/
define('can-stache-key@0.1.4#can-stache-key', [
    'require',
    'exports',
    'module',
    'can-observation',
    'can-log/dev/dev',
    'can-util/js/each/each',
    'can-symbol',
    'can-reflect',
    'can-util/js/is-promise-like/is-promise-like',
    'can-reflect-promise'
], function (require, exports, module) {
    var Observation = require('can-observation');
    var dev = require('can-log/dev/dev');
    var each = require('can-util/js/each/each');
    var canSymbol = require('can-symbol');
    var canReflect = require('can-reflect');
    var isPromiseLike = require('can-util/js/is-promise-like/is-promise-like');
    var canReflectPromise = require('can-reflect-promise');
    var getValueSymbol = canSymbol.for('can.getValue');
    var setValueSymbol = canSymbol.for('can.setValue');
    var isValueLikeSymbol = canSymbol.for('can.isValueLike');
    var observeReader;
    var isAt = function (index, reads) {
        var prevRead = reads[index - 1];
        return prevRead && prevRead.at;
    };
    var readValue = function (value, index, reads, options, state, prev) {
        var usedValueReader;
        do {
            usedValueReader = false;
            for (var i = 0, len = observeReader.valueReaders.length; i < len; i++) {
                if (observeReader.valueReaders[i].test(value, index, reads, options)) {
                    value = observeReader.valueReaders[i].read(value, index, reads, options, state, prev);
                }
            }
        } while (usedValueReader);
        return value;
    };
    var specialRead = {
        index: true,
        key: true,
        event: true,
        element: true,
        viewModel: true
    };
    var checkForObservableAndNotify = function (options, state, getObserves, value, index) {
        if (options.foundObservable && !state.foundObservable) {
            if (Observation.trapsCount()) {
                Observation.addAll(getObserves());
                options.foundObservable(value, index);
                state.foundObservable = true;
            }
        }
    };
    observeReader = {
        read: function (parent, reads, options) {
            options = options || {};
            var state = { foundObservable: false };
            var getObserves;
            if (options.foundObservable) {
                getObserves = Observation.trap();
            }
            var cur = readValue(parent, 0, reads, options, state), type, prev, readLength = reads.length, i = 0, last;
            checkForObservableAndNotify(options, state, getObserves, parent, 0);
            while (i < readLength) {
                prev = cur;
                for (var r = 0, readersLength = observeReader.propertyReaders.length; r < readersLength; r++) {
                    var reader = observeReader.propertyReaders[r];
                    if (reader.test(cur)) {
                        cur = reader.read(cur, reads[i], i, options, state);
                        break;
                    }
                }
                checkForObservableAndNotify(options, state, getObserves, prev, i);
                last = cur;
                i = i + 1;
                cur = readValue(cur, i, reads, options, state, prev);
                checkForObservableAndNotify(options, state, getObserves, prev, i - 1);
                type = typeof cur;
                if (i < reads.length && (cur === null || cur === undefined)) {
                    if (options.earlyExit) {
                        options.earlyExit(prev, i - 1, cur);
                    }
                    return {
                        value: undefined,
                        parent: prev
                    };
                }
            }
            if (cur === undefined) {
                if (options.earlyExit) {
                    options.earlyExit(prev, i - 1);
                }
            }
            return {
                value: cur,
                parent: prev
            };
        },
        get: function (parent, reads, options) {
            return observeReader.read(parent, observeReader.reads(reads), options || {}).value;
        },
        valueReadersMap: {},
        valueReaders: [
            {
                name: 'function',
                test: function (value) {
                    return value && canReflect.isFunctionLike(value) && !canReflect.isConstructorLike(value);
                },
                read: function (value, i, reads, options, state, prev) {
                    if (isAt(i, reads)) {
                        return i === reads.length ? value.bind(prev) : value;
                    }
                    var showWarning = function () {
                        dev.warn((options.filename ? options.filename + ':' : '') + (options.lineNumber ? options.lineNumber + ': ' : '') + '"' + reads[0].key + '" is being called as a function.\n' + '\tThis will not happen automatically in an upcoming release.\n' + '\tYou should call it explicitly using "' + reads[0].key + '()".\n\n');
                    };
                    if (options.callMethodsOnObservables && canReflect.isObservableLike(prev) && canReflect.isMapLike(prev)) {
                        showWarning();
                        return value.apply(prev, options.args || []);
                    } else if (options.isArgument && i === reads.length) {
                        if (options.proxyMethods === false) {
                            return value;
                        }
                        showWarning();
                        return value.bind(prev);
                    }
                    showWarning();
                    return value.apply(prev, options.args || []);
                }
            },
            {
                name: 'isValueLike',
                test: function (value, i, reads, options) {
                    return value && value[getValueSymbol] && value[isValueLikeSymbol] !== false && (options.foundAt || !isAt(i, reads));
                },
                read: function (value, i, reads, options) {
                    if (options.readCompute === false && i === reads.length) {
                        return value;
                    }
                    return canReflect.getValue(value);
                },
                write: function (base, newVal) {
                    if (base[setValueSymbol]) {
                        base[setValueSymbol](newVal);
                    } else if (base.set) {
                        base.set(newVal);
                    } else {
                        base(newVal);
                    }
                }
            }
        ],
        propertyReadersMap: {},
        propertyReaders: [
            {
                name: 'map',
                test: function (value) {
                    if (isPromiseLike(value) || typeof value === 'object' && value && typeof value.then === 'function') {
                        canReflectPromise(value);
                    }
                    return canReflect.isObservableLike(value) && canReflect.isMapLike(value);
                },
                read: function (value, prop) {
                    var res = canReflect.getKeyValue(value, prop.key);
                    if (res !== undefined) {
                        return res;
                    } else {
                        return value[prop.key];
                    }
                },
                write: canReflect.setKeyValue
            },
            {
                name: 'object',
                test: function () {
                    return true;
                },
                read: function (value, prop, i, options) {
                    if (value == null) {
                        return undefined;
                    } else {
                        if (typeof value === 'object') {
                            if (prop.key in value) {
                                return value[prop.key];
                            } else if (prop.at && specialRead[prop.key] && '@' + prop.key in value) {
                                options.foundAt = true;
                                dev.warn('Use %' + prop.key + ' in place of @' + prop.key + '.');
                                return value['@' + prop.key];
                            }
                        } else {
                            return value[prop.key];
                        }
                    }
                },
                write: function (base, prop, newVal) {
                    base[prop] = newVal;
                }
            }
        ],
        reads: function (keyArg) {
            var key = '' + keyArg;
            var keys = [];
            var last = 0;
            var at = false;
            if (key.charAt(0) === '@') {
                last = 1;
                at = true;
            }
            var keyToAdd = '';
            for (var i = last; i < key.length; i++) {
                var character = key.charAt(i);
                if (character === '.' || character === '@') {
                    if (key.charAt(i - 1) !== '\\') {
                        keys.push({
                            key: keyToAdd,
                            at: at
                        });
                        at = character === '@';
                        keyToAdd = '';
                    } else {
                        keyToAdd = keyToAdd.substr(0, keyToAdd.length - 1) + '.';
                    }
                } else {
                    keyToAdd += character;
                }
            }
            keys.push({
                key: keyToAdd,
                at: at
            });
            return keys;
        },
        write: function (parent, key, value, options) {
            var keys = typeof key === 'string' ? observeReader.reads(key) : key;
            var last;
            options = options || {};
            if (keys.length > 1) {
                last = keys.pop();
                parent = observeReader.read(parent, keys, options).value;
                keys.push(last);
            } else {
                last = keys[0];
            }
            if (observeReader.valueReadersMap.isValueLike.test(parent[last.key], keys.length - 1, keys, options)) {
                observeReader.valueReadersMap.isValueLike.write(parent[last.key], value, options);
            } else {
                if (observeReader.valueReadersMap.isValueLike.test(parent, keys.length - 1, keys, options)) {
                    parent = parent[getValueSymbol]();
                }
                if (observeReader.propertyReadersMap.map.test(parent)) {
                    observeReader.propertyReadersMap.map.write(parent, last.key, value, options);
                } else if (observeReader.propertyReadersMap.object.test(parent)) {
                    observeReader.propertyReadersMap.object.write(parent, last.key, value, options);
                    if (options.observation) {
                        options.observation.update();
                    }
                }
            }
        }
    };
    each(observeReader.propertyReaders, function (reader) {
        observeReader.propertyReadersMap[reader.name] = reader;
    });
    each(observeReader.valueReaders, function (reader) {
        observeReader.valueReadersMap[reader.name] = reader;
    });
    observeReader.set = observeReader.write;
    module.exports = observeReader;
});
/*can-compute@3.3.10#proto-compute*/
define('can-compute@3.3.10#proto-compute', [
    'require',
    'exports',
    'module',
    'can-observation',
    'can-event',
    'can-event/lifecycle/lifecycle',
    'can-event/batch/batch',
    'can-stache-key',
    'can-util/js/get/get',
    'can-cid',
    'can-util/js/assign/assign',
    'can-util/js/log/log',
    'can-reflect',
    'can-symbol',
    'can-util/js/cid-set/cid-set',
    'can-util/js/single-reference/single-reference'
], function (require, exports, module) {
    var Observation = require('can-observation');
    var canEvent = require('can-event');
    var eventLifecycle = require('can-event/lifecycle/lifecycle');
    require('can-event/batch/batch');
    var observeReader = require('can-stache-key');
    var getObject = require('can-util/js/get/get');
    var CID = require('can-cid');
    var assign = require('can-util/js/assign/assign');
    var canLog = require('can-util/js/log/log');
    var canReflect = require('can-reflect');
    var canSymbol = require('can-symbol');
    var CIDSet = require('can-util/js/cid-set/cid-set');
    var singleReference = require('can-util/js/single-reference/single-reference');
    var Compute = function (getterSetter, context, eventName, bindOnce) {
        CID(this, 'compute');
        var args = [];
        for (var i = 0, arglen = arguments.length; i < arglen; i++) {
            args[i] = arguments[i];
        }
        var contextType = typeof args[1];
        if (typeof args[0] === 'function') {
            this._setupGetterSetterFn(args[0], args[1], args[2], args[3]);
        } else if (args[1] !== undefined) {
            if (contextType === 'string' || contextType === 'number') {
                var isListLike = canReflect.isObservableLike(args[0]) && canReflect.isListLike(args[0]);
                var isMapLike = canReflect.isObservableLike(args[0]) && canReflect.isMapLike(args[0]);
                if (isMapLike || isListLike) {
                    var map = args[0];
                    var propertyName = args[1];
                    var mapGetterSetter = function (newValue) {
                        if (arguments.length) {
                            observeReader.set(map, propertyName, newValue);
                        } else {
                            if (isListLike) {
                                observeReader.get(map, 'length');
                            }
                            return observeReader.get(map, '' + propertyName);
                        }
                    };
                    this._setupGetterSetterFn(mapGetterSetter, args[1], args[2], args[3]);
                } else {
                    this._setupProperty(args[0], args[1], args[2]);
                }
            } else if (contextType === 'function') {
                this._setupSetter(args[0], args[1], args[2]);
            } else {
                if (args[1] && args[1].fn) {
                    this._setupAsyncCompute(args[0], args[1]);
                } else {
                    this._setupSettings(args[0], args[1]);
                }
            }
        } else {
            this._setupSimpleValue(args[0]);
        }
        this._args = args;
        this._primaryDepth = 0;
        this.isComputed = true;
    };
    var updateOnChange = function (compute, newValue, oldValue, batchNum) {
        var valueChanged = newValue !== oldValue && !(newValue !== newValue && oldValue !== oldValue);
        if (valueChanged) {
            canEvent.dispatch.call(compute, {
                type: 'change',
                batchNum: batchNum
            }, [
                newValue,
                oldValue
            ]);
        }
    };
    var setupComputeHandlers = function (compute, func, context) {
        var observation = new Observation(func, context, compute);
        compute.observation = observation;
        return {
            _on: function () {
                observation.start();
                compute.value = observation.value;
            },
            _off: function () {
                observation.stop();
            },
            getDepth: function () {
                return observation.getDepth();
            }
        };
    };
    assign(Compute.prototype, {
        setPrimaryDepth: function (depth) {
            this._primaryDepth = depth;
        },
        _setupGetterSetterFn: function (getterSetter, context, eventName) {
            this._set = context ? getterSetter.bind(context) : getterSetter;
            this._get = context ? getterSetter.bind(context) : getterSetter;
            this._canObserve = eventName === false ? false : true;
            var handlers = setupComputeHandlers(this, getterSetter, context || this);
            assign(this, handlers);
        },
        _setupProperty: function (target, propertyName, eventName) {
            var self = this, handler;
            handler = function () {
                self.updater(self._get(), self.value);
            };
            this._get = function () {
                return getObject(target, propertyName);
            };
            this._set = function (value) {
                var properties = propertyName.split('.'), leafPropertyName = properties.pop();
                if (properties.length) {
                    var targetProperty = getObject(target, properties.join('.'));
                    targetProperty[leafPropertyName] = value;
                } else {
                    target[propertyName] = value;
                }
            };
            this._on = function (update) {
                canEvent.on.call(target, eventName || propertyName, handler);
                this.value = this._get();
            };
            this._off = function () {
                return canEvent.off.call(target, eventName || propertyName, handler);
            };
        },
        _setupSetter: function (initialValue, setter, eventName) {
            this.value = initialValue;
            this._set = setter;
            assign(this, eventName);
        },
        _setupSettings: function (initialValue, settings) {
            this.value = initialValue;
            this._set = settings.set || this._set;
            this._get = settings.get || this._get;
            if (!settings.__selfUpdater) {
                var self = this, oldUpdater = this.updater;
                this.updater = function () {
                    oldUpdater.call(self, self._get(), self.value);
                };
            }
            this._on = settings.on ? settings.on : this._on;
            this._off = settings.off ? settings.off : this._off;
        },
        _setupAsyncCompute: function (initialValue, settings) {
            var self = this;
            var getter = settings.fn;
            var bindings;
            this.value = initialValue;
            this._setUpdates = true;
            this.lastSetValue = new Compute(initialValue);
            this._set = function (newVal) {
                if (newVal === self.lastSetValue.get()) {
                    return this.value;
                }
                return self.lastSetValue.set(newVal);
            };
            this._get = function () {
                return getter.call(settings.context, self.lastSetValue.get());
            };
            if (getter.length === 0) {
                bindings = setupComputeHandlers(this, getter, settings.context);
            } else if (getter.length === 1) {
                bindings = setupComputeHandlers(this, function () {
                    return getter.call(settings.context, self.lastSetValue.get());
                }, settings);
            } else {
                var oldUpdater = this.updater, resolve = Observation.ignore(function (newVal) {
                        oldUpdater.call(self, newVal, self.value);
                    });
                this.updater = function (newVal) {
                    oldUpdater.call(self, newVal, self.value);
                };
                bindings = setupComputeHandlers(this, function () {
                    var res = getter.call(settings.context, self.lastSetValue.get(), resolve);
                    return res !== undefined ? res : this.value;
                }, this);
            }
            assign(this, bindings);
        },
        _setupSimpleValue: function (initialValue) {
            this.value = initialValue;
        },
        _eventSetup: Observation.ignore(function () {
            this.bound = true;
            this._on(this.updater);
        }),
        _eventTeardown: function () {
            this._off(this.updater);
            this.bound = false;
        },
        addEventListener: eventLifecycle.addAndSetup,
        removeEventListener: eventLifecycle.removeAndTeardown,
        clone: function (context) {
            if (context && typeof this._args[0] === 'function') {
                this._args[1] = context;
            } else if (context) {
                this._args[2] = context;
            }
            return new Compute(this._args[0], this._args[1], this._args[2], this._args[3]);
        },
        _on: function () {
        },
        _off: function () {
        },
        get: function () {
            var recordingObservation = Observation.isRecording();
            if (recordingObservation && this._canObserve !== false) {
                Observation.add(this, 'change');
                if (!this.bound) {
                    Compute.temporarilyBind(this);
                }
            }
            if (this.bound) {
                if (this.observation) {
                    return this.observation.get();
                } else {
                    return this.value;
                }
            } else {
                return this._get();
            }
        },
        _get: function () {
            return this.value;
        },
        set: function (newVal) {
            var old = this.value;
            var setVal = this._set(newVal, old);
            if (this._setUpdates) {
                return this.value;
            }
            if (this.hasDependencies) {
                return this._get();
            }
            this.updater(setVal === undefined ? this._get() : setVal, old);
            return this.value;
        },
        _set: function (newVal) {
            return this.value = newVal;
        },
        updater: function (newVal, oldVal, batchNum) {
            this.value = newVal;
            if (this.observation) {
                this.observation.value = newVal;
            }
            updateOnChange(this, newVal, oldVal, batchNum);
        },
        toFunction: function () {
            return this._computeFn.bind(this);
        },
        _computeFn: function (newVal) {
            if (arguments.length) {
                return this.set(newVal);
            }
            return this.get();
        },
        trace: function () {
            var me = {
                computeValue: this.get(),
                definition: this.observation && this.observation.func,
                cid: this._cid
            };
            if (this.observation) {
                var deps = [];
                for (var name in this.observation.newObserved) {
                    var obs = assign({}, this.observation.newObserved[name]);
                    if (obs.obj.isComputed) {
                        deps.push(obs.obj.trace());
                    } else {
                        deps.push(obs);
                    }
                }
                me.dependencies = deps;
            }
            return me;
        },
        log: function () {
            var log = function (trace) {
                var currentTrace = '';
                if (trace.dependencies && trace.dependencies.length) {
                    currentTrace = trace.cid + ' = ' + trace.computeValue;
                    if (typeof console !== 'undefined' && console.group) {
                        console.group(currentTrace);
                    } else {
                        canLog.log(currentTrace);
                    }
                    trace.dependencies.forEach(function (dep) {
                        if (dep.hasOwnProperty('computeValue')) {
                            log(dep);
                        } else {
                            canLog.log(dep.obj, dep.event);
                        }
                    });
                    if (typeof console !== 'undefined' && console.groupEnd) {
                        console.groupEnd();
                    }
                } else {
                    canLog.log(trace.cid + ' - ' + trace.computeValue);
                }
                return trace;
            };
            return log(this.trace());
        }
    });
    var hasDependencies = function () {
        return this.observation && this.observation.hasDependencies();
    };
    Object.defineProperty(Compute.prototype, 'hasDependencies', { get: hasDependencies });
    canReflect.set(Compute.prototype, canSymbol.for('can.valueHasDependencies'), hasDependencies);
    Compute.prototype.on = Compute.prototype.bind = Compute.prototype.addEventListener;
    Compute.prototype.off = Compute.prototype.unbind = Compute.prototype.removeEventListener;
    canReflect.set(Compute.prototype, canSymbol.for('can.onValue'), function (handler) {
        var translationHandler = function (ev, newValue) {
            handler(newValue);
        };
        singleReference.set(handler, this, translationHandler);
        this.addEventListener('change', translationHandler);
    });
    canReflect.set(Compute.prototype, canSymbol.for('can.offValue'), function (handler) {
        this.removeEventListener('change', singleReference.getAndDelete(handler, this));
    });
    canReflect.set(Compute.prototype, canSymbol.for('can.getValue'), Compute.prototype.get);
    canReflect.set(Compute.prototype, canSymbol.for('can.setValue'), Compute.prototype.set);
    Compute.temporarilyBind = Observation.temporarilyBind;
    Compute.async = function (initialValue, asyncComputer, context) {
        return new Compute(initialValue, {
            fn: asyncComputer,
            context: context
        });
    };
    Compute.truthy = function (compute) {
        return new Compute(function () {
            var res = compute.get();
            if (typeof res === 'function') {
                res = res.get();
            }
            return !!res;
        });
    };
    canReflect.set(Compute.prototype, canSymbol.for('can.setValue'), Compute.prototype.set);
    canReflect.set(Compute.prototype, canSymbol.for('can.isValueLike'), true);
    canReflect.set(Compute.prototype, canSymbol.for('can.isMapLike'), false);
    canReflect.set(Compute.prototype, canSymbol.for('can.isListLike'), false);
    canReflect.set(Compute.prototype, canSymbol.for('can.valueHasDependencies'), function () {
        return !!this.observation;
    });
    canReflect.set(Compute.prototype, canSymbol.for('can.getValueDependencies'), function () {
        var ret;
        if (this.observation) {
            ret = { valueDependencies: new CIDSet() };
            ret.valueDependencies.add(this.observation);
        }
        return ret;
    });
    module.exports = exports = Compute;
});
/*can-compute@3.3.10#can-compute*/
define('can-compute@3.3.10#can-compute', [
    'require',
    'exports',
    'module',
    'can-event',
    'can-event/batch/batch',
    './proto-compute',
    'can-cid',
    'can-namespace',
    'can-util/js/single-reference/single-reference',
    'can-reflect/reflections/get-set/get-set',
    'can-symbol'
], function (require, exports, module) {
    require('can-event');
    require('can-event/batch/batch');
    var Compute = require('./proto-compute');
    var CID = require('can-cid');
    var namespace = require('can-namespace');
    var singleReference = require('can-util/js/single-reference/single-reference');
    var canReflect = require('can-reflect/reflections/get-set/get-set');
    var canSymbol = require('can-symbol');
    var canOnValueSymbol = canSymbol.for('can.onValue'), canOffValueSymbol = canSymbol.for('can.offValue'), canGetValue = canSymbol.for('can.getValue'), canSetValue = canSymbol.for('can.setValue'), isValueLike = canSymbol.for('can.isValueLike'), isMapLike = canSymbol.for('can.isMapLike'), isListLike = canSymbol.for('can.isListLike'), isFunctionLike = canSymbol.for('can.isFunctionLike'), canValueHasDependencies = canSymbol.for('can.valueHasDependencies'), canGetValueDependencies = canSymbol.for('can.getValueDependencies');
    var addEventListener = function (ev, handler) {
        var compute = this;
        var translationHandler;
        if (handler) {
            translationHandler = function () {
                handler.apply(compute, arguments);
            };
            singleReference.set(handler, this, translationHandler);
        }
        return compute.computeInstance.addEventListener(ev, translationHandler);
    };
    var removeEventListener = function (ev, handler) {
        var args = [];
        if (typeof ev !== 'undefined') {
            args.push(ev);
            if (typeof handler !== 'undefined') {
                args.push(singleReference.getAndDelete(handler, this));
            }
        }
        return this.computeInstance.removeEventListener.apply(this.computeInstance, args);
    };
    var onValue = function (handler) {
            return this.computeInstance[canOnValueSymbol](handler);
        }, offValue = function (handler) {
            return this.computeInstance[canOffValueSymbol](handler);
        }, getValue = function () {
            return this.computeInstance.get();
        }, setValue = function (value) {
            return this.computeInstance.set(value);
        }, hasDependencies = function () {
            return this.computeInstance.hasDependencies;
        }, getDependencies = function () {
            return this.computeInstance[canGetValueDependencies]();
        };
    var COMPUTE = function (getterSetter, context, eventName, bindOnce) {
        function compute(val) {
            if (arguments.length) {
                return compute.computeInstance.set(val);
            }
            return compute.computeInstance.get();
        }
        var cid = CID(compute, 'compute');
        compute.computeInstance = new Compute(getterSetter, context, eventName, bindOnce);
        compute.handlerKey = '__handler' + cid;
        compute.on = compute.bind = compute.addEventListener = addEventListener;
        compute.off = compute.unbind = compute.removeEventListener = removeEventListener;
        compute.isComputed = compute.computeInstance.isComputed;
        compute.clone = function (ctx) {
            if (typeof getterSetter === 'function') {
                context = ctx;
            }
            return COMPUTE(getterSetter, context, ctx, bindOnce);
        };
        canReflect.set(compute, canOnValueSymbol, onValue);
        canReflect.set(compute, canOffValueSymbol, offValue);
        canReflect.set(compute, canGetValue, getValue);
        canReflect.set(compute, canSetValue, setValue);
        canReflect.set(compute, isValueLike, true);
        canReflect.set(compute, isMapLike, false);
        canReflect.set(compute, isListLike, false);
        canReflect.set(compute, isFunctionLike, false);
        canReflect.set(compute, canValueHasDependencies, hasDependencies);
        canReflect.set(compute, canGetValueDependencies, getDependencies);
        return compute;
    };
    COMPUTE.truthy = function (compute) {
        return COMPUTE(function () {
            var res = compute();
            return !!res;
        });
    };
    COMPUTE.async = function (initialValue, asyncComputer, context) {
        return COMPUTE(initialValue, {
            fn: asyncComputer,
            context: context
        });
    };
    COMPUTE.temporarilyBind = Compute.temporarilyBind;
    module.exports = namespace.compute = COMPUTE;
});
/*can-util@3.14.0#js/is-function/is-function*/
define('can-util@3.14.0#js/is-function/is-function', [
    'require',
    'exports',
    'module',
    'can-namespace'
], function (require, exports, module) {
    'use strict';
    var namespace = require('can-namespace');
    var isFunction = function () {
        if (typeof document !== 'undefined' && typeof document.getElementsByTagName('body') === 'function') {
            return function (value) {
                return Object.prototype.toString.call(value) === '[object Function]';
            };
        }
        return function (value) {
            return typeof value === 'function';
        };
    }();
    module.exports = namespace.isFunction = isFunction;
});
/*can-view-live@3.2.6#lib/list*/
define('can-view-live@3.2.6#lib/list', [
    'require',
    'exports',
    'module',
    './core',
    './util/queueFns',
    'can-view-nodelist',
    'can-compute',
    'can-event/batch/batch',
    'can-util/dom/frag/frag',
    'can-util/dom/mutate/mutate',
    'can-util/dom/child-nodes/child-nodes',
    'can-util/js/make-array/make-array',
    'can-util/js/each/each',
    'can-util/js/is-function/is-function',
    'can-util/js/diff/diff',
    'can-compute/proto-compute',
    'can-reflect'
], function (require, exports, module) {
    var live = require('./core');
    var queueFns = require('./util/queueFns');
    var nodeLists = require('can-view-nodelist');
    var makeCompute = require('can-compute');
    var canBatch = require('can-event/batch/batch');
    var frag = require('can-util/dom/frag/frag');
    var domMutate = require('can-util/dom/mutate/mutate');
    var childNodes = require('can-util/dom/child-nodes/child-nodes');
    var makeArray = require('can-util/js/make-array/make-array');
    var each = require('can-util/js/each/each');
    var isFunction = require('can-util/js/is-function/is-function');
    var diff = require('can-util/js/diff/diff');
    var splice = [].splice;
    var Compute = require('can-compute/proto-compute');
    var canReflect = require('can-reflect');
    var renderAndAddToNodeLists = function (newNodeLists, parentNodeList, render, context, args) {
            var itemNodeList = [];
            if (parentNodeList) {
                nodeLists.register(itemNodeList, null, true, true);
                itemNodeList.parentList = parentNodeList;
                itemNodeList.expression = '#each SUBEXPRESSION';
            }
            var itemHTML = render.apply(context, args.concat([itemNodeList])), itemFrag = frag(itemHTML);
            var children = makeArray(childNodes(itemFrag));
            if (parentNodeList) {
                nodeLists.update(itemNodeList, children);
                newNodeLists.push(itemNodeList);
            } else {
                newNodeLists.push(nodeLists.register(children));
            }
            return itemFrag;
        }, removeFromNodeList = function (masterNodeList, index, length) {
            var removedMappings = masterNodeList.splice(index + 1, length), itemsToRemove = [];
            each(removedMappings, function (nodeList) {
                var nodesToRemove = nodeLists.unregister(nodeList);
                [].push.apply(itemsToRemove, nodesToRemove);
            });
            return itemsToRemove;
        }, addFalseyIfEmpty = function (list, falseyRender, masterNodeList, nodeList) {
            if (falseyRender && list.length === 0) {
                var falseyNodeLists = [];
                var falseyFrag = renderAndAddToNodeLists(falseyNodeLists, nodeList, falseyRender, list, [list]);
                nodeLists.after([masterNodeList[0]], falseyFrag);
                masterNodeList.push(falseyNodeLists[0]);
            }
        };
    live.list = function (el, compute, render, context, parentNode, nodeList, falseyRender) {
        var masterNodeList = nodeList || [el], indexMap = [], afterPreviousEvents = false, isTornDown = false, add = function add(ev, items, index) {
                if (!afterPreviousEvents) {
                    return;
                }
                var frag = text.ownerDocument.createDocumentFragment(), newNodeLists = [], newIndicies = [];
                each(items, function (item, key) {
                    var itemIndex = new Compute(key + index), itemCompute = new Compute(function (newVal) {
                            if (arguments.length) {
                                if ('set' in list) {
                                    list.set(itemIndex.get(), newVal);
                                } else {
                                    list.attr(itemIndex.get(), newVal);
                                }
                            } else {
                                return item;
                            }
                        }), itemFrag = renderAndAddToNodeLists(newNodeLists, nodeList, render, context, [
                            itemCompute,
                            itemIndex
                        ]);
                    frag.appendChild(itemFrag);
                    newIndicies.push(itemIndex);
                });
                var masterListIndex = index + 1;
                if (!indexMap.length) {
                    var falseyItemsToRemove = removeFromNodeList(masterNodeList, 0, masterNodeList.length - 1);
                    nodeLists.remove(falseyItemsToRemove);
                }
                if (!masterNodeList[masterListIndex]) {
                    nodeLists.after(masterListIndex === 1 ? [text] : [nodeLists.last(masterNodeList[masterListIndex - 1])], frag);
                } else {
                    var el = nodeLists.first(masterNodeList[masterListIndex]);
                    domMutate.insertBefore.call(el.parentNode, frag, el);
                }
                splice.apply(masterNodeList, [
                    masterListIndex,
                    0
                ].concat(newNodeLists));
                splice.apply(indexMap, [
                    index,
                    0
                ].concat(newIndicies));
                for (var i = index + newIndicies.length, len = indexMap.length; i < len; i++) {
                    indexMap[i].set(i);
                }
                if (ev.callChildMutationCallback !== false) {
                    live.callChildMutationCallback(text.parentNode);
                }
            }, set = function set(ev, newVal, index) {
                remove({}, { length: 1 }, index, true);
                add({}, [newVal], index);
            }, remove = function remove(ev, items, index, duringTeardown, fullTeardown) {
                if (!afterPreviousEvents) {
                    return;
                }
                if (!duringTeardown && data.teardownCheck(text.parentNode)) {
                    return;
                }
                if (index < 0) {
                    index = indexMap.length + index;
                }
                var itemsToRemove = removeFromNodeList(masterNodeList, index, items.length);
                indexMap.splice(index, items.length);
                for (var i = index, len = indexMap.length; i < len; i++) {
                    indexMap[i].set(i);
                }
                if (!fullTeardown) {
                    addFalseyIfEmpty(list, falseyRender, masterNodeList, nodeList);
                    nodeLists.remove(itemsToRemove);
                    if (ev.callChildMutationCallback !== false) {
                        live.callChildMutationCallback(text.parentNode);
                    }
                } else {
                    nodeLists.unregister(masterNodeList);
                }
            }, move = function move(ev, item, newIndex, currentIndex) {
                if (!afterPreviousEvents) {
                    return;
                }
                newIndex = newIndex + 1;
                currentIndex = currentIndex + 1;
                var referenceNodeList = masterNodeList[newIndex];
                var movedElements = frag(nodeLists.flatten(masterNodeList[currentIndex]));
                var referenceElement;
                if (currentIndex < newIndex) {
                    referenceElement = nodeLists.last(referenceNodeList).nextSibling;
                } else {
                    referenceElement = nodeLists.first(referenceNodeList);
                }
                var parentNode = masterNodeList[0].parentNode;
                parentNode.insertBefore(movedElements, referenceElement);
                var temp = masterNodeList[currentIndex];
                [].splice.apply(masterNodeList, [
                    currentIndex,
                    1
                ]);
                [].splice.apply(masterNodeList, [
                    newIndex,
                    0,
                    temp
                ]);
                newIndex = newIndex - 1;
                currentIndex = currentIndex - 1;
                var indexCompute = indexMap[currentIndex];
                [].splice.apply(indexMap, [
                    currentIndex,
                    1
                ]);
                [].splice.apply(indexMap, [
                    newIndex,
                    0,
                    indexCompute
                ]);
                var i = Math.min(currentIndex, newIndex);
                var len = indexMap.length;
                for (i, len; i < len; i++) {
                    indexMap[i].set(i);
                }
                if (ev.callChildMutationCallback !== false) {
                    live.callChildMutationCallback(text.parentNode);
                }
            }, queuedFns = queueFns({
                add: add,
                set: set,
                remove: remove,
                move: move
            }, nodeList && nodeList.nesting), text = el.ownerDocument.createTextNode(''), list, teardownList = function (fullTeardown) {
                if (list && list.removeEventListener) {
                    list.removeEventListener('add', queuedFns.add);
                    list.removeEventListener('set', queuedFns.set);
                    list.removeEventListener('remove', queuedFns.remove);
                    list.removeEventListener('move', queuedFns.move);
                }
                remove({ callChildMutationCallback: !!fullTeardown }, { length: masterNodeList.length - 1 }, 0, true, fullTeardown);
                queuedFns.clear();
            }, oldList, updateList = function (newList) {
                if (isTornDown) {
                    return;
                }
                afterPreviousEvents = true;
                if (newList && oldList) {
                    list = newList || [];
                    var patches = diff(oldList, newList);
                    if (oldList.removeEventListener) {
                        oldList.removeEventListener('add', queuedFns.add);
                        oldList.removeEventListener('set', queuedFns.set);
                        oldList.removeEventListener('remove', queuedFns.remove);
                        oldList.removeEventListener('move', queuedFns.move);
                    }
                    oldList = newList;
                    for (var i = 0, patchLen = patches.length; i < patchLen; i++) {
                        var patch = patches[i];
                        if (patch.deleteCount) {
                            remove({ callChildMutationCallback: false }, { length: patch.deleteCount }, patch.index, true);
                        }
                        if (patch.insert.length) {
                            add({ callChildMutationCallback: false }, patch.insert, patch.index);
                        }
                    }
                } else {
                    if (oldList) {
                        teardownList();
                    }
                    list = newList || [];
                    oldList = list;
                    add({ callChildMutationCallback: false }, list, 0);
                    addFalseyIfEmpty(list, falseyRender, masterNodeList, nodeList);
                }
                live.callChildMutationCallback(text.parentNode);
                afterPreviousEvents = false;
                if (list.addEventListener) {
                    list.addEventListener('add', queuedFns.add);
                    list.addEventListener('set', queuedFns.set);
                    list.addEventListener('remove', queuedFns.remove);
                    list.addEventListener('move', queuedFns.move);
                }
                canBatch.afterPreviousEvents(function () {
                    afterPreviousEvents = true;
                });
            };
        var isValueLike = canReflect.isValueLike(compute), isObservableLike = canReflect.isObservableLike(compute);
        parentNode = live.getParentNode(el, parentNode);
        var data = live.setup(parentNode, function () {
            if (isValueLike && isObservableLike) {
                canReflect.onValue(compute, updateList);
            }
        }, function () {
            if (isValueLike && isObservableLike) {
                canReflect.offValue(compute, updateList);
            }
            teardownList(true);
        });
        if (!nodeList) {
            live.replace(masterNodeList, text, data.teardownCheck);
        } else {
            nodeLists.replace(masterNodeList, text);
            nodeLists.update(masterNodeList, [text]);
            nodeList.unregistered = function () {
                data.teardownCheck();
                isTornDown = true;
            };
        }
        updateList(isValueLike ? canReflect.getValue(compute) : compute);
    };
});
/*can-view-live@3.2.6#lib/text*/
define('can-view-live@3.2.6#lib/text', [
    'require',
    'exports',
    'module',
    './core',
    'can-view-nodelist',
    'can-reflect'
], function (require, exports, module) {
    var live = require('./core');
    var nodeLists = require('can-view-nodelist');
    var canReflect = require('can-reflect');
    live.text = function (el, compute, parentNode, nodeList) {
        var parent = live.getParentNode(el, parentNode);
        var data = live.listen(parent, compute, function (newVal) {
            if (typeof node.nodeValue !== 'unknown') {
                node.nodeValue = live.makeString(newVal);
            }
        });
        var node = el.ownerDocument.createTextNode(live.makeString(canReflect.getValue(compute)));
        if (nodeList) {
            nodeList.unregistered = data.teardownCheck;
            data.nodeList = nodeList;
            nodeLists.update(nodeList, [node]);
            nodeLists.replace([el], node);
        } else {
            data.nodeList = live.replace([el], node, data.teardownCheck);
        }
    };
});
/*can-view-live@3.2.6#can-view-live*/
define('can-view-live@3.2.6#can-view-live', [
    'require',
    'exports',
    'module',
    './lib/core',
    './lib/attr',
    './lib/attrs',
    './lib/html',
    './lib/list',
    './lib/text'
], function (require, exports, module) {
    var live = require('./lib/core');
    require('./lib/attr');
    require('./lib/attrs');
    require('./lib/html');
    require('./lib/list');
    require('./lib/text');
    module.exports = live;
});
/*can-string@1.0.0#can-string*/
define('can-string@1.0.0#can-string', function (require, exports, module) {
    'use strict';
    var strUndHash = /_|-/, strColons = /\=\=/, strWords = /([A-Z]+)([A-Z][a-z])/g, strLowUp = /([a-z\d])([A-Z])/g, strDash = /([a-z\d])([A-Z])/g, strQuote = /"/g, strSingleQuote = /'/g, strHyphenMatch = /-+(.)?/g, strCamelMatch = /[a-z][A-Z]/g, convertBadValues = function (content) {
            var isInvalid = content === null || content === undefined || isNaN(content) && '' + content === 'NaN';
            return '' + (isInvalid ? '' : content);
        };
    var string = {
        esc: function (content) {
            return convertBadValues(content).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(strQuote, '&#34;').replace(strSingleQuote, '&#39;');
        },
        capitalize: function (s) {
            return s.charAt(0).toUpperCase() + s.slice(1);
        },
        camelize: function (str) {
            return convertBadValues(str).replace(strHyphenMatch, function (match, chr) {
                return chr ? chr.toUpperCase() : '';
            });
        },
        hyphenate: function (str) {
            return convertBadValues(str).replace(strCamelMatch, function (str) {
                return str.charAt(0) + '-' + str.charAt(1).toLowerCase();
            });
        },
        underscore: function (s) {
            return s.replace(strColons, '/').replace(strWords, '$1_$2').replace(strLowUp, '$1_$2').replace(strDash, '_').toLowerCase();
        },
        undHash: strUndHash
    };
    module.exports = string;
});
/*can-construct@3.5.3#can-construct*/
define('can-construct@3.5.3#can-construct', [
    'require',
    'exports',
    'module',
    'can-reflect',
    'can-log/dev/dev',
    'can-namespace',
    'can-string'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var dev = require('can-log/dev/dev');
    var namespace = require('can-namespace');
    if (process.env.NODE_ENV !== 'production') {
        var CanString = require('can-string');
        var reservedWords = {
            'abstract': true,
            'boolean': true,
            'break': true,
            'byte': true,
            'case': true,
            'catch': true,
            'char': true,
            'class': true,
            'const': true,
            'continue': true,
            'debugger': true,
            'default': true,
            'delete': true,
            'do': true,
            'double': true,
            'else': true,
            'enum': true,
            'export': true,
            'extends': true,
            'false': true,
            'final': true,
            'finally': true,
            'float': true,
            'for': true,
            'function': true,
            'goto': true,
            'if': true,
            'implements': true,
            'import': true,
            'in': true,
            'instanceof': true,
            'int': true,
            'interface': true,
            'let': true,
            'long': true,
            'native': true,
            'new': true,
            'null': true,
            'package': true,
            'private': true,
            'protected': true,
            'public': true,
            'return': true,
            'short': true,
            'static': true,
            'super': true,
            'switch': true,
            'synchronized': true,
            'this': true,
            'throw': true,
            'throws': true,
            'transient': true,
            'true': true,
            'try': true,
            'typeof': true,
            'var': true,
            'void': true,
            'volatile': true,
            'while': true,
            'with': true
        };
        var constructorNameRegex = /[^A-Z0-9_]/gi;
    }
    var initializing = 0;
    if (process.env.NODE_ENV !== 'production') {
        var namedCtor = function (cache) {
            return function (name, fn) {
                return (name in cache ? cache[name] : cache[name] = new Function('__', 'function ' + name + '(){return __.apply(this,arguments)};return ' + name))(fn);
            };
        }({});
    }
    var Construct = function () {
        if (arguments.length) {
            return Construct.extend.apply(Construct, arguments);
        }
    };
    var canGetDescriptor;
    try {
        Object.getOwnPropertyDescriptor({});
        canGetDescriptor = true;
    } catch (e) {
        canGetDescriptor = false;
    }
    var getDescriptor = function (newProps, name) {
            var descriptor = Object.getOwnPropertyDescriptor(newProps, name);
            if (descriptor && (descriptor.get || descriptor.set)) {
                return descriptor;
            }
            return null;
        }, inheritGetterSetter = function (newProps, oldProps, addTo) {
            addTo = addTo || newProps;
            var descriptor;
            for (var name in newProps) {
                if (descriptor = getDescriptor(newProps, name)) {
                    this._defineProperty(addTo, oldProps, name, descriptor);
                } else {
                    Construct._overwrite(addTo, oldProps, name, newProps[name]);
                }
            }
        }, simpleInherit = function (newProps, oldProps, addTo) {
            addTo = addTo || newProps;
            for (var name in newProps) {
                Construct._overwrite(addTo, oldProps, name, newProps[name]);
            }
        }, defineNonEnumerable = function (obj, prop, value) {
            Object.defineProperty(obj, prop, {
                configurable: true,
                writable: true,
                enumerable: false,
                value: value
            });
        };
    canReflect.assignMap(Construct, {
        constructorExtends: true,
        newInstance: function () {
            var inst = this.instance(), args;
            if (inst.setup) {
                Object.defineProperty(inst, '__inSetup', {
                    configurable: true,
                    enumerable: false,
                    value: true,
                    writable: true
                });
                args = inst.setup.apply(inst, arguments);
                if (args instanceof Construct.ReturnValue) {
                    return args.value;
                }
                inst.__inSetup = false;
            }
            if (inst.init) {
                inst.init.apply(inst, args || arguments);
            }
            return inst;
        },
        _inherit: canGetDescriptor ? inheritGetterSetter : simpleInherit,
        _defineProperty: function (what, oldProps, propName, descriptor) {
            Object.defineProperty(what, propName, descriptor);
        },
        _overwrite: function (what, oldProps, propName, val) {
            Object.defineProperty(what, propName, {
                value: val,
                configurable: true,
                enumerable: true,
                writable: true
            });
        },
        setup: function (base) {
            var defaults = canReflect.assignDeepMap({}, base.defaults);
            this.defaults = canReflect.assignDeepMap(defaults, this.defaults);
        },
        instance: function () {
            initializing = 1;
            var inst = new this();
            initializing = 0;
            return inst;
        },
        extend: function (name, staticProperties, instanceProperties) {
            var shortName = name, klass = staticProperties, proto = instanceProperties;
            if (typeof shortName !== 'string') {
                proto = klass;
                klass = shortName;
                shortName = null;
            }
            if (!proto) {
                proto = klass;
                klass = null;
            }
            proto = proto || {};
            var _super_class = this, _super = this.prototype, Constructor, prototype;
            prototype = this.instance();
            Construct._inherit(proto, _super, prototype);
            if (shortName) {
            } else if (klass && klass.shortName) {
                shortName = klass.shortName;
            } else if (this.shortName) {
                shortName = this.shortName;
            }
            var constructorName = shortName ? shortName.replace(constructorNameRegex, '_') : 'Constructor';
            if (process.env.NODE_ENV !== 'production') {
                if (reservedWords[constructorName]) {
                    constructorName = CanString.capitalize(constructorName);
                }
            }
            function init() {
                if (!initializing) {
                    if (process.env.NODE_ENV !== 'production') {
                        if (!this || this.constructor !== Constructor && arguments.length && Constructor.constructorExtends) {
                            dev.warn('can/construct/construct.js: extending a Construct without calling extend');
                        }
                    }
                    return (!this || this.constructor !== Constructor) && arguments.length && Constructor.constructorExtends ? Constructor.extend.apply(Constructor, arguments) : Constructor.newInstance.apply(Constructor, arguments);
                }
            }
            Constructor = typeof namedCtor === 'function' ? namedCtor(constructorName, init) : function () {
                return init.apply(this, arguments);
            };
            for (var propName in _super_class) {
                if (_super_class.hasOwnProperty(propName)) {
                    Constructor[propName] = _super_class[propName];
                }
            }
            Construct._inherit(klass, _super_class, Constructor);
            canReflect.assignMap(Constructor, {
                constructor: Constructor,
                prototype: prototype
            });
            if (shortName !== undefined) {
                if (Object.getOwnPropertyDescriptor) {
                    var desc = Object.getOwnPropertyDescriptor(Constructor, 'name');
                    if (!desc || desc.configurable) {
                        Object.defineProperty(Constructor, 'name', {
                            writable: true,
                            value: shortName,
                            configurable: true
                        });
                    }
                }
                Constructor.shortName = shortName;
            }
            defineNonEnumerable(Constructor.prototype, 'constructor', Constructor);
            var t = [_super_class].concat(Array.prototype.slice.call(arguments)), args = Constructor.setup.apply(Constructor, t);
            if (Constructor.init) {
                Constructor.init.apply(Constructor, args || t);
            }
            return Constructor;
        },
        ReturnValue: function (value) {
            this.value = value;
        }
    });
    defineNonEnumerable(Construct.prototype, 'setup', function () {
    });
    defineNonEnumerable(Construct.prototype, 'init', function () {
    });
    module.exports = namespace.Construct = Construct;
});
/*can-simple-map@3.3.2#can-simple-map*/
define('can-simple-map@3.3.2#can-simple-map', [
    'require',
    'exports',
    'module',
    'can-construct',
    'can-event',
    'can-event/batch/batch',
    'can-util/js/assign/assign',
    'can-util/js/each/each',
    'can-types',
    'can-observation',
    'can-reflect',
    'can-util/js/single-reference/single-reference',
    'can-util/js/cid-map/cid-map'
], function (require, exports, module) {
    var Construct = require('can-construct');
    var canEvent = require('can-event');
    var canBatch = require('can-event/batch/batch');
    var assign = require('can-util/js/assign/assign');
    var each = require('can-util/js/each/each');
    var types = require('can-types');
    var Observation = require('can-observation');
    var canReflect = require('can-reflect');
    var singleReference = require('can-util/js/single-reference/single-reference');
    var CIDMap = require('can-util/js/cid-map/cid-map');
    var SimpleMap = Construct.extend({
        setup: function (initialData) {
            this._data = {};
            this.attr(initialData);
        },
        attr: function (prop, value) {
            var self = this;
            if (arguments.length === 0) {
                Observation.add(this, '__keys');
                var data = {};
                each(this._data, function (value, prop) {
                    Observation.add(this, prop);
                    data[prop] = value;
                }, this);
                return data;
            } else if (arguments.length > 1) {
                var had = this._data.hasOwnProperty(prop);
                var old = this._data[prop];
                this._data[prop] = value;
                canBatch.start();
                if (!had) {
                    canEvent.dispatch.call(this, '__keys', []);
                }
                canEvent.dispatch.call(this, prop, [
                    value,
                    old
                ]);
                canBatch.stop();
            } else if (typeof prop === 'object') {
                canReflect.eachKey(prop, function (value, key) {
                    self.attr(key, value);
                });
            } else {
                if (prop !== 'constructor') {
                    Observation.add(this, prop);
                    return this._data[prop];
                }
                return this.constructor;
            }
        },
        serialize: function () {
            return canReflect.serialize(this, CIDMap);
        },
        get: function () {
            return this.attr.apply(this, arguments);
        },
        set: function () {
            return this.attr.apply(this, arguments);
        }
    });
    assign(SimpleMap.prototype, canEvent);
    if (!types.DefaultMap) {
        types.DefaultMap = SimpleMap;
    }
    canReflect.assignSymbols(SimpleMap.prototype, {
        'can.isMapLike': true,
        'can.isListLike': false,
        'can.isValueLike': false,
        'can.getKeyValue': SimpleMap.prototype.get,
        'can.setKeyValue': SimpleMap.prototype.set,
        'can.deleteKeyValue': function (prop) {
            return this.attr(prop, undefined);
        },
        'can.getOwnEnumerableKeys': function () {
            Observation.add(this, '__keys');
            return Object.keys(this._data);
        },
        'can.assignDeep': function (source) {
            canBatch.start();
            canReflect.assignMap(this, source);
            canBatch.stop();
        },
        'can.updateDeep': function (source) {
            canBatch.start();
            canReflect.updateMap(this, source);
            canBatch.stop();
        },
        'can.onKeyValue': function (key, handler) {
            var translationHandler = function (ev, newValue, oldValue) {
                handler.call(this, newValue, oldValue);
            };
            singleReference.set(handler, this, translationHandler, key);
            this.addEventListener(key, translationHandler);
        },
        'can.offKeyValue': function (key, handler) {
            this.removeEventListener(key, singleReference.getAndDelete(handler, this, key));
        },
        'can.keyHasDependencies': function (key) {
            return false;
        },
        'can.getKeyDependencies': function (key) {
            return undefined;
        }
    });
    module.exports = SimpleMap;
});
/*can-view-scope@3.6.0#template-context*/
define('can-view-scope@3.6.0#template-context', [
    'require',
    'exports',
    'module',
    'can-simple-map'
], function (require, exports, module) {
    var SimpleMap = require('can-simple-map');
    var TemplateContext = function () {
        this.vars = new SimpleMap({});
    };
    module.exports = TemplateContext;
});
/*can-view-scope@3.6.0#compute_data*/
define('can-view-scope@3.6.0#compute_data', [
    'require',
    'exports',
    'module',
    'can-observation',
    'can-stache-key',
    'can-compute',
    'can-util/js/assign/assign',
    'can-util/js/is-function/is-function',
    'can-event/batch/batch',
    'can-cid',
    'can-reflect',
    'can-symbol'
], function (require, exports, module) {
    'use strict';
    var Observation = require('can-observation');
    var observeReader = require('can-stache-key');
    var makeCompute = require('can-compute');
    var assign = require('can-util/js/assign/assign');
    var isFunction = require('can-util/js/is-function/is-function');
    var canBatch = require('can-event/batch/batch');
    var CID = require('can-cid');
    var canReflect = require('can-reflect');
    var canSymbol = require('can-symbol');
    var getFastPathRoot = function (computeData) {
        if (computeData.reads && computeData.reads.length === 1) {
            var root = computeData.root;
            if (root && root[canSymbol.for('can.getValue')]) {
                root = canReflect.getValue(root);
            }
            return root && canReflect.isObservableLike(root) && canReflect.isMapLike(root) && !isFunction(root[computeData.reads[0].key]) && root;
        }
        return;
    };
    var isEventObject = function (obj) {
        return obj && typeof obj.batchNum === 'number' && typeof obj.type === 'string';
    };
    var ScopeKeyData = function (scope, key, options) {
        CID(this);
        this.startingScope = scope;
        this.key = key;
        this.observation = new Observation(this.read, this);
        this.options = assign({ observation: this.observation }, options);
        this.handlers = [];
        this.dispatchHandler = this.dispatch.bind(this);
        this.fastPath = undefined;
        this.root = undefined;
        this.initialValue = undefined;
        this.reads = undefined;
        this.setRoot = undefined;
    };
    ScopeKeyData.prototype.getValue = function () {
        Observation.add(this);
        return this.getObservationValue();
    };
    ScopeKeyData.prototype.getObservationValue = Observation.ignore(function () {
        return this.observation.get();
    });
    ScopeKeyData.prototype.read = function () {
        if (this.root) {
            return observeReader.read(this.root, this.reads, this.options).value;
        }
        var data = this.startingScope.read(this.key, this.options);
        this.scope = data.scope;
        this.reads = data.reads;
        this.root = data.rootObserve;
        this.setRoot = data.setRoot;
        return this.initialValue = data.value;
    };
    ScopeKeyData.prototype.setValue = function (newVal) {
        var root = this.root || this.setRoot;
        if (root) {
            observeReader.write(root, this.reads, newVal, this.options);
        } else {
            this.startingScope.set(this.key, newVal, this.options);
        }
    };
    ScopeKeyData.prototype.hasDependencies = function () {
        return this.observation.hasDependencies();
    };
    var canOnValue = canSymbol.for('can.onValue'), canOffValue = canSymbol.for('can.offValue');
    canReflect.set(ScopeKeyData.prototype, canOnValue, function (handler) {
        if (!this.handlers.length) {
            canReflect.onValue(this.observation, this.dispatchHandler);
            var fastPathRoot = getFastPathRoot(this);
            if (fastPathRoot) {
                var self = this, observation = this.observation;
                this.fastPath = true;
                observation.dependencyChange = function (target, newVal, altNewValue) {
                    if (isEventObject(newVal)) {
                        newVal = altNewValue;
                    }
                    if (target === fastPathRoot && typeof newVal !== 'function') {
                        this.newVal = newVal;
                    } else {
                        observation.dependencyChange = Observation.prototype.dependencyChange;
                        observation.start = Observation.prototype.start;
                        self.fastPath = false;
                    }
                    return Observation.prototype.dependencyChange.call(this, target, newVal, altNewValue);
                };
                observation.start = function () {
                    this.value = this.newVal;
                };
            }
        }
        this.handlers.push(handler);
    });
    ScopeKeyData.prototype.dispatch = function () {
        var handlers = this.handlers.slice(0);
        for (var i = 0, len = handlers.length; i < len; i++) {
            canBatch.batchNum = this.observation.batchNum;
            handlers[i].apply(this, arguments);
        }
    };
    canReflect.set(ScopeKeyData.prototype, canOffValue, function (handler) {
        var index = this.handlers.indexOf(handler);
        this.handlers.splice(index, 1);
        if (!this.handlers.length) {
            canReflect.offValue(this.observation, this.dispatchHandler);
            this.observation.dependencyChange = Observation.prototype.dependencyChange;
            this.observation.start = Observation.prototype.start;
        }
    });
    canReflect.set(ScopeKeyData.prototype, canSymbol.for('can.getValue'), ScopeKeyData.prototype.getValue);
    canReflect.set(ScopeKeyData.prototype, canSymbol.for('can.setValue'), ScopeKeyData.prototype.setValue);
    canReflect.set(ScopeKeyData.prototype, canSymbol.for('can.valueHasDependencies'), ScopeKeyData.prototype.hasDependencies);
    Object.defineProperty(ScopeKeyData.prototype, 'compute', {
        get: function () {
            var scopeKeyData = this;
            var compute = makeCompute(undefined, {
                on: function (updater) {
                    scopeKeyData[canOnValue](updater);
                    this.value = scopeKeyData.observation.value;
                },
                off: function (updater) {
                    scopeKeyData[canOffValue](updater);
                },
                get: function () {
                    return scopeKeyData.observation.get();
                },
                set: function (newValue) {
                    return scopeKeyData.setValue(newValue);
                }
            });
            compute.computeInstance.observation = this.observation;
            compute.computeInstance._canObserve = false;
            Object.defineProperty(this, 'compute', {
                value: compute,
                writable: false,
                configurable: false
            });
            return compute;
        },
        configurable: true
    });
    module.exports = function (scope, key, options) {
        return new ScopeKeyData(scope, key, options || { args: [] });
    };
});
/*can-define-lazy-value@1.1.0#define-lazy-value*/
define('can-define-lazy-value@1.1.0#define-lazy-value', function (require, exports, module) {
    'use strict';
    module.exports = function defineLazyValue(obj, prop, initializer, writable) {
        Object.defineProperty(obj, prop, {
            configurable: true,
            get: function () {
                Object.defineProperty(this, prop, {
                    value: undefined,
                    writable: true
                });
                var value = initializer.call(this, obj, prop);
                Object.defineProperty(this, prop, {
                    value: value,
                    writable: !!writable
                });
                return value;
            },
            set: function (value) {
                Object.defineProperty(this, prop, {
                    value: value,
                    writable: !!writable
                });
                return value;
            }
        });
    };
});
/*can-view-scope@3.6.0#can-view-scope*/
define('can-view-scope@3.6.0#can-view-scope', [
    'require',
    'exports',
    'module',
    'can-stache-key',
    'can-observation',
    './template-context',
    './compute_data',
    'can-util/js/assign/assign',
    'can-util/js/each/each',
    'can-namespace',
    'can-reflect',
    'can-log/dev/dev',
    'can-define-lazy-value'
], function (require, exports, module) {
    var observeReader = require('can-stache-key');
    var Observation = require('can-observation');
    var TemplateContext = require('./template-context');
    var makeComputeData = require('./compute_data');
    var assign = require('can-util/js/assign/assign');
    var each = require('can-util/js/each/each');
    var namespace = require('can-namespace');
    var canReflect = require('can-reflect');
    var canLog = require('can-log/dev/dev');
    var defineLazyValue = require('can-define-lazy-value');
    var specialKeywords = {
        index: true,
        key: true,
        element: true,
        event: true,
        viewModel: true,
        arguments: true
    };
    function Scope(context, parent, meta) {
        this._context = context;
        this._parent = parent;
        this._meta = meta || {};
        this.__cache = {};
    }
    assign(Scope, {
        read: observeReader.read,
        Refs: TemplateContext,
        refsScope: function () {
            return new Scope(new TemplateContext());
        },
        keyInfo: function (attr) {
            var info = {};
            info.isDotSlash = attr.substr(0, 2) === './';
            info.isThisDot = attr.substr(0, 5) === 'this.';
            info.isThisAt = attr.substr(0, 5) === 'this@';
            info.isInCurrentContext = info.isDotSlash || info.isThisDot || info.isThisAt;
            info.isInParentContext = attr.substr(0, 3) === '../';
            info.isCurrentContext = attr === '.' || attr === 'this';
            info.isParentContext = attr === '..';
            info.isScope = attr === 'scope';
            info.isLegacyView = attr === '*self';
            info.isInLegacyRefsScope = info.isLegacyView || attr.substr(0, 1) === '*' || attr.substr(0, 2) === '@*';
            info.isInTemplateContextVars = info.isInLegacyRefsScope || attr.substr(0, 11) === 'scope.vars.';
            info.isInScopeTop = attr.substr(0, 10) === 'scope.top.';
            info.isInScopeVm = attr.substr(0, 9) === 'scope.vm.';
            info.isInTemplateContext = info.isInScopeTop || info.isInScopeVm || info.isInTemplateContextVars || attr.substr(0, 6) === 'scope.';
            info.isContextBased = info.isInCurrentContext || info.isInParentContext || info.isCurrentContext || info.isParentContext;
            return info;
        }
    });
    assign(Scope.prototype, {
        add: function (context, meta) {
            if (context !== this._context) {
                return new this.constructor(context, this, meta);
            } else {
                return this;
            }
        },
        read: function (attr, options) {
            if (attr === '%root') {
                return { value: this.getRoot() };
            }
            if (attr === '%scope') {
                return { value: this };
            }
            if (attr === './') {
                attr = '.';
            }
            var keyInfo = Scope.keyInfo(attr);
            if (keyInfo.isContextBased && (this._meta.notContext || this._meta.special)) {
                return this._parent.read(attr, options);
            }
            var currentScopeOnly;
            if (keyInfo.isInCurrentContext) {
                currentScopeOnly = true;
                attr = keyInfo.isDotSlash ? attr.substr(2) : attr.substr(5);
            } else if (keyInfo.isInParentContext || keyInfo.isParentContext) {
                var parent = this._parent;
                while (parent._meta.notContext || parent._meta.special) {
                    parent = parent._parent;
                }
                if (keyInfo.isParentContext) {
                    return observeReader.read(parent._context, [], options);
                }
                return parent.read(attr.substr(3) || '.', options);
            } else if (keyInfo.isCurrentContext) {
                return observeReader.read(this._context, [], options);
            } else if (keyInfo.isScope) {
                return { value: this };
            }
            var keyReads = observeReader.reads(attr);
            if (keyInfo.isInTemplateContext) {
                if (keyInfo.isInLegacyRefsScope) {
                    var filename = this.peek('scope.filename');
                    var lineNumber = this.peek('scope.lineNumber');
                    if (keyInfo.isLegacyView) {
                        keyReads[0].key = 'view';
                        canLog.warn((filename ? filename + ':' : '') + (lineNumber ? lineNumber + ': ' : '') + '{{>*self}} is deprecated. Use {{>scope.view}} instead.');
                    } else {
                        keyReads[0] = {
                            key: keyReads[0].key.substr(1),
                            at: true
                        };
                        canLog.warn((filename ? filename + ':' : '') + (lineNumber ? lineNumber + ': ' : '') + '{{*' + keyReads[0].key + '}} is deprecated. Use {{scope.vars.' + keyReads[0].key + '}} instead.');
                        keyReads.unshift({ key: 'vars' });
                    }
                } else if (keyInfo.isInScopeVm) {
                    return observeReader.read(this.getViewModel(), keyReads.slice(2), options);
                } else if (keyInfo.isInScopeTop) {
                    return observeReader.read(this.getTop(), keyReads.slice(2), options);
                } else {
                    keyReads = keyReads.slice(1);
                }
                if (specialKeywords[keyReads[0].key]) {
                    return this._read(keyReads, { special: true });
                }
                if (keyReads.length === 1) {
                    return { value: this.templateContext[keyReads[0].key] };
                }
                return this.getTemplateContext()._read(keyReads);
            }
            return this._read(keyReads, options, currentScopeOnly);
        },
        _read: function (keyReads, options, currentScopeOnly) {
            var currentScope = this, currentContext, undefinedObserves = [], currentObserve, currentReads, setObserveDepth = -1, currentSetReads, currentSetObserve, ignoreSpecialContexts, ignoreNonSpecialContexts, readOptions = assign({
                    foundObservable: function (observe, nameIndex) {
                        currentObserve = observe;
                        currentReads = keyReads.slice(nameIndex);
                    },
                    earlyExit: function (parentValue, nameIndex) {
                        if (nameIndex > setObserveDepth || nameIndex === setObserveDepth && (typeof parentValue === 'object' && keyReads[nameIndex].key in parentValue)) {
                            currentSetObserve = currentObserve;
                            currentSetReads = currentReads;
                            setObserveDepth = nameIndex;
                        }
                    }
                }, options);
            while (currentScope) {
                currentContext = currentScope._context;
                ignoreNonSpecialContexts = options && options.special && !currentScope._meta.special;
                ignoreSpecialContexts = (!options || options.special !== true) && currentScope._meta.special;
                if (currentContext !== null && (typeof currentContext === 'object' || typeof currentContext === 'function') && !ignoreNonSpecialContexts && !ignoreSpecialContexts) {
                    var getObserves = Observation.trap();
                    var data = observeReader.read(currentContext, keyReads, readOptions);
                    var observes = getObserves();
                    if (data.value !== undefined) {
                        Observation.addAll(observes);
                        return {
                            scope: currentScope,
                            rootObserve: currentObserve,
                            value: data.value,
                            reads: currentReads
                        };
                    } else {
                        undefinedObserves.push.apply(undefinedObserves, observes);
                    }
                }
                if (currentScopeOnly) {
                    currentScope = null;
                } else {
                    currentScope = currentScope._parent;
                }
            }
            Observation.addAll(undefinedObserves);
            return {
                setRoot: currentSetObserve,
                reads: currentSetReads,
                value: undefined
            };
        },
        get: function (key, options) {
            options = assign({ isArgument: true }, options);
            var res = this.read(key, options);
            return res.value;
        },
        peek: Observation.ignore(function (key, options) {
            return this.get(key, options);
        }),
        peak: Observation.ignore(function (key, options) {
            canLog.warn('peak is deprecated, please use peek instead');
            return this.peek(key, options);
        }),
        getScope: function (tester) {
            var scope = this;
            while (scope) {
                if (tester(scope)) {
                    return scope;
                }
                scope = scope._parent;
            }
        },
        getContext: function (tester) {
            var res = this.getScope(tester);
            return res && res._context;
        },
        getRefs: function () {
            return this.getTemplateContext();
        },
        getTemplateContext: function () {
            var lastScope;
            var templateContext = this.getScope(function (scope) {
                lastScope = scope;
                return scope._context instanceof TemplateContext;
            });
            if (!templateContext) {
                templateContext = new Scope(new TemplateContext());
                lastScope._parent = templateContext;
            }
            return templateContext;
        },
        getRoot: function () {
            var cur = this, child = this;
            while (cur._parent) {
                child = cur;
                cur = cur._parent;
            }
            if (cur._context instanceof Scope.Refs) {
                cur = child;
            }
            return cur._context;
        },
        getViewModel: function () {
            var vmScope = this.getScope(function (scope) {
                return scope._meta.viewModel;
            });
            return vmScope && vmScope._context;
        },
        getTop: function () {
            var top;
            this.getScope(function (scope) {
                if (scope._meta.viewModel) {
                    top = scope;
                }
                return false;
            });
            return top && top._context;
        },
        set: function (key, value, options) {
            options = options || {};
            var keyInfo = Scope.keyInfo(key), parent;
            if (keyInfo.isCurrentContext) {
                return canReflect.setValue(this._context, value);
            } else if (keyInfo.isInParentContext || keyInfo.isParentContext) {
                parent = this._parent;
                while (parent._meta.notContext) {
                    parent = parent._parent;
                }
                if (keyInfo.isParentContext) {
                    return canReflect.setValue(parent._context, value);
                }
                return parent.set(key.substr(3) || '.', value, options);
            } else if (keyInfo.isInTemplateContext) {
                if (keyInfo.isInLegacyRefsScope) {
                    return this.vars.set(key.substr(1), value);
                }
                if (keyInfo.isInTemplateContextVars) {
                    return this.vars.set(key.substr(11), value);
                }
                key = key.substr(6);
                if (key.indexOf('.') < 0) {
                    return this.templateContext[key] = value;
                }
                return this.getTemplateContext().set(key, value);
            }
            var dotIndex = key.lastIndexOf('.'), slashIndex = key.lastIndexOf('/'), contextPath, propName;
            if (slashIndex > dotIndex) {
                contextPath = key.substring(0, slashIndex);
                propName = key.substring(slashIndex + 1, key.length);
            } else {
                if (dotIndex !== -1) {
                    contextPath = key.substring(0, dotIndex);
                    propName = key.substring(dotIndex + 1, key.length);
                } else {
                    contextPath = '.';
                    propName = key;
                }
            }
            var context = this.read(contextPath, options).value;
            if (context === undefined) {
                canLog.error('Attempting to set a value at ' + key + ' where ' + contextPath + ' is undefined.');
                return;
            }
            if (!canReflect.isObservableLike(context) && canReflect.isObservableLike(context[propName])) {
                if (canReflect.isMapLike(context[propName])) {
                    canLog.warn('can-view-scope: Merging data into "' + propName + '" because its parent is non-observable');
                    canReflect.updateDeep(context[propName], value);
                } else if (canReflect.isValueLike(context[propName])) {
                    canReflect.setValue(context[propName], value);
                } else {
                    observeReader.write(context, propName, value, options);
                }
            } else {
                observeReader.write(context, propName, value, options);
            }
        },
        attr: Observation.ignore(function (key, value, options) {
            canLog.warn('can-view-scope::attr is deprecated, please use peek, get or set');
            options = assign({ isArgument: true }, options);
            if (arguments.length === 2) {
                return this.set(key, value, options);
            } else {
                return this.get(key, options);
            }
        }),
        computeData: function (key, options) {
            return makeComputeData(this, key, options);
        },
        compute: function (key, options) {
            return this.computeData(key, options).compute;
        },
        cloneFromRef: function () {
            var contexts = [];
            var scope = this, context, parent;
            while (scope) {
                context = scope._context;
                if (context instanceof Scope.Refs) {
                    parent = scope._parent;
                    break;
                }
                contexts.unshift(context);
                scope = scope._parent;
            }
            if (parent) {
                each(contexts, function (context) {
                    parent = parent.add(context);
                });
                return parent;
            } else {
                return this;
            }
        }
    });
    defineLazyValue(Scope.prototype, 'templateContext', function () {
        return this.getTemplateContext()._context;
    });
    defineLazyValue(Scope.prototype, 'vars', function () {
        return this.templateContext.vars;
    });
    function Options(data, parent, meta) {
        if (!data.helpers && !data.partials && !data.tags) {
            data = { helpers: data };
        }
        Scope.call(this, data, parent, meta);
    }
    Options.prototype = new Scope();
    Options.prototype.constructor = Options;
    Scope.Options = Options;
    namespace.view = namespace.view || {};
    module.exports = namespace.view.Scope = Scope;
});
/*can-stache@3.15.1#src/utils*/
define('can-stache@3.15.1#src/utils', [
    'require',
    'exports',
    'module',
    'can-view-scope',
    'can-observation',
    'can-stache-key',
    'can-compute',
    'can-reflect',
    'can-log/dev/dev',
    'can-util/js/is-empty-object/is-empty-object',
    'can-util/js/each/each',
    'can-util/js/is-array-like/is-array-like'
], function (require, exports, module) {
    var Scope = require('can-view-scope');
    var Observation = require('can-observation');
    var observationReader = require('can-stache-key');
    var compute = require('can-compute');
    var canReflect = require('can-reflect');
    var dev = require('can-log/dev/dev');
    var isEmptyObject = require('can-util/js/is-empty-object/is-empty-object');
    var each = require('can-util/js/each/each');
    var isArrayLike = require('can-util/js/is-array-like/is-array-like');
    var Options = Scope.Options;
    var noop = function () {
    };
    module.exports = {
        isArrayLike: isArrayLike,
        emptyHandler: function () {
        },
        jsonParse: function (str) {
            if (str[0] === '\'') {
                return str.substr(1, str.length - 2);
            } else if (str === 'undefined') {
                return undefined;
            } else {
                return JSON.parse(str);
            }
        },
        mixins: {
            last: function () {
                return this.stack[this.stack.length - 1];
            },
            add: function (chars) {
                this.last().add(chars);
            },
            subSectionDepth: function () {
                return this.stack.length - 1;
            }
        },
        convertToScopes: function (helperOptions, scope, options, nodeList, truthyRenderer, falseyRenderer, isStringOnly) {
            helperOptions.fn = truthyRenderer ? this.makeRendererConvertScopes(truthyRenderer, scope, options, nodeList, isStringOnly) : noop;
            helperOptions.inverse = falseyRenderer ? this.makeRendererConvertScopes(falseyRenderer, scope, options, nodeList, isStringOnly) : noop;
            helperOptions.isSection = !!(truthyRenderer || falseyRenderer);
        },
        makeRendererConvertScopes: function (renderer, parentScope, parentOptions, nodeList, observeObservables) {
            var rendererWithScope = function (ctx, opts, parentNodeList) {
                return renderer(ctx || parentScope, opts, parentNodeList);
            };
            var convertedRenderer = function (newScope, newOptions, parentNodeList) {
                if (newScope !== undefined && !(newScope instanceof Scope)) {
                    if (parentScope) {
                        newScope = parentScope.add(newScope);
                    } else {
                        newScope = Scope.refsScope().add(newScope || {});
                    }
                }
                if (newOptions !== undefined && !(newOptions instanceof Options)) {
                    newOptions = parentOptions.add(newOptions);
                }
                var result = rendererWithScope(newScope, newOptions || parentOptions, parentNodeList || nodeList);
                return result;
            };
            return observeObservables ? convertedRenderer : Observation.ignore(convertedRenderer);
        },
        getItemsStringContent: function (items, isObserveList, helperOptions, options) {
            var txt = '', len = observationReader.get(items, 'length'), isObservable = canReflect.isObservableLike(items);
            for (var i = 0; i < len; i++) {
                var item = isObservable ? compute(items, '' + i) : items[i];
                txt += helperOptions.fn(item, options);
            }
            return txt;
        },
        getItemsFragContent: function (items, helperOptions, scope, asVariable) {
            var result = [], len = observationReader.get(items, 'length'), isObservable = canReflect.isObservableLike(items), hashExprs = helperOptions.exprData && helperOptions.exprData.hashExprs, hashOptions;
            if (!isEmptyObject(hashExprs)) {
                hashOptions = {};
                each(hashExprs, function (exprs, key) {
                    hashOptions[exprs.key] = key;
                });
            }
            for (var i = 0; i < len; i++) {
                var aliases = {
                    '%index': i,
                    '@index': i
                };
                Object.defineProperty(aliases, '%index', {
                    get: function () {
                        var filename = scope.peek('scope.filename');
                        var lineNumber = scope.peek('scope.lineNumber');
                        dev.warn((filename ? filename + ':' : '') + (lineNumber ? lineNumber + ': ' : '') + '%index is deprecated. Use scope.index instead.');
                        return i;
                    }
                });
                Object.defineProperty(aliases, '@index', {
                    get: function () {
                        var filename = scope.peek('scope.filename');
                        var lineNumber = scope.peek('scope.lineNumber');
                        dev.warn((filename ? filename + ':' : '') + (lineNumber ? lineNumber + ': ' : '') + '@index is deprecated. Use scope.index instead.');
                        return i;
                    }
                });
                var item = isObservable ? compute(items, '' + i) : items[i];
                if (asVariable) {
                    aliases[asVariable] = item;
                }
                if (!isEmptyObject(hashOptions)) {
                    if (hashOptions.value) {
                        aliases[hashOptions.value] = item;
                    }
                    if (hashOptions.index) {
                        aliases[hashOptions.index] = i;
                    }
                }
                result.push(helperOptions.fn(scope.add(aliases, { notContext: true }).add({ index: i }, { special: true }).add(item)));
            }
            return result;
        },
        Options: Options
    };
});
/*can-stache@3.15.1#expressions/arg*/
define('can-stache@3.15.1#expressions/arg', function (require, exports, module) {
    var Arg = function (expression, modifiers) {
        this.expr = expression;
        this.modifiers = modifiers || {};
        this.isCompute = false;
    };
    Arg.prototype.value = function () {
        return this.expr.value.apply(this.expr, arguments);
    };
    module.exports = Arg;
});
/*can-stache@3.15.1#expressions/literal*/
define('can-stache@3.15.1#expressions/literal', function (require, exports, module) {
    var Literal = function (value) {
        this._value = value;
    };
    Literal.prototype.value = function () {
        return this._value;
    };
    module.exports = Literal;
});
/*can-stache@3.15.1#src/expression-helpers*/
define('can-stache@3.15.1#src/expression-helpers', [
    'require',
    'exports',
    'module',
    '../expressions/arg',
    '../expressions/literal',
    'can-reflect',
    'can-compute',
    'can-stache-key',
    'can-symbol',
    'can-util/js/dev/dev'
], function (require, exports, module) {
    var Arg = require('../expressions/arg');
    var Literal = require('../expressions/literal');
    var canReflect = require('can-reflect');
    var compute = require('can-compute');
    var observeReader = require('can-stache-key');
    var canSymbol = require('can-symbol');
    var dev = require('can-util/js/dev/dev');
    function getExplicitKeys(key, originalScope, actualScope) {
        var explicitKeys = [];
        var path = key;
        var cur = originalScope;
        var vm = originalScope.getViewModel();
        var top = originalScope.getTop();
        while (cur._parent) {
            cur = cur._parent;
            if (!cur._meta.special && !cur._meta.notContext) {
                path = '../' + path;
            }
            if (cur === actualScope) {
                explicitKeys.unshift(path);
                if (canReflect.getValue(cur._context) === top) {
                    explicitKeys.unshift('scope.top.' + key);
                }
                if (canReflect.getValue(cur._context) === vm) {
                    explicitKeys.unshift('scope.vm.' + key);
                }
                return explicitKeys;
            }
        }
    }
    function displayScopeWalkingWarning(key, computeData) {
        if (key.indexOf('.') < 0 && key !== 'this') {
            var scopeWasWalked = computeData.scope && computeData.scope !== computeData.startingScope;
            var readFromNonContext = computeData && computeData.scope && computeData.scope._meta && computeData.scope._meta.notContext;
            var readFromSpecialContext = computeData && computeData.scope && computeData.scope._meta && computeData.scope._meta.special;
            if (scopeWasWalked && !readFromNonContext && !readFromSpecialContext) {
                var filename = computeData.startingScope.peek('scope.filename');
                var lineNumber = computeData.startingScope.peek('scope.lineNumber');
                var displayKey = key.replace(/^@/g, '').replace(/@/g, '.');
                var explicitKeys = getExplicitKeys(displayKey, computeData.startingScope, computeData.scope);
                dev.warn((filename ? filename + ':' : '') + (lineNumber ? lineNumber + ': ' : '') + '"' + displayKey + '" ' + 'is not in the current scope, so it is being read from a parent scope.\n' + 'This will not happen automatically in an upcoming release. See https://canjs.com/doc/can-stache.scopeAndContext.html#PreventingScopeWalking.\n' + 'Use "' + explicitKeys.join('" or "') + '" instead.\n\n');
            }
        }
    }
    var getObservableValue_fromKey = function (key, scope, readOptions) {
        var data = scope.computeData(key, readOptions);
        compute.temporarilyBind(data);
        displayScopeWalkingWarning(key, data);
        return data;
    };
    function computeHasDependencies(compute) {
        return compute[canSymbol.for('can.valueHasDependencies')] ? canReflect.valueHasDependencies(compute) : compute.computeInstance.hasDependencies;
    }
    function getObservableValue_fromDynamicKey_fromObservable(key, root, helperOptions, readOptions) {
        var computeValue = compute(function (newVal) {
            var keyValue = canReflect.getValue(key);
            var rootValue = canReflect.getValue(root);
            keyValue = ('' + keyValue).replace(/\./g, '\\.');
            if (arguments.length) {
                observeReader.write(rootValue, observeReader.reads(keyValue), newVal);
            } else {
                return observeReader.get(rootValue, keyValue);
            }
        });
        compute.temporarilyBind(computeValue);
        return computeValue;
    }
    function convertToArgExpression(expr) {
        if (!(expr instanceof Arg) && !(expr instanceof Literal)) {
            return new Arg(expr);
        } else {
            return expr;
        }
    }
    function toComputeOrValue(value) {
        if (canReflect.isObservableLike(value)) {
            if (canReflect.valueHasDependencies(value) === false) {
                return canReflect.getValue(value);
            }
            if (value.compute) {
                return value.compute;
            }
        }
        return value;
    }
    function toCompute(value) {
        if (value) {
            if (value.isComputed) {
                return value;
            }
            if (value.compute) {
                return value.compute;
            }
        }
        return value;
    }
    module.exports = {
        getObservableValue_fromKey: getObservableValue_fromKey,
        computeHasDependencies: computeHasDependencies,
        getObservableValue_fromDynamicKey_fromObservable: getObservableValue_fromDynamicKey_fromObservable,
        convertToArgExpression: convertToArgExpression,
        toComputeOrValue: toComputeOrValue,
        toCompute: toCompute
    };
});
/*can-stache@3.15.1#expressions/hashes*/
define('can-stache@3.15.1#expressions/hashes', [
    'require',
    'exports',
    'module',
    'can-reflect',
    'can-compute',
    '../src/expression-helpers'
], function (require, exports, module) {
    var canReflect = require('can-reflect');
    var compute = require('can-compute');
    var expressionHelpers = require('../src/expression-helpers');
    var Hashes = function (hashes) {
        this.hashExprs = hashes;
    };
    Hashes.prototype.value = function (scope, helperOptions) {
        var hash = {};
        for (var prop in this.hashExprs) {
            var val = expressionHelpers.convertToArgExpression(this.hashExprs[prop]), value = val.value.apply(val, arguments);
            hash[prop] = {
                call: !val.modifiers || !val.modifiers.compute,
                value: value
            };
        }
        return compute(function () {
            var finalHash = {};
            for (var prop in hash) {
                finalHash[prop] = hash[prop].call ? canReflect.getValue(hash[prop].value) : expressionHelpers.toComputeOrValue(hash[prop].value);
            }
            return finalHash;
        });
    };
    module.exports = Hashes;
});
/*can-stache@3.15.1#expressions/bracket*/
define('can-stache@3.15.1#expressions/bracket', [
    'require',
    'exports',
    'module',
    'can-symbol',
    '../src/expression-helpers'
], function (require, exports, module) {
    var canSymbol = require('can-symbol');
    var expressionHelpers = require('../src/expression-helpers');
    var Bracket = function (key, root, originalKey) {
        this.root = root;
        this.key = key;
        this[canSymbol.for('can-stache.originalKey')] = originalKey;
    };
    Bracket.prototype.value = function (scope, helpers) {
        var root = this.root ? this.root.value(scope, helpers) : scope.peek('.');
        return expressionHelpers.getObservableValue_fromDynamicKey_fromObservable(this.key.value(scope, helpers), root, scope, helpers, {});
    };
    Bracket.prototype.closingTag = function () {
        return this[canSymbol.for('can-stache.originalKey')] || '';
    };
    module.exports = Bracket;
});
/*can-stache@3.15.1#src/set-identifier*/
define('can-stache@3.15.1#src/set-identifier', function (require, exports, module) {
    module.exports = function SetIdentifier(value) {
        this.value = value;
    };
});
/*can-stache@3.15.1#expressions/call*/
define('can-stache@3.15.1#expressions/call', [
    'require',
    'exports',
    'module',
    'can-view-scope',
    './hashes',
    '../src/set-identifier',
    'can-compute',
    'can-reflect',
    'can-symbol',
    'can-util/js/assign/assign',
    'can-util/js/is-empty-object/is-empty-object',
    '../src/expression-helpers'
], function (require, exports, module) {
    var Scope = require('can-view-scope');
    var Hashes = require('./hashes');
    var SetIdentifier = require('../src/set-identifier');
    var compute = require('can-compute');
    var canReflect = require('can-reflect');
    var canSymbol = require('can-symbol');
    var assign = require('can-util/js/assign/assign');
    var isEmptyObject = require('can-util/js/is-empty-object/is-empty-object');
    var expressionHelpers = require('../src/expression-helpers');
    var Call = function (methodExpression, argExpressions) {
        this.methodExpr = methodExpression;
        this.argExprs = argExpressions.map(expressionHelpers.convertToArgExpression);
    };
    Call.prototype.args = function (scope, helperOptions) {
        var hashExprs = {};
        var args = [];
        for (var i = 0, len = this.argExprs.length; i < len; i++) {
            var arg = this.argExprs[i];
            if (arg.expr instanceof Hashes) {
                assign(hashExprs, arg.expr.hashExprs);
            }
            var value = arg.value.apply(arg, arguments);
            args.push({
                call: !arg.modifiers || !arg.modifiers.compute,
                value: value
            });
        }
        return function (doNotWrapArguments) {
            var finalArgs = [];
            if (!isEmptyObject(hashExprs)) {
                finalArgs.hashExprs = hashExprs;
            }
            for (var i = 0, len = args.length; i < len; i++) {
                if (doNotWrapArguments) {
                    finalArgs[i] = args[i].value;
                } else {
                    finalArgs[i] = args[i].call ? canReflect.getValue(args[i].value) : expressionHelpers.toCompute(args[i].value);
                }
            }
            return finalArgs;
        };
    };
    Call.prototype.value = function (scope, helperScope, helperOptions) {
        var method = this.methodExpr.value(scope, helperScope);
        var metadata = method.metadata || {};
        assign(this, metadata);
        var getArgs = this.args(scope, helperScope);
        var computeValue = compute(function (newVal) {
            var func = canReflect.getValue(method.fn || method);
            if (typeof func === 'function') {
                var args = getArgs(metadata.isLiveBound);
                if (metadata.isHelper && helperOptions) {
                    helperOptions.helpers = helperOptions.helpers || new Scope.Options({});
                    if (args.hashExprs && helperOptions.exprData) {
                        helperOptions.exprData.hashExprs = args.hashExprs;
                    }
                    args.push(helperOptions);
                }
                if (arguments.length) {
                    args.unshift(new SetIdentifier(newVal));
                }
                return func.apply(null, args);
            }
        });
        compute.temporarilyBind(computeValue);
        return computeValue;
    };
    Call.prototype.closingTag = function () {
        if (this.methodExpr[canSymbol.for('can-stache.originalKey')]) {
            return this.methodExpr[canSymbol.for('can-stache.originalKey')];
        }
        return this.methodExpr.key;
    };
    module.exports = Call;
});
/*can-globals@1.2.0#base-url/base-url*/
define('can-globals@1.2.0#base-url/base-url', [
    'require',
    'exports',
    'module',
    '../can-globals-instance',
    '../global/global',
    '../document/document'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var globals = require('../can-globals-instance');
        require('../global/global');
        require('../document/document');
        globals.define('base-url', function () {
            var global = globals.getKeyValue('global');
            var domDocument = globals.getKeyValue('document');
            if (domDocument && 'baseURI' in domDocument) {
                return domDocument.baseURI;
            } else if (global.location) {
                var href = global.location.href;
                var lastSlash = href.lastIndexOf('/');
                return lastSlash !== -1 ? href.substr(0, lastSlash) : href;
            } else if (typeof process !== 'undefined') {
                return process.cwd();
            }
        });
        module.exports = globals.makeExport('base-url');
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-util@3.14.0#js/base-url/base-url*/
define('can-util@3.14.0#js/base-url/base-url', [
    'require',
    'exports',
    'module',
    'can-globals/base-url/base-url'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        module.exports = require('can-globals/base-url/base-url');
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-parse-uri@1.2.0#can-parse-uri*/
define('can-parse-uri@1.2.0#can-parse-uri', [
    'require',
    'exports',
    'module',
    'can-namespace'
], function (require, exports, module) {
    'use strict';
    var namespace = require('can-namespace');
    module.exports = namespace.parseURI = function (url) {
        var m = String(url).replace(/^\s+|\s+$/g, '').match(/^([^:\/?#]+:)?(\/\/(?:[^:@]*(?::[^:@]*)?@)?(([^:\/?#]*)(?::(\d*))?))?([^?#]*)(\?[^#]*)?(#[\s\S]*)?/);
        return m ? {
            href: m[0] || '',
            protocol: m[1] || '',
            authority: m[2] || '',
            host: m[3] || '',
            hostname: m[4] || '',
            port: m[5] || '',
            pathname: m[6] || '',
            search: m[7] || '',
            hash: m[8] || ''
        } : null;
    };
});
/*can-util@3.14.0#js/join-uris/join-uris*/
define('can-util@3.14.0#js/join-uris/join-uris', [
    'require',
    'exports',
    'module',
    'can-namespace',
    'can-parse-uri'
], function (require, exports, module) {
    'use strict';
    var namespace = require('can-namespace');
    var parseURI = require('can-parse-uri');
    module.exports = namespace.joinURIs = function (base, href) {
        function removeDotSegments(input) {
            var output = [];
            input.replace(/^(\.\.?(\/|$))+/, '').replace(/\/(\.(\/|$))+/g, '/').replace(/\/\.\.$/, '/../').replace(/\/?[^\/]*/g, function (p) {
                if (p === '/..') {
                    output.pop();
                } else {
                    output.push(p);
                }
            });
            return output.join('').replace(/^\//, input.charAt(0) === '/' ? '/' : '');
        }
        href = parseURI(href || '');
        base = parseURI(base || '');
        return !href || !base ? null : (href.protocol || base.protocol) + (href.protocol || href.authority ? href.authority : base.authority) + removeDotSegments(href.protocol || href.authority || href.pathname.charAt(0) === '/' ? href.pathname : href.pathname ? (base.authority && !base.pathname ? '/' : '') + base.pathname.slice(0, base.pathname.lastIndexOf('/') + 1) + href.pathname : base.pathname) + (href.protocol || href.authority || href.pathname ? href.search : href.search || base.search) + href.hash;
    };
});
/*can-stache@3.15.1#helpers/-debugger*/
define('can-stache@3.15.1#helpers/-debugger', [
    'require',
    'exports',
    'module',
    'can-log',
    'can-reflect',
    'can-symbol'
], function (require, exports, module) {
    var canLog = require('can-log');
    function noop() {
    }
    ;
    var resolveValue = noop;
    var evaluateArgs = noop;
    var __testing = {};
    var canReflect = require('can-reflect');
    var canSymbol = require('can-symbol');
    __testing = { allowDebugger: true };
    resolveValue = function (value) {
        if (value && value.isComputed) {
            return value();
        }
        if (value && value[canSymbol.for('can.isValueLike')] && value[canSymbol.for('can.getValue')]) {
            return canReflect.getValue(value);
        }
        return value;
    };
    evaluateArgs = function (left, right) {
        switch (arguments.length) {
        case 0:
            return true;
        case 1:
            return !!resolveValue(left);
        case 2:
            return resolveValue(left) === resolveValue(right);
        default:
            canLog.log([
                'Usage:',
                '  {{debugger}}: break any time this helper is evaluated',
                '  {{debugger condition}}: break when `condition` is truthy',
                '  {{debugger left right}}: break when `left` === `right`'
            ].join('\n'));
            throw new Error('{{debugger}} must have less than three arguments');
        }
    };
    function debuggerHelper(left, right) {
        var shouldBreak = evaluateArgs.apply(null, Array.prototype.slice.call(arguments, 0, -1));
        if (!shouldBreak) {
            return;
        }
        var options = arguments[arguments.length - 1];
        var get = function (path) {
            return options.scope.get(path);
        };
        canLog.log('Use `get(<path>)` to debug this template');
        var allowDebugger = __testing.allowDebugger;
        if (allowDebugger) {
            debugger;
            return;
        }
        canLog.warn('Forgotten {{debugger}} helper');
    }
    module.exports = {
        helper: debuggerHelper,
        evaluateArgs: evaluateArgs,
        resolveValue: resolveValue,
        __testing: __testing
    };
});
/*can-stache@3.15.1#helpers/core*/
define('can-stache@3.15.1#helpers/core', [
    'require',
    'exports',
    'module',
    'can-view-live',
    'can-view-nodelist',
    'can-compute',
    '../src/utils',
    'can-util/js/is-function/is-function',
    'can-util/js/base-url/base-url',
    'can-util/js/join-uris/join-uris',
    'can-util/js/each/each',
    'can-util/js/assign/assign',
    'can-util/js/is-iterable/is-iterable',
    'can-log/dev/dev',
    'can-symbol',
    'can-reflect',
    'can-util/js/is-empty-object/is-empty-object',
    '../expressions/hashes',
    './-debugger',
    'can-observation',
    'can-util/dom/data/data'
], function (require, exports, module) {
    var live = require('can-view-live');
    var nodeLists = require('can-view-nodelist');
    var compute = require('can-compute');
    var utils = require('../src/utils');
    var isFunction = require('can-util/js/is-function/is-function');
    var getBaseURL = require('can-util/js/base-url/base-url');
    var joinURIs = require('can-util/js/join-uris/join-uris');
    var each = require('can-util/js/each/each');
    var assign = require('can-util/js/assign/assign');
    var isIterable = require('can-util/js/is-iterable/is-iterable');
    var dev = require('can-log/dev/dev');
    var canSymbol = require('can-symbol');
    var canReflect = require('can-reflect');
    var isEmptyObject = require('can-util/js/is-empty-object/is-empty-object');
    var Hashes = require('../expressions/hashes');
    var debuggerHelper = require('./-debugger').helper;
    var Observation = require('can-observation');
    var domData = require('can-util/dom/data/data');
    var looksLikeOptions = function (options) {
        return options && typeof options.fn === 'function' && typeof options.inverse === 'function';
    };
    var resolve = function (value) {
        if (value && canReflect.isValueLike(value)) {
            return canReflect.getValue(value);
        } else {
            return value;
        }
    };
    var resolveHash = function (hash) {
        var params = {};
        for (var prop in hash) {
            params[prop] = resolve(hash[prop]);
        }
        return params;
    };
    var peek = Observation.ignore(resolve);
    var helpers = {
        'each': {
            metadata: { isLiveBound: true },
            fn: function (items) {
                var args = [].slice.call(arguments), options = args.pop(), argsLen = args.length, argExprs = options.exprData.argExprs, hashExprs = options.exprData.hashExprs, resolved = peek(items), asVariable, hashOptions, aliases, key;
                if (argsLen === 2 && !(argExprs[1].expr instanceof Hashes) || argsLen === 3 && argExprs[1].key === 'as') {
                    asVariable = args[argsLen - 1];
                    if (typeof asVariable !== 'string') {
                        asVariable = argExprs[argsLen - 1].key;
                    }
                    var filename = options.scope.peek('scope.filename');
                    var lineNumber = options.scope.peek('scope.lineNumber');
                    dev.warn((filename ? filename + ':' : '') + (lineNumber ? lineNumber + ': ' : '') + 'the `as` keyword is deprecated. Use ' + '{{#' + options.nodeList.expression.split(' ')[0] + ' ' + options.nodeList.expression.split(' ')[1] + ' ' + asVariable + '=value}} ' + 'instead of {{#' + options.nodeList.expression + '}}.');
                }
                if (!isEmptyObject(hashExprs)) {
                    hashOptions = {};
                    each(hashExprs, function (exprs, key) {
                        hashOptions[exprs.key] = key;
                    });
                }
                if ((canReflect.isObservableLike(resolved) && canReflect.isListLike(resolved) || utils.isArrayLike(resolved) && canReflect.isValueLike(items)) && !options.stringOnly) {
                    return function (el) {
                        var nodeList = [el];
                        nodeList.expression = 'live.list';
                        nodeLists.register(nodeList, null, options.nodeList, true);
                        nodeLists.update(options.nodeList, [el]);
                        var cb = function (item, index, parentNodeList) {
                            var aliases = {
                                '%index': index,
                                '@index': index
                            };
                            Object.defineProperty(aliases, '%index', {
                                get: function () {
                                    var filename = options.scope.peek('scope.filename');
                                    var lineNumber = options.scope.peek('scope.lineNumber');
                                    dev.warn((filename ? filename + ':' : '') + (lineNumber ? lineNumber + ': ' : '') + '%index is deprecated. Use scope.index instead.');
                                    return index;
                                }
                            });
                            Object.defineProperty(aliases, '@index', {
                                get: function () {
                                    var filename = options.scope.peek('scope.filename');
                                    var lineNumber = options.scope.peek('scope.lineNumber');
                                    dev.warn((filename ? filename + ':' : '') + (lineNumber ? lineNumber + ': ' : '') + '@index is deprecated. Use scope.index instead.');
                                    return index;
                                }
                            });
                            if (asVariable) {
                                aliases[asVariable] = item;
                            }
                            if (!isEmptyObject(hashOptions)) {
                                if (hashOptions.value) {
                                    aliases[hashOptions.value] = item;
                                }
                                if (hashOptions.index) {
                                    aliases[hashOptions.index] = index;
                                }
                            }
                            return options.fn(options.scope.add(aliases, { notContext: true }).add({ index: index }, { special: true }).add(item), options.options, parentNodeList);
                        };
                        live.list(el, items, cb, options.context, el.parentNode, nodeList, function (list, parentNodeList) {
                            return options.inverse(options.scope.add(list), options.options, parentNodeList);
                        });
                    };
                }
                var expr = resolve(items), result;
                if (!!expr && utils.isArrayLike(expr)) {
                    result = utils.getItemsFragContent(expr, options, options.scope, asVariable);
                    return options.stringOnly ? result.join('') : result;
                } else if (canReflect.isObservableLike(expr) && canReflect.isMapLike(expr) || expr instanceof Object) {
                    result = [];
                    canReflect.each(expr, function (val, key) {
                        var value = compute(expr, key);
                        aliases = {
                            '%key': key,
                            '@key': key
                        };
                        Object.defineProperty(aliases, '%key', {
                            get: function () {
                                var filename = options.scope.peek('scope.filename');
                                var lineNumber = options.scope.peek('scope.lineNumber');
                                dev.warn((filename ? filename + ':' : '') + (lineNumber ? lineNumber + ': ' : '') + '%key is deprecated. Use scope.key instead.');
                                return key;
                            }
                        });
                        Object.defineProperty(aliases, '@key', {
                            get: function () {
                                var filename = options.scope.peek('scope.filename');
                                var lineNumber = options.scope.peek('scope.lineNumber');
                                dev.warn((filename ? filename + ':' : '') + (lineNumber ? lineNumber + ': ' : '') + '@key is deprecated. Use scope.key instead.');
                                return key;
                            }
                        });
                        if (asVariable) {
                            aliases[asVariable] = value;
                        }
                        if (!isEmptyObject(hashOptions)) {
                            if (hashOptions.value) {
                                aliases[hashOptions.value] = value;
                            }
                            if (hashOptions.key) {
                                aliases[hashOptions.key] = key;
                            }
                        }
                        result.push(options.fn(options.scope.add(aliases, { notContext: true }).add({ key: key }, { special: true }).add(value)));
                    });
                    return options.stringOnly ? result.join('') : result;
                }
            }
        },
        '@index': {
            fn: function (offset, options) {
                if (!options) {
                    options = offset;
                    offset = 0;
                }
                var index = options.scope.peek('@index');
                return '' + ((isFunction(index) ? index() : index) + offset);
            }
        },
        'if': {
            fn: function (expr, options) {
                var value;
                if (expr && expr.isComputed) {
                    value = compute.truthy(expr)();
                } else {
                    value = !!resolve(expr);
                }
                if (value) {
                    return options.fn(options.scope || this);
                } else {
                    return options.inverse(options.scope || this);
                }
            }
        },
        'is': {
            fn: function () {
                var lastValue, curValue, options = arguments[arguments.length - 1];
                if (arguments.length - 2 <= 0) {
                    return options.inverse();
                }
                var args = arguments;
                var callFn = compute(function () {
                    for (var i = 0; i < args.length - 1; i++) {
                        curValue = resolve(args[i]);
                        curValue = isFunction(curValue) ? curValue() : curValue;
                        if (i > 0) {
                            if (curValue !== lastValue) {
                                return false;
                            }
                        }
                        lastValue = curValue;
                    }
                    return true;
                });
                return callFn() ? options.fn() : options.inverse();
            }
        },
        'eq': {
            fn: function () {
                return helpers.is.fn.apply(this, arguments);
            }
        },
        'unless': {
            fn: function (expr, options) {
                return helpers['if'].fn.apply(this, [
                    expr,
                    assign(assign({}, options), {
                        fn: options.inverse,
                        inverse: options.fn
                    })
                ]);
            }
        },
        'with': {
            fn: function (expr, options) {
                var ctx = expr;
                if (!options) {
                    options = expr;
                    expr = true;
                    ctx = options.hash;
                } else {
                    expr = resolve(expr);
                    if (options.hash && !isEmptyObject(options.hash)) {
                        ctx = options.scope.add(options.hash).add(ctx);
                    }
                }
                return options.fn(ctx || {});
            }
        },
        'log': {
            fn: function (options) {
                var logs = [];
                each(arguments, function (val) {
                    if (!looksLikeOptions(val)) {
                        logs.push(val);
                    }
                });
                if (typeof console !== 'undefined' && console.log) {
                    if (!logs.length) {
                        console.log(options.context);
                    } else {
                        console.log.apply(console, logs);
                    }
                }
            }
        },
        'data': {
            fn: function (attr) {
                var data = arguments.length === 2 ? this : arguments[1];
                return function (el) {
                    domData.set.call(el, attr, data || this.context);
                };
            }
        },
        'switch': {
            fn: function (expression, options) {
                resolve(expression);
                var found = false;
                var newOptions = options.helpers.add({
                    'case': function (value, options) {
                        if (!found && resolve(expression) === resolve(value)) {
                            found = true;
                            return options.fn(options.scope || this);
                        }
                    },
                    'default': function (options) {
                        if (!found) {
                            return options.fn(options.scope || this);
                        }
                    }
                });
                return options.fn(options.scope, newOptions);
            }
        },
        'joinBase': {
            fn: function (firstExpr) {
                var args = [].slice.call(arguments);
                var options = args.pop();
                var moduleReference = args.map(function (expr) {
                    var value = resolve(expr);
                    return isFunction(value) ? value() : value;
                }).join('');
                var templateModule = options.helpers.peek('helpers.module');
                var parentAddress = templateModule ? templateModule.uri : undefined;
                var isRelative = moduleReference[0] === '.';
                if (isRelative && parentAddress) {
                    return joinURIs(parentAddress, moduleReference);
                } else {
                    var baseURL = typeof System !== 'undefined' && (System.renderingBaseURL || System.baseURL) || getBaseURL();
                    if (moduleReference[0] !== '/' && baseURL[baseURL.length - 1] !== '/') {
                        baseURL += '/';
                    }
                    return joinURIs(baseURL, moduleReference);
                }
            }
        }
    };
    helpers.eachOf = helpers.each;
    helpers.debugger = { fn: debuggerHelper };
    var registerHelper = function (name, callback, metadata) {
        if (helpers[name]) {
            dev.warn('The helper ' + name + ' has already been registered.');
        }
        helpers[name] = {
            metadata: assign({ isHelper: true }, metadata),
            fn: callback
        };
    };
    var makeSimpleHelper = function (fn) {
        return function () {
            var realArgs = [];
            each(arguments, function (val) {
                while (val && val.isComputed) {
                    val = val();
                }
                realArgs.push(val);
            });
            return fn.apply(this, realArgs);
        };
    };
    var registerSimpleHelper = function (name, callback) {
        registerHelper(name, makeSimpleHelper(callback));
    };
    module.exports = {
        registerHelper: registerHelper,
        registerSimpleHelper: function () {
            dev.warn('stache.registerSimpleHelper is deprecated. Use stache.addHelper instead.');
            registerSimpleHelper.apply(this, arguments);
        },
        addHelper: registerSimpleHelper,
        addLiveHelper: function (name, callback) {
            return registerHelper(name, callback, { isLiveBound: true });
        },
        getHelper: function (name, options) {
            var helper = options && options.get && options.get('helpers.' + name, { proxyMethods: false });
            if (helper) {
                helper = { fn: helper };
            } else {
                helper = helpers[name];
            }
            if (helper) {
                helper.metadata = assign(helper.metadata || {}, { isHelper: true });
                return helper;
            }
        },
        resolve: resolve,
        resolveHash: resolveHash,
        looksLikeOptions: looksLikeOptions,
        helpers: assign({}, helpers)
    };
});
/*can-stache@3.15.1#src/lookup-value-or-helper*/
define('can-stache@3.15.1#src/lookup-value-or-helper', [
    'require',
    'exports',
    'module',
    './expression-helpers',
    '../helpers/core'
], function (require, exports, module) {
    var expressionHelpers = require('./expression-helpers');
    var mustacheHelpers = require('../helpers/core');
    function lookupValueOrHelper(key, scope, helperOptions, readOptions) {
        var scopeKeyData = expressionHelpers.getObservableValue_fromKey(key, scope, readOptions);
        var result = { value: scopeKeyData };
        if (key.charAt(0) === '@' && key !== '@index') {
            key = key.substr(1);
        }
        if (scopeKeyData.initialValue === undefined || mustacheHelpers.helpers[key]) {
            var helper = mustacheHelpers.getHelper(key, helperOptions);
            result.helper = helper;
        }
        return result;
    }
    module.exports = lookupValueOrHelper;
});
/*can-stache@3.15.1#expressions/lookup*/
define('can-stache@3.15.1#expressions/lookup', [
    'require',
    'exports',
    'module',
    '../src/expression-helpers',
    '../src/lookup-value-or-helper',
    'can-util/js/assign/assign'
], function (require, exports, module) {
    var expressionHelpers = require('../src/expression-helpers');
    var lookupValueOrHelper = require('../src/lookup-value-or-helper');
    var assign = require('can-util/js/assign/assign');
    var Lookup = function (key, root) {
        this.key = key;
        this.rootExpr = root;
    };
    Lookup.prototype.value = function (scope, helperOptions) {
        if (this.rootExpr) {
            return expressionHelpers.getObservableValue_fromDynamicKey_fromObservable(this.key, this.rootExpr.value(scope, helperOptions), scope, {}, {});
        } else {
            var result = lookupValueOrHelper(this.key, scope, helperOptions);
            assign(this, result.metadata);
            return result.helper || result.value;
        }
    };
    module.exports = Lookup;
});
/*can-stache@3.15.1#expressions/scope-lookup*/
define('can-stache@3.15.1#expressions/scope-lookup', [
    'require',
    'exports',
    'module',
    '../src/expression-helpers',
    './lookup'
], function (require, exports, module) {
    var expressionHelpers = require('../src/expression-helpers');
    var Lookup = require('./lookup');
    var ScopeLookup = function (key, root) {
        Lookup.apply(this, arguments);
    };
    ScopeLookup.prototype.value = function (scope, helperOptions) {
        if (this.rootExpr) {
            return expressionHelpers.getObservableValue_fromDynamicKey_fromObservable(this.key, this.rootExpr.value(scope, helperOptions), scope, {}, {});
        }
        return expressionHelpers.getObservableValue_fromKey(this.key, scope, helperOptions);
    };
    module.exports = ScopeLookup;
});
/*can-stache@3.15.1#expressions/helper*/
define('can-stache@3.15.1#expressions/helper', [
    'require',
    'exports',
    'module',
    './literal',
    'can-compute',
    'can-util/js/assign/assign',
    'can-util/js/dev/dev',
    'can-util/js/is-empty-object/is-empty-object',
    '../src/expression-helpers',
    '../src/utils',
    '../helpers/core'
], function (require, exports, module) {
    var Literal = require('./literal');
    var compute = require('can-compute');
    var assign = require('can-util/js/assign/assign');
    var dev = require('can-util/js/dev/dev');
    var isEmptyObject = require('can-util/js/is-empty-object/is-empty-object');
    var expressionHelpers = require('../src/expression-helpers');
    var utils = require('../src/utils');
    var mustacheHelpers = require('../helpers/core');
    var Helper = function (methodExpression, argExpressions, hashExpressions) {
        this.methodExpr = methodExpression;
        this.argExprs = argExpressions;
        this.hashExprs = hashExpressions;
        this.mode = null;
    };
    Helper.prototype.args = function (scope, helperOptions) {
        var args = [];
        for (var i = 0, len = this.argExprs.length; i < len; i++) {
            var arg = this.argExprs[i];
            args.push(expressionHelpers.toComputeOrValue(arg.value.apply(arg, arguments)));
        }
        return args;
    };
    Helper.prototype.hash = function (scope, helperOptions) {
        var hash = {};
        for (var prop in this.hashExprs) {
            var val = this.hashExprs[prop];
            hash[prop] = expressionHelpers.toComputeOrValue(val.value.apply(val, arguments));
        }
        return hash;
    };
    Helper.prototype.helperAndValue = function (scope, helperOptions) {
        var looksLikeAHelper = this.argExprs.length || !isEmptyObject(this.hashExprs), helper, computeData, methodKey = this.methodExpr instanceof Literal ? '' + this.methodExpr._value : this.methodExpr.key, initialValue, args;
        if (looksLikeAHelper) {
            helper = mustacheHelpers.getHelper(methodKey, helperOptions);
        }
        if (!helper) {
            computeData = expressionHelpers.getObservableValue_fromKey(methodKey, scope, { isArgument: true });
            if (typeof computeData.initialValue === 'function') {
                var filename = computeData.startingScope.peek('scope.filename');
                var lineNumber = computeData.startingScope.peek('scope.lineNumber');
                dev.warn((filename ? filename + ':' : '') + (lineNumber ? lineNumber + ': ' : '') + '"' + methodKey + '" is being called as a function.\n' + '\tThis will not happen automatically in an upcoming release.\n' + '\tYou should call it explicitly using "' + methodKey + '()".\n\n');
                args = this.args(scope, helperOptions).map(expressionHelpers.toComputeOrValue);
                var functionResult = compute(function () {
                    return computeData.initialValue.apply(null, args);
                });
                compute.temporarilyBind(functionResult);
                return { value: functionResult };
            } else if (typeof computeData.initialValue !== 'undefined') {
                return { value: computeData };
            }
            if (!looksLikeAHelper && initialValue === undefined) {
                helper = mustacheHelpers.getHelper(methodKey, helperOptions);
            }
        }
        if (!helper) {
            var filename = scope.peek('scope.filename');
            var lineNumber = scope.peek('scope.lineNumber');
            if (looksLikeAHelper) {
                dev.warn((filename ? filename + ':' : '') + (lineNumber ? lineNumber + ': ' : '') + 'Unable to find helper "' + methodKey + '".');
            } else {
                dev.warn((filename ? filename + ':' : '') + (lineNumber ? lineNumber + ': ' : '') + 'Unable to find key or helper "' + methodKey + '".');
            }
        }
        return {
            value: computeData,
            args: args,
            helper: helper && helper.fn
        };
    };
    Helper.prototype.evaluator = function (helper, scope, helperOptions, readOptions, nodeList, truthyRenderer, falseyRenderer, stringOnly) {
        var helperOptionArg = { stringOnly: stringOnly }, context = scope.peek('.'), args = this.args(scope, helperOptions, nodeList, truthyRenderer, falseyRenderer, stringOnly), hash = this.hash(scope, helperOptions, nodeList, truthyRenderer, falseyRenderer, stringOnly);
        utils.convertToScopes(helperOptionArg, scope, helperOptions, nodeList, truthyRenderer, falseyRenderer, stringOnly);
        assign(helperOptionArg, {
            context: context,
            scope: scope,
            contexts: scope,
            hash: hash,
            nodeList: nodeList,
            exprData: this,
            helperOptions: helperOptions,
            helpers: helperOptions
        });
        args.push(helperOptionArg);
        return function () {
            return helper.apply(context, args);
        };
    };
    Helper.prototype.value = function (scope, helperOptions, nodeList, truthyRenderer, falseyRenderer, stringOnly) {
        var helperAndValue = this.helperAndValue(scope, helperOptions);
        var helper = helperAndValue.helper;
        if (!helper) {
            return helperAndValue.value;
        }
        var fn = this.evaluator(helper, scope, helperOptions, nodeList, truthyRenderer, falseyRenderer, stringOnly);
        var computeValue = compute(fn);
        compute.temporarilyBind(computeValue);
        if (!expressionHelpers.computeHasDependencies(computeValue)) {
            return computeValue();
        } else {
            return computeValue;
        }
    };
    Helper.prototype.closingTag = function () {
        return this.methodExpr.key;
    };
    module.exports = Helper;
});
/*can-stache@3.15.1#expressions/helper-lookup*/
define('can-stache@3.15.1#expressions/helper-lookup', [
    'require',
    'exports',
    'module',
    './lookup',
    '../src/lookup-value-or-helper'
], function (require, exports, module) {
    var Lookup = require('./lookup');
    var lookupValueOrHelper = require('../src/lookup-value-or-helper');
    var HelperLookup = function () {
        Lookup.apply(this, arguments);
    };
    HelperLookup.prototype.value = function (scope, helperOptions) {
        var result = lookupValueOrHelper(this.key, scope, helperOptions, {
            isArgument: true,
            args: [
                scope.peek('.'),
                scope
            ]
        });
        return result.helper || result.value;
    };
    module.exports = HelperLookup;
});
/*can-stache@3.15.1#expressions/helper-scope-lookup*/
define('can-stache@3.15.1#expressions/helper-scope-lookup', [
    'require',
    'exports',
    'module',
    './lookup',
    '../src/expression-helpers'
], function (require, exports, module) {
    var Lookup = require('./lookup');
    var expressionHelpers = require('../src/expression-helpers');
    var HelperScopeLookup = function () {
        Lookup.apply(this, arguments);
    };
    HelperScopeLookup.prototype.value = function (scope, helperOptions) {
        return expressionHelpers.getObservableValue_fromKey(this.key, scope, {
            callMethodsOnObservables: true,
            filename: scope.peek('scope.filename'),
            lineNumber: scope.peek('scope.lineNumber'),
            isArgument: true,
            args: [
                scope.peek('.'),
                scope
            ]
        });
    };
    module.exports = HelperScopeLookup;
});
/*can-stache@3.15.1#src/expression*/
define('can-stache@3.15.1#src/expression', [
    'require',
    'exports',
    'module',
    '../expressions/arg',
    '../expressions/literal',
    '../expressions/hashes',
    '../expressions/bracket',
    '../expressions/call',
    '../expressions/scope-lookup',
    '../expressions/helper',
    '../expressions/lookup',
    '../expressions/helper-lookup',
    '../expressions/helper-scope-lookup',
    './set-identifier',
    '../src/expression-helpers',
    './utils',
    'can-util/js/each/each',
    'can-util/js/assign/assign',
    'can-util/js/last/last',
    'can-reflect',
    'can-symbol'
], function (require, exports, module) {
    var Arg = require('../expressions/arg');
    var Literal = require('../expressions/literal');
    var Hashes = require('../expressions/hashes');
    var Bracket = require('../expressions/bracket');
    var Call = require('../expressions/call');
    var ScopeLookup = require('../expressions/scope-lookup');
    var Helper = require('../expressions/helper');
    var Lookup = require('../expressions/lookup');
    var HelperLookup = require('../expressions/helper-lookup');
    var HelperScopeLookup = require('../expressions/helper-scope-lookup');
    var SetIdentifier = require('./set-identifier');
    var expressionHelpers = require('../src/expression-helpers');
    var utils = require('./utils');
    var each = require('can-util/js/each/each');
    var assign = require('can-util/js/assign/assign');
    var last = require('can-util/js/last/last');
    var canReflect = require('can-reflect');
    var canSymbol = require('can-symbol');
    var Hash = function () {
    };
    var keyRegExp = /[\w\.\\\-_@\/\&%]+/, tokensRegExp = /('.*?'|".*?"|=|[\w\.\\\-_@\/*%\$]+|[\(\)]|,|\~|\[|\]\s*|\s*(?=\[))/g, bracketSpaceRegExp = /\]\s+/, literalRegExp = /^('.*?'|".*?"|[0-9]+\.?[0-9]*|true|false|null|undefined)$/;
    var isTokenKey = function (token) {
        return keyRegExp.test(token);
    };
    var testDot = /^[\.@]\w/;
    var isAddingToExpression = function (token) {
        return isTokenKey(token) && testDot.test(token);
    };
    var ensureChildren = function (type) {
        if (!type.children) {
            type.children = [];
        }
        return type;
    };
    var Stack = function () {
        this.root = {
            children: [],
            type: 'Root'
        };
        this.current = this.root;
        this.stack = [this.root];
    };
    assign(Stack.prototype, {
        top: function () {
            return last(this.stack);
        },
        isRootTop: function () {
            return this.top() === this.root;
        },
        popTo: function (types) {
            this.popUntil(types);
            this.pop();
        },
        pop: function () {
            if (!this.isRootTop()) {
                this.stack.pop();
            }
        },
        first: function (types) {
            var curIndex = this.stack.length - 1;
            while (curIndex > 0 && types.indexOf(this.stack[curIndex].type) === -1) {
                curIndex--;
            }
            return this.stack[curIndex];
        },
        firstParent: function (types) {
            var curIndex = this.stack.length - 2;
            while (curIndex > 0 && types.indexOf(this.stack[curIndex].type) === -1) {
                curIndex--;
            }
            return this.stack[curIndex];
        },
        popUntil: function (types) {
            while (types.indexOf(this.top().type) === -1 && !this.isRootTop()) {
                this.stack.pop();
            }
            return this.top();
        },
        addTo: function (types, type) {
            var cur = this.popUntil(types);
            ensureChildren(cur).children.push(type);
        },
        addToAndPush: function (types, type) {
            this.addTo(types, type);
            this.stack.push(type);
        },
        push: function (type) {
            this.stack.push(type);
        },
        topLastChild: function () {
            return last(this.top().children);
        },
        replaceTopLastChild: function (type) {
            var children = ensureChildren(this.top()).children;
            children.pop();
            children.push(type);
            return type;
        },
        replaceTopLastChildAndPush: function (type) {
            this.replaceTopLastChild(type);
            this.stack.push(type);
        },
        replaceTopAndPush: function (type) {
            var children;
            if (this.top() === this.root) {
                children = ensureChildren(this.top()).children;
            } else {
                this.stack.pop();
                children = ensureChildren(this.top()).children;
            }
            children.pop();
            children.push(type);
            this.stack.push(type);
            return type;
        }
    });
    var convertKeyToLookup = function (key) {
        var lastPath = key.lastIndexOf('./');
        var lastDot = key.lastIndexOf('.');
        if (lastDot > lastPath) {
            return key.substr(0, lastDot) + '@' + key.substr(lastDot + 1);
        }
        var firstNonPathCharIndex = lastPath === -1 ? 0 : lastPath + 2;
        var firstNonPathChar = key.charAt(firstNonPathCharIndex);
        if (firstNonPathChar === '.' || firstNonPathChar === '@') {
            return key.substr(0, firstNonPathCharIndex) + '@' + key.substr(firstNonPathCharIndex + 1);
        } else {
            return key.substr(0, firstNonPathCharIndex) + '@' + key.substr(firstNonPathCharIndex);
        }
    };
    var convertToAtLookup = function (ast) {
        if (ast.type === 'Lookup') {
            ast.key = convertKeyToLookup(ast.key);
        }
        return ast;
    };
    var convertToHelperIfTopIsLookup = function (stack) {
        var top = stack.top();
        if (top && top.type === 'Lookup') {
            var base = stack.stack[stack.stack.length - 2];
            if (base.type !== 'Helper' && base) {
                stack.replaceTopAndPush({
                    type: 'Helper',
                    method: top
                });
            }
        }
    };
    var expression = {
        toComputeOrValue: expressionHelpers.toComputeOrValue,
        convertKeyToLookup: convertKeyToLookup,
        Literal: Literal,
        Lookup: Lookup,
        ScopeLookup: ScopeLookup,
        Arg: Arg,
        Hash: Hash,
        Hashes: Hashes,
        Call: Call,
        Helper: Helper,
        HelperLookup: HelperLookup,
        HelperScopeLookup: HelperScopeLookup,
        Bracket: Bracket,
        SetIdentifier: SetIdentifier,
        tokenize: function (expression) {
            var tokens = [];
            (expression.trim() + ' ').replace(tokensRegExp, function (whole, arg) {
                if (bracketSpaceRegExp.test(arg)) {
                    tokens.push(arg[0]);
                    tokens.push(arg.slice(1));
                } else {
                    tokens.push(arg);
                }
            });
            return tokens;
        },
        lookupRules: {
            'default': function (ast, methodType, isArg) {
                var name = (methodType === 'Helper' && !ast.root ? 'Helper' : '') + (isArg ? 'Scope' : '') + 'Lookup';
                return expression[name];
            },
            'method': function (ast, methodType, isArg) {
                return ScopeLookup;
            }
        },
        methodRules: {
            'default': function (ast) {
                return ast.type === 'Call' ? Call : Helper;
            },
            'call': function (ast) {
                return Call;
            }
        },
        parse: function (expressionString, options) {
            options = options || {};
            var ast = this.ast(expressionString);
            if (!options.lookupRule) {
                options.lookupRule = 'default';
            }
            if (typeof options.lookupRule === 'string') {
                options.lookupRule = expression.lookupRules[options.lookupRule];
            }
            if (!options.methodRule) {
                options.methodRule = 'default';
            }
            if (typeof options.methodRule === 'string') {
                options.methodRule = expression.methodRules[options.methodRule];
            }
            var expr = this.hydrateAst(ast, options, options.baseMethodType || 'Helper');
            return expr;
        },
        hydrateAst: function (ast, options, methodType, isArg) {
            var hashes;
            if (ast.type === 'Lookup') {
                var lookup = new (options.lookupRule(ast, methodType, isArg))(ast.key, ast.root && this.hydrateAst(ast.root, options, methodType));
                canReflect.setKeyValue(lookup, canSymbol.for('can-stache.originalKey'), ast[canSymbol.for('can-stache.originalKey')]);
                return lookup;
            } else if (ast.type === 'Literal') {
                return new Literal(ast.value);
            } else if (ast.type === 'Arg') {
                return new Arg(this.hydrateAst(ast.children[0], options, methodType, isArg), { compute: true });
            } else if (ast.type === 'Hash') {
                throw new Error('');
            } else if (ast.type === 'Hashes') {
                hashes = {};
                each(ast.children, function (hash) {
                    hashes[hash.prop] = this.hydrateAst(hash.children[0], options, methodType, true);
                }, this);
                return new Hashes(hashes);
            } else if (ast.type === 'Call' || ast.type === 'Helper') {
                hashes = {};
                var args = [], children = ast.children, ExpressionType = options.methodRule(ast);
                if (children) {
                    for (var i = 0; i < children.length; i++) {
                        var child = children[i];
                        if (child.type === 'Hashes' && ast.type === 'Helper' && ExpressionType !== Call) {
                            each(child.children, function (hash) {
                                hashes[hash.prop] = this.hydrateAst(hash.children[0], options, ast.type, true);
                            }, this);
                        } else {
                            args.push(this.hydrateAst(child, options, ast.type, true));
                        }
                    }
                }
                return new ExpressionType(this.hydrateAst(ast.method, options, ast.type), args, hashes);
            } else if (ast.type === 'Bracket') {
                var originalKey;
                originalKey = ast[canSymbol.for('can-stache.originalKey')];
                return new Bracket(this.hydrateAst(ast.children[0], options), ast.root ? this.hydrateAst(ast.root, options) : undefined, originalKey);
            }
        },
        ast: function (expression) {
            var tokens = this.tokenize(expression);
            return this.parseAst(tokens, { index: 0 });
        },
        parseAst: function (tokens, cursor) {
            var stack = new Stack(), top, firstParent, lastToken;
            while (cursor.index < tokens.length) {
                var token = tokens[cursor.index], nextToken = tokens[cursor.index + 1];
                cursor.index++;
                if (nextToken === '=') {
                    top = stack.top();
                    if (top && top.type === 'Lookup') {
                        firstParent = stack.firstParent([
                            'Call',
                            'Helper',
                            'Hash'
                        ]);
                        if (firstParent.type === 'Call' || firstParent.type === 'Root') {
                            stack.popUntil(['Call']);
                            top = stack.top();
                            stack.replaceTopAndPush({
                                type: 'Helper',
                                method: top.type === 'Root' ? last(top.children) : top
                            });
                        }
                    }
                    firstParent = stack.firstParent([
                        'Call',
                        'Helper',
                        'Hashes'
                    ]);
                    var hash = {
                        type: 'Hash',
                        prop: token
                    };
                    if (firstParent.type === 'Hashes') {
                        stack.addToAndPush(['Hashes'], hash);
                    } else {
                        stack.addToAndPush([
                            'Helper',
                            'Call'
                        ], {
                            type: 'Hashes',
                            children: [hash]
                        });
                        stack.push(hash);
                    }
                    cursor.index++;
                } else if (literalRegExp.test(token)) {
                    convertToHelperIfTopIsLookup(stack);
                    firstParent = stack.first([
                        'Helper',
                        'Call',
                        'Hash',
                        'Bracket'
                    ]);
                    if (firstParent.type === 'Hash' && (firstParent.children && firstParent.children.length > 0)) {
                        stack.addTo([
                            'Helper',
                            'Call',
                            'Bracket'
                        ], {
                            type: 'Literal',
                            value: utils.jsonParse(token)
                        });
                    } else if (firstParent.type === 'Bracket' && (firstParent.children && firstParent.children.length > 0)) {
                        stack.addTo([
                            'Helper',
                            'Call',
                            'Hash'
                        ], {
                            type: 'Literal',
                            value: utils.jsonParse(token)
                        });
                    } else {
                        stack.addTo([
                            'Helper',
                            'Call',
                            'Hash',
                            'Bracket'
                        ], {
                            type: 'Literal',
                            value: utils.jsonParse(token)
                        });
                    }
                } else if (keyRegExp.test(token)) {
                    lastToken = stack.topLastChild();
                    firstParent = stack.first([
                        'Helper',
                        'Call',
                        'Hash',
                        'Bracket'
                    ]);
                    if (lastToken && (lastToken.type === 'Call' || lastToken.type === 'Bracket') && isAddingToExpression(token)) {
                        stack.replaceTopLastChildAndPush({
                            type: 'Lookup',
                            root: lastToken,
                            key: token.slice(1)
                        });
                    } else if (firstParent.type === 'Bracket') {
                        if (!(firstParent.children && firstParent.children.length > 0)) {
                            stack.addToAndPush(['Bracket'], {
                                type: 'Lookup',
                                key: token
                            });
                        } else {
                            if (stack.first([
                                    'Helper',
                                    'Call',
                                    'Hash',
                                    'Arg'
                                ]).type === 'Helper' && token[0] !== '.') {
                                stack.addToAndPush(['Helper'], {
                                    type: 'Lookup',
                                    key: token
                                });
                            } else {
                                stack.replaceTopAndPush({
                                    type: 'Lookup',
                                    key: token.slice(1),
                                    root: firstParent
                                });
                            }
                        }
                    } else {
                        convertToHelperIfTopIsLookup(stack);
                        stack.addToAndPush([
                            'Helper',
                            'Call',
                            'Hash',
                            'Arg',
                            'Bracket'
                        ], {
                            type: 'Lookup',
                            key: token
                        });
                    }
                } else if (token === '~') {
                    convertToHelperIfTopIsLookup(stack);
                    stack.addToAndPush([
                        'Helper',
                        'Call',
                        'Hash'
                    ], {
                        type: 'Arg',
                        key: token
                    });
                } else if (token === '(') {
                    top = stack.top();
                    if (top.type === 'Lookup') {
                        canReflect.setKeyValue(top, canSymbol.for('can-stache.originalKey'), top.key);
                        stack.replaceTopAndPush({
                            type: 'Call',
                            method: convertToAtLookup(top)
                        });
                    } else {
                        throw new Error('Unable to understand expression ' + tokens.join(''));
                    }
                } else if (token === ')') {
                    stack.popTo(['Call']);
                } else if (token === ',') {
                    stack.popUntil(['Call']);
                } else if (token === '[') {
                    top = stack.top();
                    lastToken = stack.topLastChild();
                    if (lastToken && (lastToken.type === 'Call' || lastToken.type === 'Bracket')) {
                        stack.replaceTopAndPush({
                            type: 'Bracket',
                            root: lastToken
                        });
                    } else if (top.type === 'Lookup' || top.type === 'Bracket') {
                        var bracket = {
                            type: 'Bracket',
                            root: top
                        };
                        canReflect.setKeyValue(bracket, canSymbol.for('can-stache.originalKey'), top.key);
                        stack.replaceTopAndPush(bracket);
                    } else if (top.type === 'Call') {
                        stack.addToAndPush(['Call'], { type: 'Bracket' });
                    } else if (top === ' ') {
                        stack.popUntil([
                            'Lookup',
                            'Call'
                        ]);
                        convertToHelperIfTopIsLookup(stack);
                        stack.addToAndPush([
                            'Helper',
                            'Call',
                            'Hash'
                        ], { type: 'Bracket' });
                    } else {
                        stack.replaceTopAndPush({ type: 'Bracket' });
                    }
                } else if (token === ']') {
                    stack.pop();
                } else if (token === ' ') {
                    stack.push(token);
                }
            }
            return stack.root.children[0];
        }
    };
    module.exports = expression;
});
/*can-stache@3.15.1#src/mustache_core*/
define('can-stache@3.15.1#src/mustache_core', [
    'require',
    'exports',
    'module',
    'can-view-live',
    'can-view-nodelist',
    'can-compute',
    'can-observation',
    './utils',
    './expression',
    'can-util/dom/frag/frag',
    'can-util/dom/attr/attr',
    'can-symbol',
    'can-reflect',
    'can-log/dev/dev',
    'can-globals/document/document'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        var live = require('can-view-live');
        var nodeLists = require('can-view-nodelist');
        var compute = require('can-compute');
        var Observation = require('can-observation');
        var utils = require('./utils');
        var expression = require('./expression');
        var frag = require('can-util/dom/frag/frag');
        var attr = require('can-util/dom/attr/attr');
        var canSymbol = require('can-symbol');
        var canReflect = require('can-reflect');
        var dev = require('can-log/dev/dev');
        var getDocument = require('can-globals/document/document');
        var toDOMSymbol = canSymbol.for('can.toDOM');
        var mustacheLineBreakRegExp = /(?:(^|\r?\n)(\s*)(\{\{([\s\S]*)\}\}\}?)([^\S\n\r]*)($|\r?\n))|(\{\{([\s\S]*)\}\}\}?)/g, mustacheWhitespaceRegExp = /(\s*)(\{\{\{?)(-?)([\s\S]*?)(-?)(\}\}\}?)(\s*)/g, k = function () {
            };
        function valueShouldBeInsertedAsHTML(value) {
            return value !== null && typeof value === 'object' && (typeof value[toDOMSymbol] === 'function' || typeof value.nodeType === 'number');
        }
        var core = {
            expression: expression,
            makeEvaluator: function (scope, helperOptions, nodeList, mode, exprData, truthyRenderer, falseyRenderer, stringOnly) {
                if (mode === '^') {
                    var temp = truthyRenderer;
                    truthyRenderer = falseyRenderer;
                    falseyRenderer = temp;
                }
                var value, helperOptionArg;
                if (exprData instanceof expression.Call) {
                    helperOptionArg = {
                        context: scope.peek('.'),
                        scope: scope,
                        nodeList: nodeList,
                        exprData: exprData,
                        helpers: helperOptions
                    };
                    utils.convertToScopes(helperOptionArg, scope, helperOptions, nodeList, truthyRenderer, falseyRenderer, stringOnly);
                    value = exprData.value(scope, helperOptions, helperOptionArg);
                    if (exprData.isHelper) {
                        return value;
                    }
                } else if (exprData instanceof expression.Bracket) {
                    value = exprData.value(scope);
                    if (exprData.isHelper) {
                        return value;
                    }
                } else if (exprData instanceof expression.Lookup) {
                    value = exprData.value(scope);
                    if (exprData.isHelper) {
                        return value;
                    }
                } else if (exprData instanceof expression.Helper && exprData.methodExpr instanceof expression.Bracket) {
                    value = exprData.methodExpr.value(scope);
                    if (exprData.isHelper) {
                        return value;
                    }
                } else {
                    var readOptions = {
                        isArgument: true,
                        args: [
                            scope.peek('.'),
                            scope
                        ],
                        asCompute: true
                    };
                    var helperAndValue = exprData.helperAndValue(scope, helperOptions, readOptions, nodeList, truthyRenderer, falseyRenderer, stringOnly);
                    var helper = helperAndValue.helper;
                    value = helperAndValue.value;
                    if (helper) {
                        return exprData.evaluator(helper, scope, helperOptions, readOptions, nodeList, truthyRenderer, falseyRenderer, stringOnly);
                    }
                }
                if (!mode) {
                    return value;
                } else if (mode === '#' || mode === '^') {
                    helperOptionArg = {};
                    utils.convertToScopes(helperOptionArg, scope, helperOptions, nodeList, truthyRenderer, falseyRenderer, stringOnly);
                    return function () {
                        var finalValue = canReflect.getValue(value);
                        if (typeof finalValue === 'function') {
                            return finalValue;
                        } else if (typeof finalValue !== 'string' && utils.isArrayLike(finalValue)) {
                            var isObserveList = canReflect.isObservableLike(finalValue) && canReflect.isListLike(finalValue);
                            if (canReflect.getKeyValue(finalValue, 'length')) {
                                if (stringOnly) {
                                    return utils.getItemsStringContent(finalValue, isObserveList, helperOptionArg, helperOptions);
                                } else {
                                    return frag(utils.getItemsFragContent(finalValue, helperOptionArg, scope));
                                }
                            } else {
                                return helperOptionArg.inverse(scope, helperOptions);
                            }
                        } else {
                            return finalValue ? helperOptionArg.fn(finalValue || scope, helperOptions) : helperOptionArg.inverse(scope, helperOptions);
                        }
                    };
                } else {
                }
            },
            makeLiveBindingPartialRenderer: function (expressionString, state) {
                expressionString = expressionString.trim();
                var exprData, partialName = expressionString.split(/\s+/).shift();
                if (partialName !== expressionString) {
                    exprData = core.expression.parse(expressionString);
                }
                return function (scope, options, parentSectionNodeList) {
                    scope.set('scope.lineNumber', state.lineNo);
                    var nodeList = [this];
                    nodeList.expression = '>' + partialName;
                    nodeLists.register(nodeList, null, parentSectionNodeList || true, state.directlyNested);
                    var partialFrag = compute(function () {
                        var localPartialName = partialName;
                        if (exprData && exprData.argExprs.length === 1) {
                            var newContext = canReflect.getValue(exprData.argExprs[0].value(scope, options));
                            if (typeof newContext === 'undefined') {
                                dev.warn('The context (' + exprData.argExprs[0].key + ') you passed into the' + 'partial (' + partialName + ') is not defined in the scope!');
                            } else {
                                scope = scope.add(newContext);
                            }
                        }
                        var partial = options.peek('partials.' + localPartialName);
                        var parent = options;
                        while (!partial && parent) {
                            partial = parent.inlinePartials && parent.inlinePartials[localPartialName];
                            parent = parent._parent;
                        }
                        var renderer;
                        if (partial) {
                            renderer = function () {
                                return partial.render ? partial.render(scope, options, nodeList) : partial(scope, options);
                            };
                        } else {
                            var scopePartialName = scope.read(localPartialName, { isArgument: true }).value;
                            if (scopePartialName === null || !scopePartialName && localPartialName[0] === '*') {
                                return frag('');
                            }
                            if (scopePartialName) {
                                localPartialName = scopePartialName;
                            }
                            renderer = function () {
                                if (typeof localPartialName === 'function') {
                                    return localPartialName(scope, options, nodeList);
                                } else {
                                    var domRenderer = core.getTemplateById(localPartialName);
                                    return domRenderer ? domRenderer(scope, options, nodeList) : getDocument().createDocumentFragment();
                                }
                            };
                        }
                        var res = Observation.ignore(renderer)();
                        return frag(res);
                    });
                    partialFrag.computeInstance.setPrimaryDepth(nodeList.nesting);
                    live.html(this, partialFrag, this.parentNode, nodeList);
                };
            },
            makeStringBranchRenderer: function (mode, expressionString, state) {
                var exprData = core.expression.parse(expressionString), fullExpression = mode + expressionString;
                if (!(exprData instanceof expression.Helper) && !(exprData instanceof expression.Call)) {
                    exprData = new expression.Helper(exprData, [], {});
                }
                var branchRenderer = function branchRenderer(scope, options, truthyRenderer, falseyRenderer) {
                    scope.set('scope.lineNumber', state.lineNo);
                    var evaluator = scope.__cache[fullExpression];
                    if (mode || !evaluator) {
                        evaluator = makeEvaluator(scope, options, null, mode, exprData, truthyRenderer, falseyRenderer, true);
                        if (!mode) {
                            scope.__cache[fullExpression] = evaluator;
                        }
                    }
                    var gotObservableValue = evaluator[canSymbol.for('can.onValue')], res;
                    if (gotObservableValue) {
                        res = canReflect.getValue(evaluator);
                    } else {
                        res = evaluator();
                    }
                    return res == null ? '' : '' + res;
                };
                branchRenderer.exprData = exprData;
                return branchRenderer;
            },
            makeLiveBindingBranchRenderer: function (mode, expressionString, state) {
                var exprData = core.expression.parse(expressionString);
                if (!(exprData instanceof expression.Helper) && !(exprData instanceof expression.Call) && !(exprData instanceof expression.Bracket) && !(exprData instanceof expression.Lookup)) {
                    exprData = new expression.Helper(exprData, [], {});
                }
                var branchRenderer = function branchRenderer(scope, options, parentSectionNodeList, truthyRenderer, falseyRenderer) {
                    scope.set('scope.lineNumber', state.lineNo);
                    var nodeList = [this];
                    nodeList.expression = expressionString;
                    nodeLists.register(nodeList, null, parentSectionNodeList || true, state.directlyNested);
                    var evaluator = makeEvaluator(scope, options, nodeList, mode, exprData, truthyRenderer, falseyRenderer, state.tag);
                    var gotObservableValue = evaluator[canSymbol.for('can.onValue')];
                    var observable;
                    if (gotObservableValue) {
                        observable = evaluator;
                    } else {
                        observable = new Observation(evaluator, null, { isObservable: false });
                    }
                    if (observable instanceof Observation) {
                        observable.compute._primaryDepth = nodeList.nesting;
                    } else if (observable.computeInstance) {
                        observable.computeInstance.setPrimaryDepth(nodeList.nesting);
                    } else if (observable.observation) {
                        observable.observation.compute._primaryDepth = nodeList.nesting;
                    }
                    canReflect.onValue(observable, k);
                    var value = canReflect.getValue(observable);
                    if (typeof value === 'function') {
                        Observation.ignore(value)(this);
                    } else if (canReflect.valueHasDependencies(observable)) {
                        if (state.attr) {
                            live.attr(this, state.attr, observable);
                        } else if (state.tag) {
                            live.attrs(this, observable);
                        } else if (state.text && !valueShouldBeInsertedAsHTML(value)) {
                            if (process.env.NODE_ENV !== 'production') {
                                if (value !== null && typeof value === 'object') {
                                    dev.warn('Previously, the result of ' + expressionString + ' in ' + state.filename + ':' + state.lineNo + ', was being inserted as HTML instead of TEXT. Please use stache.safeString(obj) ' + 'if you would like the object to be treated as HTML.');
                                }
                            }
                            live.text(this, observable, this.parentNode, nodeList);
                        } else {
                            live.html(this, observable, this.parentNode, nodeList);
                        }
                    } else {
                        if (state.attr) {
                            attr.set(this, state.attr, value);
                        } else if (state.tag) {
                            live.attrs(this, value);
                        } else if (state.text && typeof value === 'string') {
                            this.nodeValue = value;
                        } else if (value != null) {
                            nodeLists.replace([this], frag(value, this.ownerDocument));
                        }
                    }
                    canReflect.offValue(observable, k);
                };
                branchRenderer.exprData = exprData;
                return branchRenderer;
            },
            splitModeFromExpression: function (expression, state) {
                expression = expression.trim();
                var mode = expression.charAt(0);
                if ('#/{&^>!<'.indexOf(mode) >= 0) {
                    expression = expression.substr(1).trim();
                } else {
                    mode = null;
                }
                if (mode === '{' && state.node) {
                    mode = null;
                }
                return {
                    mode: mode,
                    expression: expression
                };
            },
            cleanLineEndings: function (template) {
                return template.replace(mustacheLineBreakRegExp, function (whole, returnBefore, spaceBefore, special, expression, spaceAfter, returnAfter, spaceLessSpecial, spaceLessExpression, matchIndex) {
                    spaceAfter = spaceAfter || '';
                    returnBefore = returnBefore || '';
                    spaceBefore = spaceBefore || '';
                    var modeAndExpression = splitModeFromExpression(expression || spaceLessExpression, {});
                    if (spaceLessSpecial || '>{'.indexOf(modeAndExpression.mode) >= 0) {
                        return whole;
                    } else if ('^#!/'.indexOf(modeAndExpression.mode) >= 0) {
                        spaceBefore = returnBefore + spaceBefore && ' ';
                        return spaceBefore + special + (matchIndex !== 0 && returnAfter.length ? returnBefore + '\n' : '');
                    } else {
                        return spaceBefore + special + spaceAfter + (spaceBefore.length || matchIndex !== 0 ? returnBefore + '\n' : '');
                    }
                });
            },
            cleanWhitespaceControl: function (template) {
                return template.replace(mustacheWhitespaceRegExp, function (whole, spaceBefore, bracketBefore, controlBefore, expression, controlAfter, bracketAfter, spaceAfter, matchIndex) {
                    if (controlBefore === '-') {
                        spaceBefore = '';
                    }
                    if (controlAfter === '-') {
                        spaceAfter = '';
                    }
                    return spaceBefore + bracketBefore + expression + bracketAfter + spaceAfter;
                });
            },
            Options: utils.Options,
            getTemplateById: function () {
            }
        };
        var makeEvaluator = core.makeEvaluator, splitModeFromExpression = core.splitModeFromExpression;
        module.exports = core;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-stache@3.15.1#src/intermediate_and_imports*/
define('can-stache@3.15.1#src/intermediate_and_imports', [
    'require',
    'exports',
    'module',
    './mustache_core',
    'can-view-parser'
], function (require, exports, module) {
    var mustacheCore = require('./mustache_core');
    var parser = require('can-view-parser');
    module.exports = function (filename, source) {
        if (arguments.length === 1) {
            source = arguments[0];
            filename = undefined;
        }
        var template = source;
        template = mustacheCore.cleanWhitespaceControl(template);
        template = mustacheCore.cleanLineEndings(template);
        var imports = [], dynamicImports = [], ases = {}, inImport = false, inFrom = false, inAs = false, isUnary = false, importIsDynamic = false, currentAs = '', currentFrom = '';
        function processImport() {
            if (currentAs) {
                ases[currentAs] = currentFrom;
                currentAs = '';
            }
            if (importIsDynamic) {
                dynamicImports.push(currentFrom);
            } else {
                imports.push(currentFrom);
            }
        }
        var intermediate = parser(template, {
            filename: filename,
            start: function (tagName, unary) {
                if (tagName === 'can-import') {
                    isUnary = unary;
                    importIsDynamic = false;
                    inImport = true;
                } else if (tagName === 'can-dynamic-import') {
                    isUnary = unary;
                    importIsDynamic = true;
                    inImport = true;
                } else if (inImport) {
                    importIsDynamic = true;
                    inImport = false;
                }
            },
            attrStart: function (attrName) {
                if (attrName === 'from') {
                    inFrom = true;
                } else if (attrName === 'as' || attrName === 'export-as') {
                    inAs = true;
                }
            },
            attrEnd: function (attrName) {
                if (attrName === 'from') {
                    inFrom = false;
                } else if (attrName === 'as' || attrName === 'export-as') {
                    inAs = false;
                }
            },
            attrValue: function (value) {
                if (inFrom && inImport) {
                    currentFrom = value;
                } else if (inAs && inImport) {
                    currentAs = value;
                }
            },
            end: function (tagName) {
                if ((tagName === 'can-import' || tagName === 'can-dymamic-import') && isUnary) {
                    processImport();
                }
            },
            close: function (tagName) {
                if (tagName === 'can-import' || tagName === 'can-dymamic-import') {
                    processImport();
                }
            },
            chars: function (text) {
                if (text.trim().length > 0) {
                    importIsDynamic = true;
                }
            },
            special: function (text) {
                importIsDynamic = true;
            }
        }, true);
        return {
            intermediate: intermediate,
            imports: imports,
            dynamicImports: dynamicImports,
            ases: ases,
            exports: ases
        };
    };
});
/*done-autorender@1.5.2#src/parse*/
define('done-autorender@1.5.2#src/parse', [
    'module',
    'can-stache/src/intermediate_and_imports',
    'can-util/js/each/each'
], function (module, getIntermediateAndImports, each) {
    return function (source, loader, zoneOpts) {
        var intermediateAndImports = getIntermediateAndImports(source);
        var ases = intermediateAndImports.ases;
        var imports = intermediateAndImports.imports.slice(0);
        var args = [];
        each(ases, function (from, name) {
            imports.splice(imports.indexOf(from), 1);
            imports.unshift(from);
            if (name[0] === '@') {
                name = name.substr(1);
            }
            args.unshift(name);
        });
        var n = function (name) {
            return loader.normalize(name, module.id);
        };
        var params = [
            [
                n('can-stache'),
                'stache'
            ],
            [
                n('can-util/dom/data/data'),
                'domData'
            ],
            [
                n('can-route'),
                'route'
            ],
            [
                n('can-util/dom/child-nodes/child-nodes'),
                'childNodes'
            ],
            [
                n('can-util/dom/mutate/mutate'),
                'mutate'
            ],
            [
                n('can-util/namespace'),
                'can'
            ],
            [
                'module',
                'module'
            ],
            [
                n('can-view-import'),
                'canViewImport'
            ],
            [
                '@loader',
                'loader'
            ],
            [
                '@steal',
                'steal'
            ]
        ];
        if (zoneOpts.useZones) {
            params.unshift([
                n('can-zone/xhr'),
                'xhrZone'
            ]);
            params.unshift([
                n('can-zone'),
                'Zone'
            ]);
            if (zoneOpts.useDebug) {
                params.unshift([
                    n('can-zone/debug'),
                    'debugZone'
                ]);
            }
        }
        each(params, function (param) {
            imports.unshift(param[0]);
            args.unshift(param[1]);
        });
        return {
            imports: imports,
            rawImports: intermediateAndImports.imports,
            dynamicImports: intermediateAndImports.dynamicImports,
            args: args,
            ases: ases,
            intermediate: intermediateAndImports.intermediate
        };
    };
});
/*steal-stache@3.1.3#add-bundles*/
define('steal-stache@3.1.3#add-bundles', [
    'require',
    'exports',
    'module',
    '@loader'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        var loader = require('@loader');
        module.exports = function (dynamicImports, parentName) {
            if (!dynamicImports.length) {
                return Promise.resolve();
            }
            var localLoader = loader.localLoader || loader;
            var bundle = localLoader.bundle;
            if (!bundle) {
                bundle = localLoader.bundle = [];
            }
            var bundleNormalizes = [];
            dynamicImports.forEach(function (moduleName) {
                var bundleNormalize = loader.normalize(moduleName, parentName).then(function (moduleName) {
                    if (!~bundle.indexOf(moduleName)) {
                        bundle.push(moduleName);
                    }
                });
                bundleNormalizes.push(bundleNormalize);
            });
            return Promise.all(bundleNormalizes);
        };
    }(function () {
        return this;
    }(), require, exports, module));
});
/*done-autorender@1.5.2#src/init*/
define('done-autorender@1.5.2#src/init', [
    '@steal',
    '@loader',
    'module',
    './template',
    './parse',
    'steal-stache/add-bundles',
    'can-util/js/each/each'
], function (steal, loader, module, template, parse, addBundles, each) {
    return function init(zoneOpts) {
        var main;
        var isNode = typeof process === 'object' && {}.toString.call(process) === '[object process]';
        if (!isNode) {
            steal.done().then(setup);
        }
        function setup() {
            loader.import(loader.main).then(function (r) {
                main = r;
                liveReload();
            });
        }
        function liveReload() {
            if (!loader.liveReloadInstalled) {
                return;
            }
            loader.import('live-reload', { name: module.id }).then(function (reload) {
                loader.normalize(loader.main).then(function (mainName) {
                    reload(function () {
                        document.documentElement.removeAttribute('data-attached');
                        main.renderAndAttach();
                    });
                    reload(mainName, function (r) {
                        main = r;
                    });
                });
            });
        }
        function map(obj, cb) {
            var out = [];
            each(obj, function (a, b) {
                out.push(cb(a, b));
            });
            return out;
        }
        function translate(load) {
            var result = parse(load.source, this, zoneOpts);
            var localLoader = loader.localLoader || loader;
            if (localLoader.slimConfig) {
                var toMap = localLoader.slimConfig.toMap;
                Array.prototype.push.apply(toMap, result.rawImports);
                Array.prototype.push.apply(toMap, result.dynamicImports);
            }
            return Promise.all([
                addBundles(result.dynamicImports, load.name),
                Promise.all(result.imports)
            ]).then(function (pResults) {
                var output = template({
                    imports: JSON.stringify(pResults[1]),
                    args: result.args.join(', '),
                    zoneOpts: JSON.stringify(zoneOpts),
                    intermediate: JSON.stringify(result.intermediate),
                    ases: map(result.ases, function (from, name) {
                        return '\t' + name + ': ' + name + '[\'default\'] || ' + name;
                    }).join(',\n')
                });
                return output;
            });
        }
        return { translate: translate };
    };
});
/*can-zone@0.6.23#lib/env*/
define('can-zone@0.6.23#lib/env', function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var isNode = typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';
        var nodeRequire = typeof System !== 'undefined' && System._nodeRequire ? System._nodeRequire : typeof require === 'function' ? require : function () {
        };
        var isNW = isNode && function () {
            try {
                var requireAlias = 'require';
                if (typeof System !== 'undefined' && System._nodeRequire) {
                    return System._nodeRequire('nw.gui') !== 'undefined';
                } else if (typeof global === 'object' && global[requireAlias]) {
                    return global[requireAlias]('nw.gui') !== 'undefined';
                } else {
                    return false;
                }
            } catch (e) {
                return false;
            }
        }();
        var isWorker = typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope;
        var g = isWorker ? self : isNW ? window : isNode ? global : window;
        exports.isNode = isNode;
        exports.isNW = isNW;
        exports.isWorker = isWorker;
        exports.global = g;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-zone@0.6.23#lib/util*/
define('can-zone@0.6.23#lib/util', function (require, exports, module) {
    'use strict';
    exports.forEach = Array.prototype.forEach || function (fn) {
        for (var i = 0, len = this.length; i < len; i++) {
            fn.call(this, this[i], i);
        }
    };
    var supportsSymbol = typeof Symbol === 'function';
    exports.symbol = function (str) {
        return supportsSymbol ? Symbol(str) : str;
    };
    exports.defineProperty = function (obj, prop, defn) {
        if (Object.defineProperty) {
            Object.defineProperty(obj, prop, defn);
        } else {
            obj[prop] = defn.value;
        }
    };
});
/*can-zone@0.6.23#lib/zones/globals*/
define('can-zone@0.6.23#lib/zones/globals', [
    'require',
    'exports',
    'module',
    '../util',
    '../env',
    '../zone'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var util = require('../util');
        var env = require('../env');
        var g = env.global;
        var Zone = require('../zone');
        if (env.isNode) {
            var globalTimeoutId = 1;
        }
        module.exports = function () {
            var globals, overrides = [];
            return {
                name: 'globals',
                plugins: [promiseZone],
                created: function () {
                    var zone = this;
                    globals = this.globals || {};
                    function findObj(name, obj) {
                        var parts = name.split('.');
                        var property = parts.pop();
                        util.forEach.call(parts, function (prop) {
                            var n = obj[prop];
                            if (!n) {
                                n = obj[prop] = {};
                            }
                            obj = n;
                        });
                        return {
                            obj: obj,
                            prop: property
                        };
                    }
                    function addGlobal(name, value) {
                        var info = findObj(name, g);
                        overrides.push(new Override(info.obj, info.prop, function () {
                            return value;
                        }));
                    }
                    for (var name in globals) {
                        addGlobal(name, globals[name]);
                    }
                },
                beforeTask: function (task) {
                    if (task.nestedTask)
                        return;
                    util.forEach.call(overrides, function (o) {
                        o.trap();
                    });
                },
                afterTask: function (task) {
                    if (task.nestedTask)
                        return;
                    util.forEach.call(overrides, function (o) {
                        o.release();
                    });
                }
            };
        };
        function Override(obj, name, fn) {
            this.oldValue = obj[name];
            this.obj = obj;
            this.name = name;
            this.value = fn(this.oldValue, this);
        }
        Override.prototype.trap = function () {
            this.obj[this.name] = this.value;
        };
        Override.prototype.release = function () {
            this.obj[this.name] = this.oldValue;
        };
        function promiseZone() {
            var promiseThen = function () {
                    if (!Zone.current || oldPromiseThen.zoneWrapped) {
                        return oldPromiseThen.apply(this, arguments);
                    }
                    return Zone.tasks.then(oldPromiseThen).apply(this, arguments);
                }, oldPromiseThen;
            return {
                beforeTask: function (task) {
                    if (task.nestedTask)
                        return;
                    oldPromiseThen = Promise.prototype.then;
                    Promise.prototype.then = promiseThen;
                },
                afterTask: function (task) {
                    if (task.nestedTask)
                        return;
                    Promise.prototype.then = oldPromiseThen;
                }
            };
        }
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-zone@0.6.23#register*/
define('can-zone@0.6.23#register', function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        'format cjs';
        (function () {
            var isNode = typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';
            var isWorker = typeof WorkerGlobalScope !== 'undefined' && typeof self !== 'undefined' && self instanceof WorkerGlobalScope;
            var g = typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope ? self : isNode ? global : window;
            if (typeof module !== 'undefined' && !!module.exports) {
                module.exports = wrapAll;
            }
            var forEach = Array.prototype.forEach || function (cb) {
                var i = 0, len = this.length;
                for (; i < len; i++) {
                    cb.call(this, this[i], i);
                }
            };
            var props = Array.prototype.concat.call([
                'setTimeout',
                'clearTimeout',
                'requestAnimationFrame',
                'cancelAnimationFrame',
                'Promise.prototype.then',
                'XMLHttpRequest.prototype.send',
                'Node.prototype.addEventListener',
                'Node.prototype.removeEventListener',
                'process.nextTick',
                'setImmediate',
                'clearImmediate',
                {
                    prop: 'MutationObserver',
                    fn: function (MutationObserver) {
                        return function (fn) {
                            return new MutationObserver(fn);
                        };
                    }
                }
            ], getGlobalEventHandlersNames().map(function (name) {
                return 'HTMLElement.prototype.' + name;
            }));
            wrapAll(g);
            if (g.Promise) {
                monitor(g, 'Promise', 'Promise.prototype.then', g);
            }
            function extract(obj, prop) {
                var parts = prop.split('.');
                while (parts.length > 1) {
                    prop = parts.shift();
                    obj = obj[prop];
                    if (!obj)
                        break;
                    if (parts.length === 1)
                        prop = parts[0];
                }
                return [
                    obj,
                    prop
                ];
            }
            function wrapAll(globalObj) {
                var global = globalObj || g;
                var wrapped = global.__canZoneWrapped;
                if (!wrapped) {
                    wrapped = global.__canZoneWrapped = {};
                }
                forEach.call(props, function (prop) {
                    var fn;
                    if (typeof prop === 'object') {
                        fn = prop.fn;
                        prop = prop.prop;
                    }
                    var key = prop;
                    if (wrapped[key]) {
                        return;
                    }
                    var results = extract(global, prop);
                    var obj = results[0];
                    prop = results[1];
                    if (!isGlobalEventHandler(prop) && (!obj || !obj[prop])) {
                        return;
                    } else {
                        wrapped[key] = true;
                    }
                    wrapInZone(obj, prop, fn, global);
                });
            }
            function wrapInZone(object, property, fn, global) {
                var wrappedFn = function () {
                    var Zone = global.CanZone;
                    if (typeof Zone !== 'undefined' && !!Zone.current) {
                        return Zone.tasks[property](fn, Zone).apply(this, arguments);
                    }
                    return fn.apply(this, arguments);
                };
                var descriptor = Object.getOwnPropertyDescriptor(object, property) || {};
                if (isGlobalEventHandler(property)) {
                    fn = descriptor.set;
                    descriptor.set = wrappedFn;
                } else {
                    fn = fn ? fn(object[property]) : object[property];
                    descriptor.value = wrappedFn;
                    descriptor.writable = true;
                }
                Object.defineProperty(object, property, descriptor);
                wrappedFn.zoneWrapped = true;
            }
            function isGlobalEventHandler(property) {
                return property.substr(0, 2) === 'on';
            }
            function getGlobalEventHandlersNames() {
                var names = [];
                if (!isNode && !isWorker) {
                    names = Object.getOwnPropertyNames(HTMLElement.prototype).filter(isGlobalEventHandler);
                }
                return names;
            }
            function monitor(object, property, thingToRewrap, global) {
                var current = object[property];
                Object.defineProperty(object, property, {
                    get: function () {
                        return current;
                    },
                    set: function (val) {
                        var hasChanged = !val.zoneWrapped && val !== current;
                        current = val;
                        if (hasChanged) {
                            var results = extract(object, thingToRewrap);
                            var localObject = results[0];
                            var localProperty = results[1];
                            wrapInZone(localObject, localProperty, null, global);
                            monitor(object, property, thingToRewrap, global);
                        }
                    }
                });
            }
        }());
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-zone@0.6.23#lib/tasks*/
define('can-zone@0.6.23#lib/tasks', [
    'require',
    'exports',
    'module',
    './env',
    './util'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var env = require('./env');
        var util = require('./util');
        var slice = Array.prototype.slice;
        var isWorker = typeof WorkerGlobalScope !== 'undefined' && typeof self !== 'undefined' && self instanceof WorkerGlobalScope;
        if (env.isNode) {
            var globalTimeoutId = 1;
        }
        var addTimer = function (callback, Zone) {
            var timeoutId = callback();
            var id = timeoutId;
            if (env.isNode && typeof id !== 'number') {
                id = timeoutId.__timeoutId = globalTimeoutId++;
            }
            var zone = Zone.current;
            if (!zone.isResolved) {
                zone.ids[id] = timeoutId;
            }
            return {
                timeoutId: timeoutId,
                id: id
            };
        };
        var removeTimer = function (timeoutId, callback, Zone) {
            if (timeoutId == null) {
                return callback();
            }
            var zone = Zone.current;
            var ids = zone.ids;
            var id = env.isNode && typeof timeoutId !== 'number' ? timeoutId.__timeoutId : timeoutId;
            if (!zone.isResolved && ids[id]) {
                delete ids[id];
                zone.removeWait();
            }
            return callback();
        };
        var getGlobalEventHandlersNames = function getGlobalEventHandlersNames() {
            var names = [];
            if (!env.isNode && !isWorker) {
                names = Object.getOwnPropertyNames(HTMLElement.prototype).filter(function isGlobalEventHandler(name) {
                    return name.substr(0, 2) === 'on';
                });
            }
            return names;
        };
        var defineSetTask = function defineSetTask(set, Zone) {
            return function setTask(newValue) {
                if (newValue) {
                    var outHandler = newValue[EVENT_HANDLER];
                    if (outHandler === undefined) {
                        outHandler = Zone.current.wrap(newValue);
                        newValue[EVENT_HANDLER] = outHandler;
                    }
                    set.call(this, outHandler);
                } else {
                    set.call(this, newValue);
                }
            };
        };
        getGlobalEventHandlersNames().forEach(function (name) {
            exports[name] = defineSetTask;
        });
        exports.setTimeout = function (setTimeout, Zone) {
            return function (fn, timeout) {
                var args = Array.prototype.slice.call(arguments);
                var zone = Zone.current;
                var idInfo;
                args[0] = zone.waitFor(function () {
                    delete zone.ids[idInfo.id];
                    return fn.apply(this, arguments);
                });
                var self = this;
                idInfo = addTimer(function () {
                    return setTimeout.apply(self, args);
                }, Zone);
                return idInfo.timeoutId;
            };
        };
        exports.clearTimeout = function (clearTimeout, Zone) {
            return function (timeoutId) {
                var args = arguments, self = this;
                return removeTimer(timeoutId, function () {
                    return clearTimeout.apply(self, args);
                }, Zone);
            };
        };
        exports.setImmediate = function (setImmediate, Zone) {
            return function (fn) {
                var idInfo;
                var zone = Zone.current;
                var callback = zone.waitFor(function () {
                    delete zone.ids[idInfo.id];
                    return fn.apply(this, arguments);
                });
                var self = this, args = slice.call(arguments, 1);
                idInfo = addTimer(function () {
                    return setImmediate.apply(self, [callback].concat(args));
                }, Zone);
                return idInfo.timeoutId;
            };
        };
        exports.clearImmediate = function (clearImmediate, Zone) {
            return function (immediateId) {
                var args = arguments, self = this;
                return removeTimer(immediateId, function () {
                    return clearImmediate.apply(self, args);
                }, Zone);
            };
        };
        exports.requestAnimationFrame = function (rAF, Zone) {
            return function (fn) {
                var zone = Zone.current;
                var callback = zone.waitFor(fn);
                var id = rAF.call(this, callback);
                zone.rafs[id] = true;
                return id;
            };
        };
        exports.cancelAnimationFrame = function (cAF, Zone) {
            return function (id) {
                var zone = Zone.current;
                var ids = zone.rafs;
                var res = cAF.call(this, id);
                if (!zone.isResolved && ids[id]) {
                    delete ids[id];
                    zone.removeWait();
                }
                return res;
            };
        };
        exports.then = function (then, Zone) {
            return function (onFulfilled, onRejected) {
                var fn;
                var rejected;
                var callback = Zone.current.waitFor(function (val) {
                    if (fn) {
                        return fn.apply(this, arguments);
                    } else if (rejected) {
                        return Promise.reject(val);
                    }
                    return val;
                }, false);
                var callWith = function (cb, isError) {
                    return function () {
                        fn = cb;
                        rejected = !!isError;
                        return callback.apply(this, arguments);
                    };
                };
                return then.call(this, callWith(onFulfilled), callWith(onRejected, true));
            };
        };
        var supportsOnload = undefined;
        exports.send = function (send, Zone) {
            if (typeof supportsOnload === 'undefined') {
                supportsOnload = 'onload' in new XMLHttpRequest();
            }
            return function () {
                var onreadystatechange = this.onreadystatechange, onload = this.onload, onerror = this.onerror, thisXhr = this, zone = Zone.current;
                zone.addWait();
                if (supportsOnload && this.onload) {
                    this.onload = createCallback(onload);
                    this.onerror = createCallback(onerror);
                } else {
                    onreadystatechange = onreadystatechange || function () {
                    };
                    var callback = createCallback(onreadystatechange);
                    var ourReadystatechange = function (ev) {
                        var xhr = ev ? ev.target : thisXhr;
                        if (xhr.readyState === 4) {
                            return callback.apply(this, arguments);
                        } else {
                            if (xhr.onload) {
                                xhr.onload(ev);
                            }
                            return onreadystatechange.apply(this, arguments);
                        }
                    };
                    this.onreadystatechange = ourReadystatechange;
                    Object.defineProperty(this, 'onreadystatechange', {
                        enumerable: true,
                        configurable: true,
                        get: function () {
                            return ourReadystatechange;
                        },
                        set: function (newFn) {
                            onreadystatechange = newFn;
                            callback = createCallback(onreadystatechange);
                        }
                    });
                }
                function createCallback(fn) {
                    fn = fn || function () {
                    };
                    return function () {
                        var task = new Zone.Task(zone, fn);
                        var res = task.run(this, arguments);
                        zone.removeWait();
                        return res;
                    };
                }
                return send.apply(this, arguments);
            };
        };
        exports.nextTick = function (nextTick, Zone) {
            return function (fn) {
                var callback = Zone.current.waitFor(fn);
                var args = slice.call(arguments, 1);
                args.unshift(callback);
                return nextTick.apply(process, args);
            };
        };
        exports.MutationObserver = function (MutationObserver, Zone) {
            return function (fn) {
                fn = Zone.current.wrap(fn);
                return new MutationObserver(fn);
            };
        };
        var EVENT_HANDLER = util.symbol('zone-eventhandler');
        exports.addEventListener = function (addEventListener, Zone) {
            return function (eventName, handler, useCapture) {
                var outHandler = handler[EVENT_HANDLER];
                if (outHandler === undefined) {
                    outHandler = Zone.current.wrap(handler);
                    handler[EVENT_HANDLER] = outHandler;
                }
                return addEventListener.call(this, eventName, outHandler, useCapture);
            };
        };
        exports.removeEventListener = function (removeEventListener, Zone) {
            return function (eventName, handler, useCapture) {
                var outHandler = handler && handler[EVENT_HANDLER] || handler;
                return removeEventListener.call(this, eventName, outHandler, useCapture);
            };
        };
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-zone@0.6.23#lib/zone*/
define('can-zone@0.6.23#lib/zone', [
    'require',
    'exports',
    'module',
    './env',
    './zones/globals',
    './util',
    '../register',
    './tasks'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var g = require('./env').global;
        var Promise = g.Promise;
        var globalsZone = require('./zones/globals');
        var forEach = require('./util').forEach;
        var registerZone = require('../register');
        var slice = Array.prototype.slice;
        var noop = function () {
        };
        function Deferred() {
            var dfd = this;
            this.promise = new Promise(function (resolve, reject) {
                dfd.resolve = resolve;
                dfd.reject = reject;
            });
        }
        function Task(zone, fn, catchErrors) {
            this.zone = zone;
            this.fn = fn;
            this.catchErrors = catchErrors;
            this.nestedTask = zone.runningTask;
        }
        Task.prototype.run = function (ctx, args) {
            var Zone = this.zone.constructor;
            var previousZone = Zone.current;
            var zone = Zone.current = this.zone;
            if (!this.nestedTask)
                zone.execHook('beforeTask', this);
            var res;
            try {
                zone.runningTask = true;
                res = this.fn.apply(ctx, args);
                Zone.current = previousZone;
                if (!this.nestedTask)
                    zone.execHookR('afterTask', this);
            } catch (err) {
                Zone.current = previousZone;
                if (!this.nestedTask) {
                    zone.execHookR('afterTask', this);
                }
                if (this.catchErrors !== false && !this.zone.isResolved) {
                    zone.errors.push(err);
                } else {
                    throw err;
                }
            } finally {
                zone.runningTask = this.nestedTask;
            }
            return res;
        };
        var hooks = [
            'beforeTask',
            'afterTask',
            'created',
            'ended',
            'beforeRun',
            'afterRun'
        ];
        var commonGlobals = [
            'document',
            'window',
            'location'
        ];
        function buildZoneSpec(zone, spec, plugins, processedSpecs) {
            spec = spec || {};
            processedSpecs = processedSpecs || [];
            if (processedSpecs.indexOf(spec) !== -1) {
                return;
            } else {
                processedSpecs.push(spec);
            }
            plugins = plugins || [];
            if (typeof spec === 'function') {
                spec = spec(zone.data);
            } else if (Array.isArray(spec)) {
                spec = { plugins: spec };
            }
            if (spec.plugins) {
                plugins = plugins.concat(spec.plugins);
            }
            forEach.call(plugins, function (plugin) {
                buildZoneSpec(zone, plugin, null, processedSpecs);
            });
            if (spec.hooks) {
                zone.hooks = zone.hooks.concat(spec.hooks);
            }
            forEach.call(zone.hooks, function (hook) {
                var propName = hook + 's';
                var array = zone[propName];
                if (!array) {
                    array = zone[propName] = [];
                }
                if (spec[hook]) {
                    array.push(spec[hook]);
                }
            });
            var globals = extend({}, spec.globals || {});
            forEach.call(commonGlobals, function (name) {
                if (spec[name])
                    globals[name] = spec[name];
            });
            for (var p in globals) {
                zone.globals[p] = globals[p];
            }
        }
        function Zone(spec) {
            spec = spec || {};
            this.deferred = new Deferred();
            this.waits = 0;
            this.ids = Object.create(null);
            this.rafs = Object.create(null);
            this.errors = [];
            this.data = {};
            this.globals = {};
            this.parent = this.constructor.current;
            this.hooks = slice.call(hooks);
            buildZoneSpec(this, spec, [globalsZone]);
            this.execHook('created');
        }
        Zone.waitFor = function (fn, catchErrors) {
            var fun = fn || noop;
            var zone = this.current;
            if (!zone)
                return fun;
            return zone.waitFor(fun, catchErrors);
        };
        Zone.error = function (error) {
            var zone = this.current;
            if (!zone)
                return error;
            zone.errors.push(error);
            return error;
        };
        Zone.ignore = function (fn) {
            var Zone = this;
            return function () {
                var zone = Zone.current;
                if (!zone)
                    return fn.apply(this, arguments);
                var task = new Task(zone);
                Zone.current = undefined;
                zone.execHookR('afterTask', task);
                var res = fn.apply(this, arguments);
                zone.execHook('beforeTask', task);
                Zone.current = zone;
                return res;
            };
        };
        Zone.prototype.runTask = function (fn, ctx, args, catchErrors, decrementWaits) {
            var res, error;
            var task = new Task(this, fn, catchErrors);
            try {
                res = task.run(ctx, args);
            } catch (err) {
                error = err;
            }
            if (decrementWaits && this.removeWait)
                this.removeWait();
            if (error)
                throw error;
            return res;
        };
        Zone.prototype.run = function (fn) {
            if (this.isResolved) {
                this.deferred = new Deferred();
                this.isResolved = false;
            } else {
                this.execHook('beforeRun');
            }
            var task = new Task(this, fn);
            this.data.result = task.run();
            if (!this.isResolved) {
                this.execHook('afterRun');
            }
            if (!this.waits || this.errors.length) {
                this.end();
            }
            return this.deferred.promise;
        };
        Zone.prototype.fork = function (zoneSpec) {
            var Zone = this.constructor;
            var plugins = [];
            if (zoneSpec)
                plugins.push(zoneSpec);
            plugins.unshift(this);
            var newZone = new Zone({ plugins: plugins });
            return newZone;
        };
        Zone.prototype.execHook = function (hook) {
            var args = slice.call(arguments, 1);
            var zone = this;
            var prop = hook + 's';
            var array = this[prop];
            if (array) {
                forEach.call(array, function (fn) {
                    fn.apply(zone, args);
                });
            }
        };
        Zone.prototype.execHookR = function (hook) {
            var args = slice.call(arguments, 1);
            var zone = this;
            var prop = hook + 's';
            var array = this[prop];
            if (array) {
                var i = array.length - 1;
                for (; i >= 0; i--) {
                    array[i].apply(zone, args);
                }
            }
        };
        Zone.prototype.wrap = function (fn, catchErrors) {
            var zone = this;
            return function () {
                return zone.runTask(fn, this, arguments, catchErrors);
            };
        };
        Zone.prototype.end = function () {
            if (!this.isResolved) {
                this.execHook('ended');
            }
            var dfd = this.deferred;
            if (this.errors.length) {
                var error = this.errors[0];
                error.errors = this.errors;
                dfd.reject(error);
            } else {
                dfd.resolve(this.data);
            }
            this.isResolved = true;
        };
        Zone.prototype.waitFor = function (fn, catchErrors) {
            this.addWait();
            var zone = this;
            return function () {
                return zone.runTask(fn, this, arguments, catchErrors, true);
            };
        };
        Zone.prototype.addWait = function () {
            this.waits++;
            if (this.parent) {
                this.parent.addWait();
            }
        };
        Zone.prototype.removeWait = function () {
            this.waits--;
            if (this.waits === 0) {
                this.end();
            }
            if (this.parent) {
                this.parent.removeWait();
            }
        };
        Zone.Task = Task;
        Zone.register = registerZone;
        function extend(a, b) {
            if (!b)
                return a;
            for (var p in b) {
                a[p] = b[p];
            }
            return a;
        }
        Zone.tasks = {};
        addTasks(require('./tasks'));
        function addTasks(tasks) {
            for (var p in tasks) {
                Zone.tasks[p] = tasks[p];
            }
        }
        g.CanZone = g.CanZone || Zone;
        if (typeof module !== 'undefined' && module.exports) {
            module.exports = Zone;
        }
    }(function () {
        return this;
    }(), require, exports, module));
});
/*done-autorender@1.5.2#src/autorender*/
define('done-autorender@1.5.2#src/autorender', [
    './init',
    '@steal',
    'can-zone'
], function (autorenderInit, steal) {
    var l = steal.loader;
    var isDevelopment = l.isEnv('development') && !l.isPlatform('build');
    var zoneOpts = {
        useZones: true,
        useDebug: isDevelopment,
        timeout: Number(l.autorenderTimeout || 5000),
        debugBrk: isDevelopment && l.autorenderDebugBreak
    };
    return autorenderInit(zoneOpts);
});
/*can-util@3.14.0#namespace*/
define('can-util@3.14.0#namespace', [
    'require',
    'exports',
    'module',
    'can-namespace'
], function (require, exports, module) {
    'use strict';
    module.exports = require('can-namespace');
});
/*can-zone@0.6.23#lib/zones/xhr*/
define('can-zone@0.6.23#lib/zones/xhr', [
    'require',
    'exports',
    'module',
    '../env',
    '../util'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var env = require('../env');
        var util = require('../util');
        module.exports = env.isNode ? nodeZone : browserZone;
        var WAIT_URL = util.symbol('__canWaitURL');
        function browserZone(data) {
            var cache, oldXHR, oldOpen, oldSend;
            var noop = Function.prototype;
            var matches = function (request, url, body) {
                var requestURL = request.url;
                if (url.substr(0, 1) === '/') {
                    requestURL = requestURL.replace(/^\w*:\/{2}[^\/]+\//i, '/');
                }
                return requestURL === url && (!body || request.data === body);
            };
            var open = function (method, url) {
                util.defineProperty(this, WAIT_URL, {
                    value: url,
                    enumerable: false
                });
                return oldOpen.apply(this, arguments);
            };
            var send = function (body) {
                var data, response;
                var url = this[WAIT_URL];
                for (var i = 0, len = cache.length; i < len; i++) {
                    data = cache[i];
                    if (matches(data.request, url, body)) {
                        response = setResponse(this, data.response);
                        cache.splice(i, 1);
                        break;
                    }
                }
                if (response) {
                    var onload = this.onload || noop;
                    var onreadystatechange = this.onreadystatechange || noop;
                    var xhr = this;
                    setTimeout(function () {
                        var ev = { target: xhr };
                        onreadystatechange.call(xhr, ev);
                        onload.call(xhr, ev);
                    }, 0);
                    return;
                }
                return oldSend.apply(this, arguments);
            };
            return {
                beforeTask: function () {
                    cache = env.global.XHR_CACHE;
                    if (cache) {
                        oldXHR = XMLHttpRequest;
                        oldOpen = XMLHttpRequest.prototype.open;
                        oldSend = XMLHttpRequest.prototype.send;
                        XMLHttpRequest.prototype.open = open;
                        XMLHttpRequest.prototype.send = send;
                    }
                },
                afterTask: function () {
                    if (cache && oldXHR === XMLHttpRequest) {
                        XMLHttpRequest.prototype.open = oldOpen;
                        XMLHttpRequest.prototype.send = oldSend;
                    }
                }
            };
        }
        function nodeZone(data) {
            var oldXHR, oldOpen, oldSend;
            var open = function (method, url) {
                util.defineProperty(this, WAIT_URL, {
                    value: url,
                    enumerable: false
                });
                return oldOpen.apply(this, arguments);
            };
            var send = function (body) {
                var onload = this.onload, thisXhr = this;
                this.onload = function (ev) {
                    var xhr = ev ? ev.target : thisXhr;
                    if (!data.xhr) {
                        data.xhr = new XHR();
                    }
                    data.xhr.data.push({
                        request: {
                            url: xhr[WAIT_URL],
                            data: body
                        },
                        response: {
                            status: xhr.status,
                            responseText: xhr.responseText,
                            headers: xhr.getAllResponseHeaders()
                        }
                    });
                    if (onload) {
                        return onload.apply(this, arguments);
                    }
                };
                return oldSend.apply(this, arguments);
            };
            var supportsXHR = function () {
                return typeof XMLHttpRequest !== 'undefined';
            };
            return {
                beforeTask: function () {
                    oldXHR = XMLHttpRequest;
                    oldSend = XMLHttpRequest.prototype.send;
                    oldOpen = XMLHttpRequest.prototype.open;
                    XMLHttpRequest.prototype.send = send;
                    XMLHttpRequest.prototype.open = open;
                },
                afterTask: function () {
                    if (oldXHR === XMLHttpRequest) {
                        XMLHttpRequest.prototype.send = oldSend;
                        XMLHttpRequest.prototype.open = oldOpen;
                    }
                }
            };
        }
        function setResponse(xhr, response) {
            util.defineProperty(xhr, 'responseText', { value: response.responseText });
            util.defineProperty(xhr, 'status', { value: response.status });
            util.defineProperty(xhr, 'readyState', { value: 4 });
            xhr.getAllResponseHeaders = function () {
                return response.headers;
            };
            return xhr;
        }
        var escapeTable = {
            '<': '\\u003c',
            '>': '\\u003e',
            '&': '\\u0026',
            '=': '\\u003d'
        };
        var escapeRegExp = new RegExp('(' + Object.keys(escapeTable).join('|') + ')', 'g');
        function XHR() {
            this.data = [];
        }
        XHR.prototype.toString = function () {
            var json = JSON.stringify(this.data);
            json = json.replace(escapeRegExp, function (m) {
                return escapeTable[m];
            });
            return 'XHR_CACHE = ' + json + ';';
        };
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-zone@0.6.23#xhr*/
define('can-zone@0.6.23#xhr', [
    'require',
    'exports',
    'module',
    './lib/zones/xhr'
], function (require, exports, module) {
    'use strict';
    module.exports = require('./lib/zones/xhr');
});
/*can-util@3.14.0#js/import/import*/
define('can-util@3.14.0#js/import/import', [
    'require',
    'exports',
    'module',
    '../is-function/is-function',
    'can-globals/global/global',
    'can-namespace'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var isFunction = require('../is-function/is-function');
        var global = require('can-globals/global/global')();
        var namespace = require('can-namespace');
        module.exports = namespace.import = function (moduleName, parentName) {
            return new Promise(function (resolve, reject) {
                try {
                    if (typeof global.System === 'object' && isFunction(global.System['import'])) {
                        global.System['import'](moduleName, { name: parentName }).then(resolve, reject);
                    } else if (global.define && global.define.amd) {
                        global.require([moduleName], function (value) {
                            resolve(value);
                        });
                    } else if (global.require) {
                        resolve(global.require(moduleName));
                    } else {
                        if (typeof stealRequire !== 'undefined') {
                            steal.import(moduleName, { name: parentName }).then(resolve, reject);
                        } else {
                            resolve();
                        }
                    }
                } catch (err) {
                    reject(err);
                }
            });
        };
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-view-import@3.2.9#can-view-import*/
define('can-view-import@3.2.9#can-view-import', [
    'require',
    'exports',
    'module',
    'can-assign',
    'can-dom-data-state',
    'can-globals/document/document',
    'can-util/dom/child-nodes/child-nodes',
    'can-util/js/import/import',
    'can-util/dom/mutate/mutate',
    'can-view-nodelist',
    'can-view-callbacks',
    'can-event',
    'can-log/',
    'can-log/dev/dev'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        var assign = require('can-assign');
        var canData = require('can-dom-data-state');
        var DOCUMENT = require('can-globals/document/document');
        var getChildNodes = require('can-util/dom/child-nodes/child-nodes');
        var importer = require('can-util/js/import/import');
        var mutate = require('can-util/dom/mutate/mutate');
        var nodeLists = require('can-view-nodelist');
        var viewCallbacks = require('can-view-callbacks');
        var tag = viewCallbacks.tag;
        var events = require('can-event');
        var canLog = require('can-log/');
        var dev = require('can-log/dev/dev');
        function processImport(el, tagData) {
            var moduleName = el.getAttribute('from');
            var templateModule = tagData.options.get('helpers.module');
            var parentName = templateModule ? templateModule.id : undefined;
            if (!moduleName) {
                return Promise.reject('No module name provided');
            }
            var importPromise = importer(moduleName, parentName);
            importPromise.catch(function (err) {
                canLog.error(err);
            });
            canData.set.call(el, 'viewModel', importPromise);
            canData.set.call(el, 'scope', importPromise);
            var scope = tagData.scope.add(importPromise, { notContext: true });
            var handOffTag = el.getAttribute('can-tag');
            if (handOffTag) {
                var callback = tag(handOffTag);
                if (!callback || callback === viewCallbacks.defaultCallback) {
                    dev.error(new Error('The tag \'' + handOffTag + '\' has not been properly registered.'));
                } else {
                    canData.set.call(el, 'preventDataBindings', true);
                    callback(el, assign(tagData, { scope: scope }));
                    canData.set.call(el, 'preventDataBindings', false);
                    canData.set.call(el, 'viewModel', importPromise);
                    canData.set.call(el, 'scope', importPromise);
                }
            } else {
                var frag = tagData.subtemplate ? tagData.subtemplate(scope, tagData.options) : DOCUMENT().createDocumentFragment();
                var nodeList = nodeLists.register([], undefined, tagData.parentNodeList || true);
                nodeList.expression = '<' + this.tagName + '>';
                events.one.call(el, 'removed', function () {
                    nodeLists.unregister(nodeList);
                });
                mutate.appendChild.call(el, frag);
                nodeLists.update(nodeList, getChildNodes(el));
            }
        }
        [
            'can-import',
            'can-dynamic-import'
        ].forEach(function (tagName) {
            tag(tagName, processImport.bind({ tagName: tagName }));
        });
    }(function () {
        return this;
    }(), require, exports, module));
});
/*steal-css@1.3.2#css*/
define('steal-css@1.3.2#css', [
    'require',
    'exports',
    'module',
    '@loader',
    '@steal'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        var loader = require('@loader');
        var steal = require('@steal');
        var isNode = typeof process === 'object' && {}.toString.call(process) === '[object process]';
        var importRegEx = /@import [^uU]['"]?([^'"\)]*)['"]?/g;
        var resourceRegEx = /url\(['"]?([^'"\)]*)['"]?\)/g;
        var waitSeconds = loader.cssOptions && loader.cssOptions.timeout ? parseInt(loader.cssOptions.timeout, 10) : 60;
        var onloadCss = function (link, cb) {
            var styleSheets = getDocument().styleSheets, i = styleSheets.length;
            while (i--) {
                if (styleSheets[i].href === link.href) {
                    return cb();
                }
            }
            setTimeout(function () {
                onloadCss(link, cb);
            });
        };
        function isIE9() {
            var doc = getDocument();
            return doc && !!Function('/*@cc_on return (/^9/.test(@_jscript_version) && /MSIE 9.0(?!.*IEMobile)/i.test(navigator.userAgent)); @*/')();
        }
        function getDocument() {
            if (typeof doneSsr !== 'undefined' && doneSsr.globalDocument) {
                return doneSsr.globalDocument;
            }
            if (typeof document !== 'undefined') {
                return document;
            }
            throw new Error('Unable to load CSS in an environment without a document.');
        }
        function getHead() {
            var doc = getDocument();
            var head = doc.head || doc.getElementsByTagName('head')[0];
            if (!head) {
                var docEl = doc.documentElement || doc;
                head = doc.createElement('head');
                docEl.insertBefore(head, docEl.firstChild);
            }
            return head;
        }
        function CSSModule(load, loader) {
            if (typeof load === 'object') {
                this.load = load;
                this.loader = loader;
                this.address = this.load.address;
                this.source = this.load.source;
            } else {
                this.address = load;
                this.source = loader;
            }
        }
        CSSModule.cssCount = 0;
        CSSModule.ie9MaxStyleSheets = 31;
        CSSModule.currentStyleSheet = null;
        CSSModule.prototype = {
            injectLink: function () {
                if (this._loaded) {
                    return this._loaded;
                }
                if (this.linkExists()) {
                    this._loaded = Promise.resolve('');
                    return this._loaded;
                }
                var doc = getDocument();
                var link = this.link = doc.createElement('link');
                link.type = 'text/css';
                link.rel = 'stylesheet';
                link.href = this.address;
                this._loaded = new Promise(function (resolve, reject) {
                    var timeout = setTimeout(function () {
                        reject('Unable to load CSS');
                    }, waitSeconds * 1000);
                    var loadCB = function (event) {
                        clearTimeout(timeout);
                        link.removeEventListener('load', loadCB);
                        link.removeEventListener('error', loadCB);
                        if (event && event.type === 'error') {
                            reject('Unable to load CSS');
                        } else {
                            resolve('');
                        }
                    };
                    if ('isApplicationInstalled' in navigator || !link.addEventListener) {
                        onloadCss(link, loadCB);
                    } else if (navigator.noUI) {
                        loadCB();
                    } else {
                        link.addEventListener('load', loadCB);
                        link.addEventListener('error', loadCB);
                    }
                    getHead().appendChild(link);
                });
                return this._loaded;
            },
            injectStyle: function () {
                var doc = getDocument();
                var head = getHead();
                var style = this.style = doc.createElement('style');
                style.type = 'text/css';
                if (style.sheet) {
                    style.sheet.cssText = this.source;
                } else if (style.styleSheet) {
                    style.styleSheet.cssText = this.source;
                } else {
                    style.appendChild(doc.createTextNode(this.source));
                }
                head.appendChild(style);
            },
            ie9StyleSheetLimitHack: function () {
                var doc = getDocument();
                if (!CSSModule.cssCount) {
                    CSSModule.currentStyleSheet = doc.createStyleSheet();
                }
                CSSModule.cssCount += 1;
                CSSModule.currentStyleSheet.cssText += this.source;
                if (CSSModule.cssCount === CSSModule.ie9MaxStyleSheets) {
                    CSSModule.cssCount = 0;
                }
            },
            updateURLs: function () {
                var rawSource = this.source, address = this.address;
                this.source = rawSource.replace(importRegEx, function (whole, part) {
                    if (isNode) {
                        return '@import url(' + part + ')';
                    } else {
                        return '@import url(' + steal.joinURIs(address, part) + ')';
                    }
                });
                if (!loader.isEnv('build')) {
                    this.source = this.source + '/*# sourceURL=' + address + ' */';
                    this.source = this.source.replace(resourceRegEx, function (whole, part) {
                        return 'url(' + steal.joinURIs(address, part) + ')';
                    });
                }
                return this.source;
            },
            getExistingNode: function () {
                var doc = getDocument();
                var selector = '[href=\'' + this.address + '\']';
                return doc.querySelector && doc.querySelector(selector);
            },
            linkExists: function () {
                var styleSheets = getDocument().styleSheets;
                for (var i = 0; i < styleSheets.length; ++i) {
                    if (this.address === styleSheets[i].href) {
                        return true;
                    }
                }
                return false;
            },
            setupLiveReload: function (loader, name) {
                var head = getHead();
                var css = this;
                if (loader.liveReloadInstalled) {
                    var cssReload = loader['import']('live-reload', { name: module.id });
                    Promise.resolve(cssReload).then(function (reload) {
                        loader['import'](name).then(function () {
                            reload.once('!dispose/' + name, function () {
                                css.style.__isDirty = true;
                                reload.once('!cycleComplete', function () {
                                    head.removeChild(css.style);
                                });
                            });
                        });
                    });
                }
            }
        };
        if (loader.isEnv('production')) {
            exports.fetch = function (load) {
                var css = new CSSModule(load.address);
                return css.injectLink();
            };
        } else {
            exports.instantiate = function (load) {
                var loader = this;
                var css = new CSSModule(load.address, load.source);
                load.source = css.updateURLs();
                load.metadata.deps = [];
                load.metadata.format = 'css';
                load.metadata.execute = function () {
                    if (getDocument()) {
                        if (isIE9()) {
                            css.ie9StyleSheetLimitHack();
                        } else {
                            css.injectStyle();
                        }
                        css.setupLiveReload(loader, load.name);
                    }
                    return loader.newModule({ source: css.source });
                };
            };
        }
        exports.CSSModule = CSSModule;
        exports.getDocument = getDocument;
        exports.getHead = getHead;
        exports.locateScheme = true;
        exports.buildType = 'css';
        exports.includeInBuild = true;
        exports.pluginBuilder = 'steal-css/slim';
    }(function () {
        return this;
    }(), require, exports, module));
});
/*done-css@3.0.2#css*/
define('done-css@3.0.2#css', [
    'require',
    'exports',
    'module',
    '@loader',
    'steal-css'
], function (require, exports, module) {
    var loader = require('@loader');
    var cssPlugin = require('steal-css');
    var StealCSSModule = cssPlugin.CSSModule;
    exports.locateScheme = cssPlugin.locateScheme;
    exports.buildType = cssPlugin.buildType;
    exports.includeInBuild = cssPlugin.includeInBuild;
    exports.pluginBuilder = 'steal-css/slim';
    var getDocument = cssPlugin.getDocument;
    var getHead = cssPlugin.getHead;
    var DoneCSSModule = function () {
        StealCSSModule.apply(this, arguments);
    };
    var proto = DoneCSSModule.prototype = Object.create(StealCSSModule.prototype);
    proto.constructor = DoneCSSModule;
    proto.getSSRRegister = function () {
        var register = loader.has('asset-register') ? loader.get('asset-register')['default'] : function () {
        };
        return register;
    };
    proto.updateProductionHref = function () {
        var cssFile = this.address;
        var loader = this.loader;
        var path = loader._nodeRequire('path');
        cssFile = path.relative(loader.baseURL, cssFile).replace(/\\/g, '/');
        var href = '/' + cssFile;
        var baseURL;
        if (loader.renderingBaseURL) {
            baseURL = loader.renderingBaseURL;
            if (baseURL !== '/') {
                href = addSlash(baseURL) + cssFile.replace('dist/', '');
            } else {
                href = addSlash(baseURL) + cssFile;
            }
        }
        this.href = href;
    };
    proto.registerSSR = function () {
        var css = this;
        var cb;
        if (loader.isEnv('production')) {
            this.updateProductionHref();
            cb = function () {
                var link = getDocument().createElement('link');
                link.setAttribute('rel', 'stylesheet');
                link.setAttribute('href', css.href);
                return link;
            };
        } else {
            cb = function () {
                return css.style.cloneNode(true);
            };
        }
        this.getSSRRegister()(this.load.name, 'css', cb);
    };
    proto.updateURLs = function () {
        var loader = this.loader;
        var address = this.address;
        if (loader.renderingLoader || loader.renderingBaseURL) {
            var href = address.substr(loader.baseURL.length);
            var baseURL = addSlash(loader.renderingBaseURL || loader.renderingLoader.baseURL);
            address = steal.joinURIs(baseURL, href);
        }
        this.address = address;
        return StealCSSModule.prototype.updateURLs.call(this);
    };
    proto.shouldInjectStyle = function () {
        var head = getHead();
        var style = getExistingAsset(this.load);
        if (style) {
            this.style = style;
        }
        return !style || style.__isDirty;
    };
    proto.injectStyle = function () {
        if (this.shouldInjectStyle()) {
            StealCSSModule.prototype.injectStyle.call(this);
        }
    };
    proto.dependencies = function () {
        var meta = this.loader.meta[this.load.name];
        return meta && meta.deps || [];
    };
    function getExistingAsset(load, head) {
        var doc = getDocument();
        if (doc.querySelectorAll) {
            var selector = '[asset-id=\'' + load.name + '\']';
            var val = doc.querySelectorAll(selector);
            return val && val[0];
        } else {
            var els = doc.getElementsByTagName('*'), el;
            for (var i = 0, len = els.length; i < len; i++) {
                el = els[i];
                if (el.getAttribute('asset-id') === load.name) {
                    return el;
                }
            }
        }
    }
    function addSlash(url) {
        var hasSlash = url[url.length - 1] === '/';
        return url + (hasSlash ? '' : '/');
    }
    var isNode = typeof process === 'object' && {}.toString.call(process) === '[object process]';
    var isNW = function () {
        try {
            return typeof loader._nodeRequire('nw.gui') !== 'undefined';
        } catch (e) {
            return false;
        }
    }();
    var isElectron = isNode && !!process.versions.electron;
    if (loader.isEnv('production')) {
        exports.fetch = function (load) {
            var css = new DoneCSSModule(load, this);
            if (isNode && !isNW && !isElectron) {
                css.registerSSR();
                return '';
            } else {
                return css.injectLink();
            }
        };
    } else {
        exports.instantiate = function (load) {
            var loader = this;
            var css = new DoneCSSModule(load, this);
            load.source = css.updateURLs();
            load.metadata.deps = css.dependencies();
            load.metadata.format = 'css';
            load.metadata.execute = function () {
                if (getDocument()) {
                    css.injectStyle();
                    css.setupLiveReload(loader, load.name);
                }
                if (isNode && !isNW && !isElectron) {
                    css.registerSSR();
                }
                return loader.newModule({ source: css.source });
            };
        };
    }
});
/*less@2.6.0#dist/less*/
(function (f) {
    if (typeof exports === 'object' && typeof module !== 'undefined') {
        module.exports = f();
    } else if (typeof define === 'function' && define.amd) {
        define('less@2.6.0#dist/less', [], f);
    } else {
        var g;
        if (typeof window !== 'undefined') {
            g = window;
        } else if (typeof global !== 'undefined') {
            g = global;
        } else if (typeof self !== 'undefined') {
            g = self;
        } else {
            g = this;
        }
        g.less = f();
    }
}(function () {
    var define, module, exports;
    return function e(t, n, r) {
        function s(o, u) {
            if (!n[o]) {
                if (!t[o]) {
                    var a = typeof require == 'function' && require;
                    if (!u && a)
                        return a(o, !0);
                    if (i)
                        return i(o, !0);
                    var f = new Error('Cannot find module \'' + o + '\'');
                    throw f.code = 'MODULE_NOT_FOUND', f;
                }
                var l = n[o] = { exports: {} };
                t[o][0].call(l.exports, function (e) {
                    var n = t[o][1][e];
                    return s(n ? n : e);
                }, l, l.exports, e, t, n, r);
            }
            return n[o].exports;
        }
        var i = typeof require == 'function' && require;
        for (var o = 0; o < r.length; o++)
            s(r[o]);
        return s;
    }({
        1: [
            function (require, module, exports) {
                var addDataAttr = require('./utils').addDataAttr, browser = require('./browser');
                module.exports = function (window, options) {
                    addDataAttr(options, browser.currentScript(window));
                    if (options.isFileProtocol === undefined) {
                        options.isFileProtocol = /^(file|(chrome|safari)(-extension)?|resource|qrc|app):/.test(window.location.protocol);
                    }
                    options.async = options.async || false;
                    options.fileAsync = options.fileAsync || false;
                    options.poll = options.poll || (options.isFileProtocol ? 1000 : 1500);
                    options.env = options.env || (window.location.hostname == '127.0.0.1' || window.location.hostname == '0.0.0.0' || window.location.hostname == 'localhost' || window.location.port && window.location.port.length > 0 || options.isFileProtocol ? 'development' : 'production');
                    var dumpLineNumbers = /!dumpLineNumbers:(comments|mediaquery|all)/.exec(window.location.hash);
                    if (dumpLineNumbers) {
                        options.dumpLineNumbers = dumpLineNumbers[1];
                    }
                    if (options.useFileCache === undefined) {
                        options.useFileCache = true;
                    }
                    if (options.onReady === undefined) {
                        options.onReady = true;
                    }
                };
            },
            {
                './browser': 3,
                './utils': 10
            }
        ],
        2: [
            function (require, module, exports) {
                require('promise/polyfill.js');
                var options = window.less || {};
                require('./add-default-options')(window, options);
                var less = module.exports = require('./index')(window, options);
                window.less = less;
                var css, head, style;
                function resolveOrReject(data) {
                    if (data.filename) {
                        console.warn(data);
                    }
                    if (!options.async) {
                        head.removeChild(style);
                    }
                }
                if (options.onReady) {
                    if (/!watch/.test(window.location.hash)) {
                        less.watch();
                    }
                    if (!options.async) {
                        css = 'body { display: none !important }';
                        head = document.head || document.getElementsByTagName('head')[0];
                        style = document.createElement('style');
                        style.type = 'text/css';
                        if (style.styleSheet) {
                            style.styleSheet.cssText = css;
                        } else {
                            style.appendChild(document.createTextNode(css));
                        }
                        head.appendChild(style);
                    }
                    less.registerStylesheetsImmediately();
                    less.pageLoadFinished = less.refresh(less.env === 'development').then(resolveOrReject, resolveOrReject);
                }
            },
            {
                './add-default-options': 1,
                './index': 8,
                'promise/polyfill.js': 97
            }
        ],
        3: [
            function (require, module, exports) {
                var utils = require('./utils');
                module.exports = {
                    createCSS: function (document, styles, sheet) {
                        var href = sheet.href || '';
                        var id = 'less:' + (sheet.title || utils.extractId(href));
                        var oldStyleNode = document.getElementById(id);
                        var keepOldStyleNode = false;
                        var styleNode = document.createElement('style');
                        styleNode.setAttribute('type', 'text/css');
                        if (sheet.media) {
                            styleNode.setAttribute('media', sheet.media);
                        }
                        styleNode.id = id;
                        if (!styleNode.styleSheet) {
                            styleNode.appendChild(document.createTextNode(styles));
                            keepOldStyleNode = oldStyleNode !== null && oldStyleNode.childNodes.length > 0 && styleNode.childNodes.length > 0 && oldStyleNode.firstChild.nodeValue === styleNode.firstChild.nodeValue;
                        }
                        var head = document.getElementsByTagName('head')[0];
                        if (oldStyleNode === null || keepOldStyleNode === false) {
                            var nextEl = sheet && sheet.nextSibling || null;
                            if (nextEl) {
                                nextEl.parentNode.insertBefore(styleNode, nextEl);
                            } else {
                                head.appendChild(styleNode);
                            }
                        }
                        if (oldStyleNode && keepOldStyleNode === false) {
                            oldStyleNode.parentNode.removeChild(oldStyleNode);
                        }
                        if (styleNode.styleSheet) {
                            try {
                                styleNode.styleSheet.cssText = styles;
                            } catch (e) {
                                throw new Error('Couldn\'t reassign styleSheet.cssText.');
                            }
                        }
                    },
                    currentScript: function (window) {
                        var document = window.document;
                        return document.currentScript || function () {
                            var scripts = document.getElementsByTagName('script');
                            return scripts[scripts.length - 1];
                        }();
                    }
                };
            },
            { './utils': 10 }
        ],
        4: [
            function (require, module, exports) {
                module.exports = function (window, options, logger) {
                    var cache = null;
                    if (options.env !== 'development') {
                        try {
                            cache = typeof window.localStorage === 'undefined' ? null : window.localStorage;
                        } catch (_) {
                        }
                    }
                    return {
                        setCSS: function (path, lastModified, modifyVars, styles) {
                            if (cache) {
                                logger.info('saving ' + path + ' to cache.');
                                try {
                                    cache.setItem(path, styles);
                                    cache.setItem(path + ':timestamp', lastModified);
                                    if (modifyVars) {
                                        cache.setItem(path + ':vars', JSON.stringify(modifyVars));
                                    }
                                } catch (e) {
                                    logger.error('failed to save "' + path + '" to local storage for caching.');
                                }
                            }
                        },
                        getCSS: function (path, webInfo, modifyVars) {
                            var css = cache && cache.getItem(path), timestamp = cache && cache.getItem(path + ':timestamp'), vars = cache && cache.getItem(path + ':vars');
                            modifyVars = modifyVars || {};
                            if (timestamp && webInfo.lastModified && new Date(webInfo.lastModified).valueOf() === new Date(timestamp).valueOf() && (!modifyVars && !vars || JSON.stringify(modifyVars) === vars)) {
                                return css;
                            }
                        }
                    };
                };
            },
            {}
        ],
        5: [
            function (require, module, exports) {
                var utils = require('./utils'), browser = require('./browser');
                module.exports = function (window, less, options) {
                    function errorHTML(e, rootHref) {
                        var id = 'less-error-message:' + utils.extractId(rootHref || '');
                        var template = '<li><label>{line}</label><pre class="{class}">{content}</pre></li>';
                        var elem = window.document.createElement('div'), timer, content, errors = [];
                        var filename = e.filename || rootHref;
                        var filenameNoPath = filename.match(/([^\/]+(\?.*)?)$/)[1];
                        elem.id = id;
                        elem.className = 'less-error-message';
                        content = '<h3>' + (e.type || 'Syntax') + 'Error: ' + (e.message || 'There is an error in your .less file') + '</h3>' + '<p>in <a href="' + filename + '">' + filenameNoPath + '</a> ';
                        var errorline = function (e, i, classname) {
                            if (e.extract[i] !== undefined) {
                                errors.push(template.replace(/\{line\}/, (parseInt(e.line, 10) || 0) + (i - 1)).replace(/\{class\}/, classname).replace(/\{content\}/, e.extract[i]));
                            }
                        };
                        if (e.extract) {
                            errorline(e, 0, '');
                            errorline(e, 1, 'line');
                            errorline(e, 2, '');
                            content += 'on line ' + e.line + ', column ' + (e.column + 1) + ':</p>' + '<ul>' + errors.join('') + '</ul>';
                        }
                        if (e.stack && (e.extract || options.logLevel >= 4)) {
                            content += '<br/>Stack Trace</br />' + e.stack.split('\n').slice(1).join('<br/>');
                        }
                        elem.innerHTML = content;
                        browser.createCSS(window.document, [
                            '.less-error-message ul, .less-error-message li {',
                            'list-style-type: none;',
                            'margin-right: 15px;',
                            'padding: 4px 0;',
                            'margin: 0;',
                            '}',
                            '.less-error-message label {',
                            'font-size: 12px;',
                            'margin-right: 15px;',
                            'padding: 4px 0;',
                            'color: #cc7777;',
                            '}',
                            '.less-error-message pre {',
                            'color: #dd6666;',
                            'padding: 4px 0;',
                            'margin: 0;',
                            'display: inline-block;',
                            '}',
                            '.less-error-message pre.line {',
                            'color: #ff0000;',
                            '}',
                            '.less-error-message h3 {',
                            'font-size: 20px;',
                            'font-weight: bold;',
                            'padding: 15px 0 5px 0;',
                            'margin: 0;',
                            '}',
                            '.less-error-message a {',
                            'color: #10a',
                            '}',
                            '.less-error-message .error {',
                            'color: red;',
                            'font-weight: bold;',
                            'padding-bottom: 2px;',
                            'border-bottom: 1px dashed red;',
                            '}'
                        ].join('\n'), { title: 'error-message' });
                        elem.style.cssText = [
                            'font-family: Arial, sans-serif',
                            'border: 1px solid #e00',
                            'background-color: #eee',
                            'border-radius: 5px',
                            '-webkit-border-radius: 5px',
                            '-moz-border-radius: 5px',
                            'color: #e00',
                            'padding: 15px',
                            'margin-bottom: 15px'
                        ].join(';');
                        if (options.env === 'development') {
                            timer = setInterval(function () {
                                var document = window.document, body = document.body;
                                if (body) {
                                    if (document.getElementById(id)) {
                                        body.replaceChild(elem, document.getElementById(id));
                                    } else {
                                        body.insertBefore(elem, body.firstChild);
                                    }
                                    clearInterval(timer);
                                }
                            }, 10);
                        }
                    }
                    function error(e, rootHref) {
                        if (!options.errorReporting || options.errorReporting === 'html') {
                            errorHTML(e, rootHref);
                        } else if (options.errorReporting === 'console') {
                            errorConsole(e, rootHref);
                        } else if (typeof options.errorReporting === 'function') {
                            options.errorReporting('add', e, rootHref);
                        }
                    }
                    function removeErrorHTML(path) {
                        var node = window.document.getElementById('less-error-message:' + utils.extractId(path));
                        if (node) {
                            node.parentNode.removeChild(node);
                        }
                    }
                    function removeErrorConsole(path) {
                    }
                    function removeError(path) {
                        if (!options.errorReporting || options.errorReporting === 'html') {
                            removeErrorHTML(path);
                        } else if (options.errorReporting === 'console') {
                            removeErrorConsole(path);
                        } else if (typeof options.errorReporting === 'function') {
                            options.errorReporting('remove', path);
                        }
                    }
                    function errorConsole(e, rootHref) {
                        var template = '{line} {content}';
                        var filename = e.filename || rootHref;
                        var errors = [];
                        var content = (e.type || 'Syntax') + 'Error: ' + (e.message || 'There is an error in your .less file') + ' in ' + filename + ' ';
                        var errorline = function (e, i, classname) {
                            if (e.extract[i] !== undefined) {
                                errors.push(template.replace(/\{line\}/, (parseInt(e.line, 10) || 0) + (i - 1)).replace(/\{class\}/, classname).replace(/\{content\}/, e.extract[i]));
                            }
                        };
                        if (e.extract) {
                            errorline(e, 0, '');
                            errorline(e, 1, 'line');
                            errorline(e, 2, '');
                            content += 'on line ' + e.line + ', column ' + (e.column + 1) + ':\n' + errors.join('\n');
                        }
                        if (e.stack && (e.extract || options.logLevel >= 4)) {
                            content += '\nStack Trace\n' + e.stack;
                        }
                        less.logger.error(content);
                    }
                    return {
                        add: error,
                        remove: removeError
                    };
                };
            },
            {
                './browser': 3,
                './utils': 10
            }
        ],
        6: [
            function (require, module, exports) {
                module.exports = function (options, logger) {
                    var AbstractFileManager = require('../less/environment/abstract-file-manager.js');
                    var fileCache = {};
                    function getXMLHttpRequest() {
                        if (window.XMLHttpRequest && (window.location.protocol !== 'file:' || !('ActiveXObject' in window))) {
                            return new XMLHttpRequest();
                        } else {
                            try {
                                return new ActiveXObject('Microsoft.XMLHTTP');
                            } catch (e) {
                                logger.error('browser doesn\'t support AJAX.');
                                return null;
                            }
                        }
                    }
                    var FileManager = function () {
                    };
                    FileManager.prototype = new AbstractFileManager();
                    FileManager.prototype.alwaysMakePathsAbsolute = function alwaysMakePathsAbsolute() {
                        return true;
                    };
                    FileManager.prototype.join = function join(basePath, laterPath) {
                        if (!basePath) {
                            return laterPath;
                        }
                        return this.extractUrlParts(laterPath, basePath).path;
                    };
                    FileManager.prototype.doXHR = function doXHR(url, type, callback, errback) {
                        var xhr = getXMLHttpRequest();
                        var async = options.isFileProtocol ? options.fileAsync : true;
                        if (typeof xhr.overrideMimeType === 'function') {
                            xhr.overrideMimeType('text/css');
                        }
                        logger.debug('XHR: Getting \'' + url + '\'');
                        xhr.open('GET', url, async);
                        xhr.setRequestHeader('Accept', type || 'text/x-less, text/css; q=0.9, */*; q=0.5');
                        xhr.send(null);
                        function handleResponse(xhr, callback, errback) {
                            if (xhr.status >= 200 && xhr.status < 300) {
                                callback(xhr.responseText, xhr.getResponseHeader('Last-Modified'));
                            } else if (typeof errback === 'function') {
                                errback(xhr.status, url);
                            }
                        }
                        if (options.isFileProtocol && !options.fileAsync) {
                            if (xhr.status === 0 || xhr.status >= 200 && xhr.status < 300) {
                                callback(xhr.responseText);
                            } else {
                                errback(xhr.status, url);
                            }
                        } else if (async) {
                            xhr.onreadystatechange = function () {
                                if (xhr.readyState == 4) {
                                    handleResponse(xhr, callback, errback);
                                }
                            };
                        } else {
                            handleResponse(xhr, callback, errback);
                        }
                    };
                    FileManager.prototype.supports = function (filename, currentDirectory, options, environment) {
                        return true;
                    };
                    FileManager.prototype.clearFileCache = function () {
                        fileCache = {};
                    };
                    FileManager.prototype.loadFile = function loadFile(filename, currentDirectory, options, environment, callback) {
                        if (currentDirectory && !this.isPathAbsolute(filename)) {
                            filename = currentDirectory + filename;
                        }
                        options = options || {};
                        var hrefParts = this.extractUrlParts(filename, window.location.href);
                        var href = hrefParts.url;
                        if (options.useFileCache && fileCache[href]) {
                            try {
                                var lessText = fileCache[href];
                                callback(null, {
                                    contents: lessText,
                                    filename: href,
                                    webInfo: { lastModified: new Date() }
                                });
                            } catch (e) {
                                callback({
                                    filename: href,
                                    message: 'Error loading file ' + href + ' error was ' + e.message
                                });
                            }
                            return;
                        }
                        this.doXHR(href, options.mime, function doXHRCallback(data, lastModified) {
                            fileCache[href] = data;
                            callback(null, {
                                contents: data,
                                filename: href,
                                webInfo: { lastModified: lastModified }
                            });
                        }, function doXHRError(status, url) {
                            callback({
                                type: 'File',
                                message: '\'' + url + '\' wasn\'t found (' + status + ')',
                                href: href
                            });
                        });
                    };
                    return FileManager;
                };
            },
            { '../less/environment/abstract-file-manager.js': 15 }
        ],
        7: [
            function (require, module, exports) {
                module.exports = function () {
                    var functionRegistry = require('./../less/functions/function-registry');
                    function imageSize() {
                        throw {
                            type: 'Runtime',
                            message: 'Image size functions are not supported in browser version of less'
                        };
                    }
                    var imageFunctions = {
                        'image-size': function (filePathNode) {
                            imageSize(this, filePathNode);
                            return -1;
                        },
                        'image-width': function (filePathNode) {
                            imageSize(this, filePathNode);
                            return -1;
                        },
                        'image-height': function (filePathNode) {
                            imageSize(this, filePathNode);
                            return -1;
                        }
                    };
                    functionRegistry.addMultiple(imageFunctions);
                };
            },
            { './../less/functions/function-registry': 22 }
        ],
        8: [
            function (require, module, exports) {
                var addDataAttr = require('./utils').addDataAttr, browser = require('./browser');
                module.exports = function (window, options) {
                    var document = window.document;
                    var less = require('../less')();
                    less.options = options;
                    var environment = less.environment, FileManager = require('./file-manager')(options, less.logger), fileManager = new FileManager();
                    environment.addFileManager(fileManager);
                    less.FileManager = FileManager;
                    require('./log-listener')(less, options);
                    var errors = require('./error-reporting')(window, less, options);
                    var cache = less.cache = options.cache || require('./cache')(window, options, less.logger);
                    require('./image-size')(less.environment);
                    if (options.functions) {
                        less.functions.functionRegistry.addMultiple(options.functions);
                    }
                    var typePattern = /^text\/(x-)?less$/;
                    function postProcessCSS(styles) {
                        if (options.postProcessor && typeof options.postProcessor === 'function') {
                            styles = options.postProcessor.call(styles, styles) || styles;
                        }
                        return styles;
                    }
                    function clone(obj) {
                        var cloned = {};
                        for (var prop in obj) {
                            if (obj.hasOwnProperty(prop)) {
                                cloned[prop] = obj[prop];
                            }
                        }
                        return cloned;
                    }
                    function bind(func, thisArg) {
                        var curryArgs = Array.prototype.slice.call(arguments, 2);
                        return function () {
                            var args = curryArgs.concat(Array.prototype.slice.call(arguments, 0));
                            return func.apply(thisArg, args);
                        };
                    }
                    function loadStyles(modifyVars) {
                        var styles = document.getElementsByTagName('style'), style;
                        for (var i = 0; i < styles.length; i++) {
                            style = styles[i];
                            if (style.type.match(typePattern)) {
                                var instanceOptions = clone(options);
                                instanceOptions.modifyVars = modifyVars;
                                var lessText = style.innerHTML || '';
                                instanceOptions.filename = document.location.href.replace(/#.*$/, '');
                                less.render(lessText, instanceOptions, bind(function (style, e, result) {
                                    if (e) {
                                        errors.add(e, 'inline');
                                    } else {
                                        style.type = 'text/css';
                                        if (style.styleSheet) {
                                            style.styleSheet.cssText = result.css;
                                        } else {
                                            style.innerHTML = result.css;
                                        }
                                    }
                                }, null, style));
                            }
                        }
                    }
                    function loadStyleSheet(sheet, callback, reload, remaining, modifyVars) {
                        var instanceOptions = clone(options);
                        addDataAttr(instanceOptions, sheet);
                        instanceOptions.mime = sheet.type;
                        if (modifyVars) {
                            instanceOptions.modifyVars = modifyVars;
                        }
                        function loadInitialFileCallback(loadedFile) {
                            var data = loadedFile.contents, path = loadedFile.filename, webInfo = loadedFile.webInfo;
                            var newFileInfo = {
                                currentDirectory: fileManager.getPath(path),
                                filename: path,
                                rootFilename: path,
                                relativeUrls: instanceOptions.relativeUrls
                            };
                            newFileInfo.entryPath = newFileInfo.currentDirectory;
                            newFileInfo.rootpath = instanceOptions.rootpath || newFileInfo.currentDirectory;
                            if (webInfo) {
                                webInfo.remaining = remaining;
                                var css = cache.getCSS(path, webInfo, instanceOptions.modifyVars);
                                if (!reload && css) {
                                    webInfo.local = true;
                                    callback(null, css, data, sheet, webInfo, path);
                                    return;
                                }
                            }
                            errors.remove(path);
                            instanceOptions.rootFileInfo = newFileInfo;
                            less.render(data, instanceOptions, function (e, result) {
                                if (e) {
                                    e.href = path;
                                    callback(e);
                                } else {
                                    result.css = postProcessCSS(result.css);
                                    cache.setCSS(sheet.href, webInfo.lastModified, instanceOptions.modifyVars, result.css);
                                    callback(null, result.css, data, sheet, webInfo, path);
                                }
                            });
                        }
                        fileManager.loadFile(sheet.href, null, instanceOptions, environment, function (e, loadedFile) {
                            if (e) {
                                callback(e);
                                return;
                            }
                            loadInitialFileCallback(loadedFile);
                        });
                    }
                    function loadStyleSheets(callback, reload, modifyVars) {
                        for (var i = 0; i < less.sheets.length; i++) {
                            loadStyleSheet(less.sheets[i], callback, reload, less.sheets.length - (i + 1), modifyVars);
                        }
                    }
                    function initRunningMode() {
                        if (less.env === 'development') {
                            less.watchTimer = setInterval(function () {
                                if (less.watchMode) {
                                    fileManager.clearFileCache();
                                    loadStyleSheets(function (e, css, _, sheet, webInfo) {
                                        if (e) {
                                            errors.add(e, e.href || sheet.href);
                                        } else if (css) {
                                            browser.createCSS(window.document, css, sheet);
                                        }
                                    });
                                }
                            }, options.poll);
                        }
                    }
                    less.watch = function () {
                        if (!less.watchMode) {
                            less.env = 'development';
                            initRunningMode();
                        }
                        this.watchMode = true;
                        return true;
                    };
                    less.unwatch = function () {
                        clearInterval(less.watchTimer);
                        this.watchMode = false;
                        return false;
                    };
                    less.registerStylesheetsImmediately = function () {
                        var links = document.getElementsByTagName('link');
                        less.sheets = [];
                        for (var i = 0; i < links.length; i++) {
                            if (links[i].rel === 'stylesheet/less' || links[i].rel.match(/stylesheet/) && links[i].type.match(typePattern)) {
                                less.sheets.push(links[i]);
                            }
                        }
                    };
                    less.registerStylesheets = function () {
                        return new Promise(function (resolve, reject) {
                            less.registerStylesheetsImmediately();
                            resolve();
                        });
                    };
                    less.modifyVars = function (record) {
                        return less.refresh(true, record, false);
                    };
                    less.refresh = function (reload, modifyVars, clearFileCache) {
                        if ((reload || clearFileCache) && clearFileCache !== false) {
                            fileManager.clearFileCache();
                        }
                        return new Promise(function (resolve, reject) {
                            var startTime, endTime, totalMilliseconds;
                            startTime = endTime = new Date();
                            loadStyleSheets(function (e, css, _, sheet, webInfo) {
                                if (e) {
                                    errors.add(e, e.href || sheet.href);
                                    reject(e);
                                    return;
                                }
                                if (webInfo.local) {
                                    less.logger.info('loading ' + sheet.href + ' from cache.');
                                } else {
                                    less.logger.info('rendered ' + sheet.href + ' successfully.');
                                }
                                browser.createCSS(window.document, css, sheet);
                                less.logger.info('css for ' + sheet.href + ' generated in ' + (new Date() - endTime) + 'ms');
                                if (webInfo.remaining === 0) {
                                    totalMilliseconds = new Date() - startTime;
                                    less.logger.info('less has finished. css generated in ' + totalMilliseconds + 'ms');
                                    resolve({
                                        startTime: startTime,
                                        endTime: endTime,
                                        totalMilliseconds: totalMilliseconds,
                                        sheets: less.sheets.length
                                    });
                                }
                                endTime = new Date();
                            }, reload, modifyVars);
                            loadStyles(modifyVars);
                        });
                    };
                    less.refreshStyles = loadStyles;
                    return less;
                };
            },
            {
                '../less': 31,
                './browser': 3,
                './cache': 4,
                './error-reporting': 5,
                './file-manager': 6,
                './image-size': 7,
                './log-listener': 9,
                './utils': 10
            }
        ],
        9: [
            function (require, module, exports) {
                module.exports = function (less, options) {
                    var logLevel_debug = 4, logLevel_info = 3, logLevel_warn = 2, logLevel_error = 1;
                    options.logLevel = typeof options.logLevel !== 'undefined' ? options.logLevel : options.env === 'development' ? logLevel_info : logLevel_error;
                    if (!options.loggers) {
                        options.loggers = [{
                                debug: function (msg) {
                                    if (options.logLevel >= logLevel_debug) {
                                        console.log(msg);
                                    }
                                },
                                info: function (msg) {
                                    if (options.logLevel >= logLevel_info) {
                                        console.log(msg);
                                    }
                                },
                                warn: function (msg) {
                                    if (options.logLevel >= logLevel_warn) {
                                        console.warn(msg);
                                    }
                                },
                                error: function (msg) {
                                    if (options.logLevel >= logLevel_error) {
                                        console.error(msg);
                                    }
                                }
                            }];
                    }
                    for (var i = 0; i < options.loggers.length; i++) {
                        less.logger.addListener(options.loggers[i]);
                    }
                };
            },
            {}
        ],
        10: [
            function (require, module, exports) {
                module.exports = {
                    extractId: function (href) {
                        return href.replace(/^[a-z-]+:\/+?[^\/]+/, '').replace(/[\?\&]livereload=\w+/, '').replace(/^\//, '').replace(/\.[a-zA-Z]+$/, '').replace(/[^\.\w-]+/g, '-').replace(/\./g, ':');
                    },
                    addDataAttr: function (options, tag) {
                        for (var opt in tag.dataset) {
                            if (tag.dataset.hasOwnProperty(opt)) {
                                if (opt === 'env' || opt === 'dumpLineNumbers' || opt === 'rootpath' || opt === 'errorReporting') {
                                    options[opt] = tag.dataset[opt];
                                } else {
                                    try {
                                        options[opt] = JSON.parse(tag.dataset[opt]);
                                    } catch (_) {
                                    }
                                }
                            }
                        }
                    }
                };
            },
            {}
        ],
        11: [
            function (require, module, exports) {
                var contexts = {};
                module.exports = contexts;
                var copyFromOriginal = function copyFromOriginal(original, destination, propertiesToCopy) {
                    if (!original) {
                        return;
                    }
                    for (var i = 0; i < propertiesToCopy.length; i++) {
                        if (original.hasOwnProperty(propertiesToCopy[i])) {
                            destination[propertiesToCopy[i]] = original[propertiesToCopy[i]];
                        }
                    }
                };
                var parseCopyProperties = [
                    'paths',
                    'relativeUrls',
                    'rootpath',
                    'strictImports',
                    'insecure',
                    'dumpLineNumbers',
                    'compress',
                    'syncImport',
                    'chunkInput',
                    'mime',
                    'useFileCache',
                    'processImports',
                    'pluginManager'
                ];
                contexts.Parse = function (options) {
                    copyFromOriginal(options, this, parseCopyProperties);
                    if (typeof this.paths === 'string') {
                        this.paths = [this.paths];
                    }
                };
                var evalCopyProperties = [
                    'paths',
                    'compress',
                    'ieCompat',
                    'strictMath',
                    'strictUnits',
                    'sourceMap',
                    'importMultiple',
                    'urlArgs',
                    'javascriptEnabled',
                    'pluginManager',
                    'importantScope'
                ];
                contexts.Eval = function (options, frames) {
                    copyFromOriginal(options, this, evalCopyProperties);
                    if (typeof this.paths === 'string') {
                        this.paths = [this.paths];
                    }
                    this.frames = frames || [];
                    this.importantScope = this.importantScope || [];
                };
                contexts.Eval.prototype.inParenthesis = function () {
                    if (!this.parensStack) {
                        this.parensStack = [];
                    }
                    this.parensStack.push(true);
                };
                contexts.Eval.prototype.outOfParenthesis = function () {
                    this.parensStack.pop();
                };
                contexts.Eval.prototype.isMathOn = function () {
                    return this.strictMath ? this.parensStack && this.parensStack.length : true;
                };
                contexts.Eval.prototype.isPathRelative = function (path) {
                    return !/^(?:[a-z-]+:|\/|#)/i.test(path);
                };
                contexts.Eval.prototype.normalizePath = function (path) {
                    var segments = path.split('/').reverse(), segment;
                    path = [];
                    while (segments.length !== 0) {
                        segment = segments.pop();
                        switch (segment) {
                        case '.':
                            break;
                        case '..':
                            if (path.length === 0 || path[path.length - 1] === '..') {
                                path.push(segment);
                            } else {
                                path.pop();
                            }
                            break;
                        default:
                            path.push(segment);
                            break;
                        }
                    }
                    return path.join('/');
                };
            },
            {}
        ],
        12: [
            function (require, module, exports) {
                module.exports = {
                    'aliceblue': '#f0f8ff',
                    'antiquewhite': '#faebd7',
                    'aqua': '#00ffff',
                    'aquamarine': '#7fffd4',
                    'azure': '#f0ffff',
                    'beige': '#f5f5dc',
                    'bisque': '#ffe4c4',
                    'black': '#000000',
                    'blanchedalmond': '#ffebcd',
                    'blue': '#0000ff',
                    'blueviolet': '#8a2be2',
                    'brown': '#a52a2a',
                    'burlywood': '#deb887',
                    'cadetblue': '#5f9ea0',
                    'chartreuse': '#7fff00',
                    'chocolate': '#d2691e',
                    'coral': '#ff7f50',
                    'cornflowerblue': '#6495ed',
                    'cornsilk': '#fff8dc',
                    'crimson': '#dc143c',
                    'cyan': '#00ffff',
                    'darkblue': '#00008b',
                    'darkcyan': '#008b8b',
                    'darkgoldenrod': '#b8860b',
                    'darkgray': '#a9a9a9',
                    'darkgrey': '#a9a9a9',
                    'darkgreen': '#006400',
                    'darkkhaki': '#bdb76b',
                    'darkmagenta': '#8b008b',
                    'darkolivegreen': '#556b2f',
                    'darkorange': '#ff8c00',
                    'darkorchid': '#9932cc',
                    'darkred': '#8b0000',
                    'darksalmon': '#e9967a',
                    'darkseagreen': '#8fbc8f',
                    'darkslateblue': '#483d8b',
                    'darkslategray': '#2f4f4f',
                    'darkslategrey': '#2f4f4f',
                    'darkturquoise': '#00ced1',
                    'darkviolet': '#9400d3',
                    'deeppink': '#ff1493',
                    'deepskyblue': '#00bfff',
                    'dimgray': '#696969',
                    'dimgrey': '#696969',
                    'dodgerblue': '#1e90ff',
                    'firebrick': '#b22222',
                    'floralwhite': '#fffaf0',
                    'forestgreen': '#228b22',
                    'fuchsia': '#ff00ff',
                    'gainsboro': '#dcdcdc',
                    'ghostwhite': '#f8f8ff',
                    'gold': '#ffd700',
                    'goldenrod': '#daa520',
                    'gray': '#808080',
                    'grey': '#808080',
                    'green': '#008000',
                    'greenyellow': '#adff2f',
                    'honeydew': '#f0fff0',
                    'hotpink': '#ff69b4',
                    'indianred': '#cd5c5c',
                    'indigo': '#4b0082',
                    'ivory': '#fffff0',
                    'khaki': '#f0e68c',
                    'lavender': '#e6e6fa',
                    'lavenderblush': '#fff0f5',
                    'lawngreen': '#7cfc00',
                    'lemonchiffon': '#fffacd',
                    'lightblue': '#add8e6',
                    'lightcoral': '#f08080',
                    'lightcyan': '#e0ffff',
                    'lightgoldenrodyellow': '#fafad2',
                    'lightgray': '#d3d3d3',
                    'lightgrey': '#d3d3d3',
                    'lightgreen': '#90ee90',
                    'lightpink': '#ffb6c1',
                    'lightsalmon': '#ffa07a',
                    'lightseagreen': '#20b2aa',
                    'lightskyblue': '#87cefa',
                    'lightslategray': '#778899',
                    'lightslategrey': '#778899',
                    'lightsteelblue': '#b0c4de',
                    'lightyellow': '#ffffe0',
                    'lime': '#00ff00',
                    'limegreen': '#32cd32',
                    'linen': '#faf0e6',
                    'magenta': '#ff00ff',
                    'maroon': '#800000',
                    'mediumaquamarine': '#66cdaa',
                    'mediumblue': '#0000cd',
                    'mediumorchid': '#ba55d3',
                    'mediumpurple': '#9370d8',
                    'mediumseagreen': '#3cb371',
                    'mediumslateblue': '#7b68ee',
                    'mediumspringgreen': '#00fa9a',
                    'mediumturquoise': '#48d1cc',
                    'mediumvioletred': '#c71585',
                    'midnightblue': '#191970',
                    'mintcream': '#f5fffa',
                    'mistyrose': '#ffe4e1',
                    'moccasin': '#ffe4b5',
                    'navajowhite': '#ffdead',
                    'navy': '#000080',
                    'oldlace': '#fdf5e6',
                    'olive': '#808000',
                    'olivedrab': '#6b8e23',
                    'orange': '#ffa500',
                    'orangered': '#ff4500',
                    'orchid': '#da70d6',
                    'palegoldenrod': '#eee8aa',
                    'palegreen': '#98fb98',
                    'paleturquoise': '#afeeee',
                    'palevioletred': '#d87093',
                    'papayawhip': '#ffefd5',
                    'peachpuff': '#ffdab9',
                    'peru': '#cd853f',
                    'pink': '#ffc0cb',
                    'plum': '#dda0dd',
                    'powderblue': '#b0e0e6',
                    'purple': '#800080',
                    'rebeccapurple': '#663399',
                    'red': '#ff0000',
                    'rosybrown': '#bc8f8f',
                    'royalblue': '#4169e1',
                    'saddlebrown': '#8b4513',
                    'salmon': '#fa8072',
                    'sandybrown': '#f4a460',
                    'seagreen': '#2e8b57',
                    'seashell': '#fff5ee',
                    'sienna': '#a0522d',
                    'silver': '#c0c0c0',
                    'skyblue': '#87ceeb',
                    'slateblue': '#6a5acd',
                    'slategray': '#708090',
                    'slategrey': '#708090',
                    'snow': '#fffafa',
                    'springgreen': '#00ff7f',
                    'steelblue': '#4682b4',
                    'tan': '#d2b48c',
                    'teal': '#008080',
                    'thistle': '#d8bfd8',
                    'tomato': '#ff6347',
                    'turquoise': '#40e0d0',
                    'violet': '#ee82ee',
                    'wheat': '#f5deb3',
                    'white': '#ffffff',
                    'whitesmoke': '#f5f5f5',
                    'yellow': '#ffff00',
                    'yellowgreen': '#9acd32'
                };
            },
            {}
        ],
        13: [
            function (require, module, exports) {
                module.exports = {
                    colors: require('./colors'),
                    unitConversions: require('./unit-conversions')
                };
            },
            {
                './colors': 12,
                './unit-conversions': 14
            }
        ],
        14: [
            function (require, module, exports) {
                module.exports = {
                    length: {
                        'm': 1,
                        'cm': 0.01,
                        'mm': 0.001,
                        'in': 0.0254,
                        'px': 0.0254 / 96,
                        'pt': 0.0254 / 72,
                        'pc': 0.0254 / 72 * 12
                    },
                    duration: {
                        's': 1,
                        'ms': 0.001
                    },
                    angle: {
                        'rad': 1 / (2 * Math.PI),
                        'deg': 1 / 360,
                        'grad': 1 / 400,
                        'turn': 1
                    }
                };
            },
            {}
        ],
        15: [
            function (require, module, exports) {
                var abstractFileManager = function () {
                };
                abstractFileManager.prototype.getPath = function (filename) {
                    var j = filename.lastIndexOf('?');
                    if (j > 0) {
                        filename = filename.slice(0, j);
                    }
                    j = filename.lastIndexOf('/');
                    if (j < 0) {
                        j = filename.lastIndexOf('\\');
                    }
                    if (j < 0) {
                        return '';
                    }
                    return filename.slice(0, j + 1);
                };
                abstractFileManager.prototype.tryAppendExtension = function (path, ext) {
                    return /(\.[a-z]*$)|([\?;].*)$/.test(path) ? path : path + ext;
                };
                abstractFileManager.prototype.tryAppendLessExtension = function (path) {
                    return this.tryAppendExtension(path, '.less');
                };
                abstractFileManager.prototype.supportsSync = function () {
                    return false;
                };
                abstractFileManager.prototype.alwaysMakePathsAbsolute = function () {
                    return false;
                };
                abstractFileManager.prototype.isPathAbsolute = function (filename) {
                    return /^(?:[a-z-]+:|\/|\\|#)/i.test(filename);
                };
                abstractFileManager.prototype.join = function (basePath, laterPath) {
                    if (!basePath) {
                        return laterPath;
                    }
                    return basePath + laterPath;
                };
                abstractFileManager.prototype.pathDiff = function pathDiff(url, baseUrl) {
                    var urlParts = this.extractUrlParts(url), baseUrlParts = this.extractUrlParts(baseUrl), i, max, urlDirectories, baseUrlDirectories, diff = '';
                    if (urlParts.hostPart !== baseUrlParts.hostPart) {
                        return '';
                    }
                    max = Math.max(baseUrlParts.directories.length, urlParts.directories.length);
                    for (i = 0; i < max; i++) {
                        if (baseUrlParts.directories[i] !== urlParts.directories[i]) {
                            break;
                        }
                    }
                    baseUrlDirectories = baseUrlParts.directories.slice(i);
                    urlDirectories = urlParts.directories.slice(i);
                    for (i = 0; i < baseUrlDirectories.length - 1; i++) {
                        diff += '../';
                    }
                    for (i = 0; i < urlDirectories.length - 1; i++) {
                        diff += urlDirectories[i] + '/';
                    }
                    return diff;
                };
                abstractFileManager.prototype.extractUrlParts = function extractUrlParts(url, baseUrl) {
                    var urlPartsRegex = /^((?:[a-z-]+:)?\/+?(?:[^\/\?#]*\/)|([\/\\]))?((?:[^\/\\\?#]*[\/\\])*)([^\/\\\?#]*)([#\?].*)?$/i, urlParts = url.match(urlPartsRegex), returner = {}, directories = [], i, baseUrlParts;
                    if (!urlParts) {
                        throw new Error('Could not parse sheet href - \'' + url + '\'');
                    }
                    if (baseUrl && (!urlParts[1] || urlParts[2])) {
                        baseUrlParts = baseUrl.match(urlPartsRegex);
                        if (!baseUrlParts) {
                            throw new Error('Could not parse page url - \'' + baseUrl + '\'');
                        }
                        urlParts[1] = urlParts[1] || baseUrlParts[1] || '';
                        if (!urlParts[2]) {
                            urlParts[3] = baseUrlParts[3] + urlParts[3];
                        }
                    }
                    if (urlParts[3]) {
                        directories = urlParts[3].replace(/\\/g, '/').split('/');
                        for (i = 0; i < directories.length; i++) {
                            if (directories[i] === '.') {
                                directories.splice(i, 1);
                                i -= 1;
                            }
                        }
                        for (i = 0; i < directories.length; i++) {
                            if (directories[i] === '..' && i > 0) {
                                directories.splice(i - 1, 2);
                                i -= 2;
                            }
                        }
                    }
                    returner.hostPart = urlParts[1];
                    returner.directories = directories;
                    returner.path = (urlParts[1] || '') + directories.join('/');
                    returner.fileUrl = returner.path + (urlParts[4] || '');
                    returner.url = returner.fileUrl + (urlParts[5] || '');
                    return returner;
                };
                module.exports = abstractFileManager;
            },
            {}
        ],
        16: [
            function (require, module, exports) {
                var logger = require('../logger');
                var environment = function (externalEnvironment, fileManagers) {
                    this.fileManagers = fileManagers || [];
                    externalEnvironment = externalEnvironment || {};
                    var optionalFunctions = [
                            'encodeBase64',
                            'mimeLookup',
                            'charsetLookup',
                            'getSourceMapGenerator'
                        ], requiredFunctions = [], functions = requiredFunctions.concat(optionalFunctions);
                    for (var i = 0; i < functions.length; i++) {
                        var propName = functions[i], environmentFunc = externalEnvironment[propName];
                        if (environmentFunc) {
                            this[propName] = environmentFunc.bind(externalEnvironment);
                        } else if (i < requiredFunctions.length) {
                            this.warn('missing required function in environment - ' + propName);
                        }
                    }
                };
                environment.prototype.getFileManager = function (filename, currentDirectory, options, environment, isSync) {
                    if (!filename) {
                        logger.warn('getFileManager called with no filename.. Please report this issue. continuing.');
                    }
                    if (currentDirectory == null) {
                        logger.warn('getFileManager called with null directory.. Please report this issue. continuing.');
                    }
                    var fileManagers = this.fileManagers;
                    if (options.pluginManager) {
                        fileManagers = [].concat(fileManagers).concat(options.pluginManager.getFileManagers());
                    }
                    for (var i = fileManagers.length - 1; i >= 0; i--) {
                        var fileManager = fileManagers[i];
                        if (fileManager[isSync ? 'supportsSync' : 'supports'](filename, currentDirectory, options, environment)) {
                            return fileManager;
                        }
                    }
                    return null;
                };
                environment.prototype.addFileManager = function (fileManager) {
                    this.fileManagers.push(fileManager);
                };
                environment.prototype.clearFileManagers = function () {
                    this.fileManagers = [];
                };
                module.exports = environment;
            },
            { '../logger': 33 }
        ],
        17: [
            function (require, module, exports) {
                var Color = require('../tree/color'), functionRegistry = require('./function-registry');
                function colorBlend(mode, color1, color2) {
                    var ab = color1.alpha, cb, as = color2.alpha, cs, ar, cr, r = [];
                    ar = as + ab * (1 - as);
                    for (var i = 0; i < 3; i++) {
                        cb = color1.rgb[i] / 255;
                        cs = color2.rgb[i] / 255;
                        cr = mode(cb, cs);
                        if (ar) {
                            cr = (as * cs + ab * (cb - as * (cb + cs - cr))) / ar;
                        }
                        r[i] = cr * 255;
                    }
                    return new Color(r, ar);
                }
                var colorBlendModeFunctions = {
                    multiply: function (cb, cs) {
                        return cb * cs;
                    },
                    screen: function (cb, cs) {
                        return cb + cs - cb * cs;
                    },
                    overlay: function (cb, cs) {
                        cb *= 2;
                        return cb <= 1 ? colorBlendModeFunctions.multiply(cb, cs) : colorBlendModeFunctions.screen(cb - 1, cs);
                    },
                    softlight: function (cb, cs) {
                        var d = 1, e = cb;
                        if (cs > 0.5) {
                            e = 1;
                            d = cb > 0.25 ? Math.sqrt(cb) : ((16 * cb - 12) * cb + 4) * cb;
                        }
                        return cb - (1 - 2 * cs) * e * (d - cb);
                    },
                    hardlight: function (cb, cs) {
                        return colorBlendModeFunctions.overlay(cs, cb);
                    },
                    difference: function (cb, cs) {
                        return Math.abs(cb - cs);
                    },
                    exclusion: function (cb, cs) {
                        return cb + cs - 2 * cb * cs;
                    },
                    average: function (cb, cs) {
                        return (cb + cs) / 2;
                    },
                    negation: function (cb, cs) {
                        return 1 - Math.abs(cb + cs - 1);
                    }
                };
                for (var f in colorBlendModeFunctions) {
                    if (colorBlendModeFunctions.hasOwnProperty(f)) {
                        colorBlend[f] = colorBlend.bind(null, colorBlendModeFunctions[f]);
                    }
                }
                functionRegistry.addMultiple(colorBlend);
            },
            {
                '../tree/color': 50,
                './function-registry': 22
            }
        ],
        18: [
            function (require, module, exports) {
                var Dimension = require('../tree/dimension'), Color = require('../tree/color'), Quoted = require('../tree/quoted'), Anonymous = require('../tree/anonymous'), functionRegistry = require('./function-registry'), colorFunctions;
                function clamp(val) {
                    return Math.min(1, Math.max(0, val));
                }
                function hsla(color) {
                    return colorFunctions.hsla(color.h, color.s, color.l, color.a);
                }
                function number(n) {
                    if (n instanceof Dimension) {
                        return parseFloat(n.unit.is('%') ? n.value / 100 : n.value);
                    } else if (typeof n === 'number') {
                        return n;
                    } else {
                        throw {
                            type: 'Argument',
                            message: 'color functions take numbers as parameters'
                        };
                    }
                }
                function scaled(n, size) {
                    if (n instanceof Dimension && n.unit.is('%')) {
                        return parseFloat(n.value * size / 100);
                    } else {
                        return number(n);
                    }
                }
                colorFunctions = {
                    rgb: function (r, g, b) {
                        return colorFunctions.rgba(r, g, b, 1);
                    },
                    rgba: function (r, g, b, a) {
                        var rgb = [
                            r,
                            g,
                            b
                        ].map(function (c) {
                            return scaled(c, 255);
                        });
                        a = number(a);
                        return new Color(rgb, a);
                    },
                    hsl: function (h, s, l) {
                        return colorFunctions.hsla(h, s, l, 1);
                    },
                    hsla: function (h, s, l, a) {
                        function hue(h) {
                            h = h < 0 ? h + 1 : h > 1 ? h - 1 : h;
                            if (h * 6 < 1) {
                                return m1 + (m2 - m1) * h * 6;
                            } else if (h * 2 < 1) {
                                return m2;
                            } else if (h * 3 < 2) {
                                return m1 + (m2 - m1) * (2 / 3 - h) * 6;
                            } else {
                                return m1;
                            }
                        }
                        h = number(h) % 360 / 360;
                        s = clamp(number(s));
                        l = clamp(number(l));
                        a = clamp(number(a));
                        var m2 = l <= 0.5 ? l * (s + 1) : l + s - l * s;
                        var m1 = l * 2 - m2;
                        return colorFunctions.rgba(hue(h + 1 / 3) * 255, hue(h) * 255, hue(h - 1 / 3) * 255, a);
                    },
                    hsv: function (h, s, v) {
                        return colorFunctions.hsva(h, s, v, 1);
                    },
                    hsva: function (h, s, v, a) {
                        h = number(h) % 360 / 360 * 360;
                        s = number(s);
                        v = number(v);
                        a = number(a);
                        var i, f;
                        i = Math.floor(h / 60 % 6);
                        f = h / 60 - i;
                        var vs = [
                            v,
                            v * (1 - s),
                            v * (1 - f * s),
                            v * (1 - (1 - f) * s)
                        ];
                        var perm = [
                            [
                                0,
                                3,
                                1
                            ],
                            [
                                2,
                                0,
                                1
                            ],
                            [
                                1,
                                0,
                                3
                            ],
                            [
                                1,
                                2,
                                0
                            ],
                            [
                                3,
                                1,
                                0
                            ],
                            [
                                0,
                                1,
                                2
                            ]
                        ];
                        return colorFunctions.rgba(vs[perm[i][0]] * 255, vs[perm[i][1]] * 255, vs[perm[i][2]] * 255, a);
                    },
                    hue: function (color) {
                        return new Dimension(color.toHSL().h);
                    },
                    saturation: function (color) {
                        return new Dimension(color.toHSL().s * 100, '%');
                    },
                    lightness: function (color) {
                        return new Dimension(color.toHSL().l * 100, '%');
                    },
                    hsvhue: function (color) {
                        return new Dimension(color.toHSV().h);
                    },
                    hsvsaturation: function (color) {
                        return new Dimension(color.toHSV().s * 100, '%');
                    },
                    hsvvalue: function (color) {
                        return new Dimension(color.toHSV().v * 100, '%');
                    },
                    red: function (color) {
                        return new Dimension(color.rgb[0]);
                    },
                    green: function (color) {
                        return new Dimension(color.rgb[1]);
                    },
                    blue: function (color) {
                        return new Dimension(color.rgb[2]);
                    },
                    alpha: function (color) {
                        return new Dimension(color.toHSL().a);
                    },
                    luma: function (color) {
                        return new Dimension(color.luma() * color.alpha * 100, '%');
                    },
                    luminance: function (color) {
                        var luminance = 0.2126 * color.rgb[0] / 255 + 0.7152 * color.rgb[1] / 255 + 0.0722 * color.rgb[2] / 255;
                        return new Dimension(luminance * color.alpha * 100, '%');
                    },
                    saturate: function (color, amount, method) {
                        if (!color.rgb) {
                            return null;
                        }
                        var hsl = color.toHSL();
                        if (typeof method !== 'undefined' && method.value === 'relative') {
                            hsl.s += hsl.s * amount.value / 100;
                        } else {
                            hsl.s += amount.value / 100;
                        }
                        hsl.s = clamp(hsl.s);
                        return hsla(hsl);
                    },
                    desaturate: function (color, amount, method) {
                        var hsl = color.toHSL();
                        if (typeof method !== 'undefined' && method.value === 'relative') {
                            hsl.s -= hsl.s * amount.value / 100;
                        } else {
                            hsl.s -= amount.value / 100;
                        }
                        hsl.s = clamp(hsl.s);
                        return hsla(hsl);
                    },
                    lighten: function (color, amount, method) {
                        var hsl = color.toHSL();
                        if (typeof method !== 'undefined' && method.value === 'relative') {
                            hsl.l += hsl.l * amount.value / 100;
                        } else {
                            hsl.l += amount.value / 100;
                        }
                        hsl.l = clamp(hsl.l);
                        return hsla(hsl);
                    },
                    darken: function (color, amount, method) {
                        var hsl = color.toHSL();
                        if (typeof method !== 'undefined' && method.value === 'relative') {
                            hsl.l -= hsl.l * amount.value / 100;
                        } else {
                            hsl.l -= amount.value / 100;
                        }
                        hsl.l = clamp(hsl.l);
                        return hsla(hsl);
                    },
                    fadein: function (color, amount, method) {
                        var hsl = color.toHSL();
                        if (typeof method !== 'undefined' && method.value === 'relative') {
                            hsl.a += hsl.a * amount.value / 100;
                        } else {
                            hsl.a += amount.value / 100;
                        }
                        hsl.a = clamp(hsl.a);
                        return hsla(hsl);
                    },
                    fadeout: function (color, amount, method) {
                        var hsl = color.toHSL();
                        if (typeof method !== 'undefined' && method.value === 'relative') {
                            hsl.a -= hsl.a * amount.value / 100;
                        } else {
                            hsl.a -= amount.value / 100;
                        }
                        hsl.a = clamp(hsl.a);
                        return hsla(hsl);
                    },
                    fade: function (color, amount) {
                        var hsl = color.toHSL();
                        hsl.a = amount.value / 100;
                        hsl.a = clamp(hsl.a);
                        return hsla(hsl);
                    },
                    spin: function (color, amount) {
                        var hsl = color.toHSL();
                        var hue = (hsl.h + amount.value) % 360;
                        hsl.h = hue < 0 ? 360 + hue : hue;
                        return hsla(hsl);
                    },
                    mix: function (color1, color2, weight) {
                        if (!color1.toHSL || !color2.toHSL) {
                            console.log(color2.type);
                            console.dir(color2);
                        }
                        if (!weight) {
                            weight = new Dimension(50);
                        }
                        var p = weight.value / 100;
                        var w = p * 2 - 1;
                        var a = color1.toHSL().a - color2.toHSL().a;
                        var w1 = ((w * a == -1 ? w : (w + a) / (1 + w * a)) + 1) / 2;
                        var w2 = 1 - w1;
                        var rgb = [
                            color1.rgb[0] * w1 + color2.rgb[0] * w2,
                            color1.rgb[1] * w1 + color2.rgb[1] * w2,
                            color1.rgb[2] * w1 + color2.rgb[2] * w2
                        ];
                        var alpha = color1.alpha * p + color2.alpha * (1 - p);
                        return new Color(rgb, alpha);
                    },
                    greyscale: function (color) {
                        return colorFunctions.desaturate(color, new Dimension(100));
                    },
                    contrast: function (color, dark, light, threshold) {
                        if (!color.rgb) {
                            return null;
                        }
                        if (typeof light === 'undefined') {
                            light = colorFunctions.rgba(255, 255, 255, 1);
                        }
                        if (typeof dark === 'undefined') {
                            dark = colorFunctions.rgba(0, 0, 0, 1);
                        }
                        if (dark.luma() > light.luma()) {
                            var t = light;
                            light = dark;
                            dark = t;
                        }
                        if (typeof threshold === 'undefined') {
                            threshold = 0.43;
                        } else {
                            threshold = number(threshold);
                        }
                        if (color.luma() < threshold) {
                            return light;
                        } else {
                            return dark;
                        }
                    },
                    argb: function (color) {
                        return new Anonymous(color.toARGB());
                    },
                    color: function (c) {
                        if (c instanceof Quoted && /^#([a-f0-9]{6}|[a-f0-9]{3})$/i.test(c.value)) {
                            return new Color(c.value.slice(1));
                        }
                        if (c instanceof Color || (c = Color.fromKeyword(c.value))) {
                            c.value = undefined;
                            return c;
                        }
                        throw {
                            type: 'Argument',
                            message: 'argument must be a color keyword or 3/6 digit hex e.g. #FFF'
                        };
                    },
                    tint: function (color, amount) {
                        return colorFunctions.mix(colorFunctions.rgb(255, 255, 255), color, amount);
                    },
                    shade: function (color, amount) {
                        return colorFunctions.mix(colorFunctions.rgb(0, 0, 0), color, amount);
                    }
                };
                functionRegistry.addMultiple(colorFunctions);
            },
            {
                '../tree/anonymous': 46,
                '../tree/color': 50,
                '../tree/dimension': 56,
                '../tree/quoted': 73,
                './function-registry': 22
            }
        ],
        19: [
            function (require, module, exports) {
                module.exports = function (environment) {
                    var Quoted = require('../tree/quoted'), URL = require('../tree/url'), functionRegistry = require('./function-registry'), fallback = function (functionThis, node) {
                            return new URL(node, functionThis.index, functionThis.currentFileInfo).eval(functionThis.context);
                        }, logger = require('../logger');
                    functionRegistry.add('data-uri', function (mimetypeNode, filePathNode) {
                        if (!filePathNode) {
                            filePathNode = mimetypeNode;
                            mimetypeNode = null;
                        }
                        var mimetype = mimetypeNode && mimetypeNode.value;
                        var filePath = filePathNode.value;
                        var currentFileInfo = this.currentFileInfo;
                        var currentDirectory = currentFileInfo.relativeUrls ? currentFileInfo.currentDirectory : currentFileInfo.entryPath;
                        var fragmentStart = filePath.indexOf('#');
                        var fragment = '';
                        if (fragmentStart !== -1) {
                            fragment = filePath.slice(fragmentStart);
                            filePath = filePath.slice(0, fragmentStart);
                        }
                        var fileManager = environment.getFileManager(filePath, currentDirectory, this.context, environment, true);
                        if (!fileManager) {
                            return fallback(this, filePathNode);
                        }
                        var useBase64 = false;
                        if (!mimetypeNode) {
                            mimetype = environment.mimeLookup(filePath);
                            if (mimetype === 'image/svg+xml') {
                                useBase64 = false;
                            } else {
                                var charset = environment.charsetLookup(mimetype);
                                useBase64 = [
                                    'US-ASCII',
                                    'UTF-8'
                                ].indexOf(charset) < 0;
                            }
                            if (useBase64) {
                                mimetype += ';base64';
                            }
                        } else {
                            useBase64 = /;base64$/.test(mimetype);
                        }
                        var fileSync = fileManager.loadFileSync(filePath, currentDirectory, this.context, environment);
                        if (!fileSync.contents) {
                            logger.warn('Skipped data-uri embedding of ' + filePath + ' because file not found');
                            return fallback(this, filePathNode || mimetypeNode);
                        }
                        var buf = fileSync.contents;
                        if (useBase64 && !environment.encodeBase64) {
                            return fallback(this, filePathNode);
                        }
                        buf = useBase64 ? environment.encodeBase64(buf) : encodeURIComponent(buf);
                        var uri = 'data:' + mimetype + ',' + buf + fragment;
                        var DATA_URI_MAX = 32768;
                        if (uri.length >= DATA_URI_MAX) {
                            if (this.context.ieCompat !== false) {
                                logger.warn('Skipped data-uri embedding of ' + filePath + ' because its size (' + uri.length + ' characters) exceeds IE8-safe ' + DATA_URI_MAX + ' characters!');
                                return fallback(this, filePathNode || mimetypeNode);
                            }
                        }
                        return new URL(new Quoted('"' + uri + '"', uri, false, this.index, this.currentFileInfo), this.index, this.currentFileInfo);
                    });
                };
            },
            {
                '../logger': 33,
                '../tree/quoted': 73,
                '../tree/url': 80,
                './function-registry': 22
            }
        ],
        20: [
            function (require, module, exports) {
                var Keyword = require('../tree/keyword'), functionRegistry = require('./function-registry');
                var defaultFunc = {
                    eval: function () {
                        var v = this.value_, e = this.error_;
                        if (e) {
                            throw e;
                        }
                        if (v != null) {
                            return v ? Keyword.True : Keyword.False;
                        }
                    },
                    value: function (v) {
                        this.value_ = v;
                    },
                    error: function (e) {
                        this.error_ = e;
                    },
                    reset: function () {
                        this.value_ = this.error_ = null;
                    }
                };
                functionRegistry.add('default', defaultFunc.eval.bind(defaultFunc));
                module.exports = defaultFunc;
            },
            {
                '../tree/keyword': 65,
                './function-registry': 22
            }
        ],
        21: [
            function (require, module, exports) {
                var Expression = require('../tree/expression');
                var functionCaller = function (name, context, index, currentFileInfo) {
                    this.name = name.toLowerCase();
                    this.index = index;
                    this.context = context;
                    this.currentFileInfo = currentFileInfo;
                    this.func = context.frames[0].functionRegistry.get(this.name);
                };
                functionCaller.prototype.isValid = function () {
                    return Boolean(this.func);
                };
                functionCaller.prototype.call = function (args) {
                    if (Array.isArray(args)) {
                        args = args.filter(function (item) {
                            if (item.type === 'Comment') {
                                return false;
                            }
                            return true;
                        }).map(function (item) {
                            if (item.type === 'Expression') {
                                var subNodes = item.value.filter(function (item) {
                                    if (item.type === 'Comment') {
                                        return false;
                                    }
                                    return true;
                                });
                                if (subNodes.length === 1) {
                                    return subNodes[0];
                                } else {
                                    return new Expression(subNodes);
                                }
                            }
                            return item;
                        });
                    }
                    return this.func.apply(this, args);
                };
                module.exports = functionCaller;
            },
            { '../tree/expression': 59 }
        ],
        22: [
            function (require, module, exports) {
                function makeRegistry(base) {
                    return {
                        _data: {},
                        add: function (name, func) {
                            name = name.toLowerCase();
                            if (this._data.hasOwnProperty(name)) {
                            }
                            this._data[name] = func;
                        },
                        addMultiple: function (functions) {
                            Object.keys(functions).forEach(function (name) {
                                this.add(name, functions[name]);
                            }.bind(this));
                        },
                        get: function (name) {
                            return this._data[name] || base && base.get(name);
                        },
                        inherit: function () {
                            return makeRegistry(this);
                        }
                    };
                }
                module.exports = makeRegistry(null);
            },
            {}
        ],
        23: [
            function (require, module, exports) {
                module.exports = function (environment) {
                    var functions = {
                        functionRegistry: require('./function-registry'),
                        functionCaller: require('./function-caller')
                    };
                    require('./default');
                    require('./color');
                    require('./color-blending');
                    require('./data-uri')(environment);
                    require('./math');
                    require('./number');
                    require('./string');
                    require('./svg')(environment);
                    require('./types');
                    return functions;
                };
            },
            {
                './color': 18,
                './color-blending': 17,
                './data-uri': 19,
                './default': 20,
                './function-caller': 21,
                './function-registry': 22,
                './math': 25,
                './number': 26,
                './string': 27,
                './svg': 28,
                './types': 29
            }
        ],
        24: [
            function (require, module, exports) {
                var Dimension = require('../tree/dimension');
                var MathHelper = function () {
                };
                MathHelper._math = function (fn, unit, n) {
                    if (!(n instanceof Dimension)) {
                        throw {
                            type: 'Argument',
                            message: 'argument must be a number'
                        };
                    }
                    if (unit == null) {
                        unit = n.unit;
                    } else {
                        n = n.unify();
                    }
                    return new Dimension(fn(parseFloat(n.value)), unit);
                };
                module.exports = MathHelper;
            },
            { '../tree/dimension': 56 }
        ],
        25: [
            function (require, module, exports) {
                var functionRegistry = require('./function-registry'), mathHelper = require('./math-helper.js');
                var mathFunctions = {
                    ceil: null,
                    floor: null,
                    sqrt: null,
                    abs: null,
                    tan: '',
                    sin: '',
                    cos: '',
                    atan: 'rad',
                    asin: 'rad',
                    acos: 'rad'
                };
                for (var f in mathFunctions) {
                    if (mathFunctions.hasOwnProperty(f)) {
                        mathFunctions[f] = mathHelper._math.bind(null, Math[f], mathFunctions[f]);
                    }
                }
                mathFunctions.round = function (n, f) {
                    var fraction = typeof f === 'undefined' ? 0 : f.value;
                    return mathHelper._math(function (num) {
                        return num.toFixed(fraction);
                    }, null, n);
                };
                functionRegistry.addMultiple(mathFunctions);
            },
            {
                './function-registry': 22,
                './math-helper.js': 24
            }
        ],
        26: [
            function (require, module, exports) {
                var Dimension = require('../tree/dimension'), Anonymous = require('../tree/anonymous'), functionRegistry = require('./function-registry'), mathHelper = require('./math-helper.js');
                var minMax = function (isMin, args) {
                    args = Array.prototype.slice.call(args);
                    switch (args.length) {
                    case 0:
                        throw {
                            type: 'Argument',
                            message: 'one or more arguments required'
                        };
                    }
                    var i, j, current, currentUnified, referenceUnified, unit, unitStatic, unitClone, order = [], values = {};
                    for (i = 0; i < args.length; i++) {
                        current = args[i];
                        if (!(current instanceof Dimension)) {
                            if (Array.isArray(args[i].value)) {
                                Array.prototype.push.apply(args, Array.prototype.slice.call(args[i].value));
                            }
                            continue;
                        }
                        currentUnified = current.unit.toString() === '' && unitClone !== undefined ? new Dimension(current.value, unitClone).unify() : current.unify();
                        unit = currentUnified.unit.toString() === '' && unitStatic !== undefined ? unitStatic : currentUnified.unit.toString();
                        unitStatic = unit !== '' && unitStatic === undefined || unit !== '' && order[0].unify().unit.toString() === '' ? unit : unitStatic;
                        unitClone = unit !== '' && unitClone === undefined ? current.unit.toString() : unitClone;
                        j = values[''] !== undefined && unit !== '' && unit === unitStatic ? values[''] : values[unit];
                        if (j === undefined) {
                            if (unitStatic !== undefined && unit !== unitStatic) {
                                throw {
                                    type: 'Argument',
                                    message: 'incompatible types'
                                };
                            }
                            values[unit] = order.length;
                            order.push(current);
                            continue;
                        }
                        referenceUnified = order[j].unit.toString() === '' && unitClone !== undefined ? new Dimension(order[j].value, unitClone).unify() : order[j].unify();
                        if (isMin && currentUnified.value < referenceUnified.value || !isMin && currentUnified.value > referenceUnified.value) {
                            order[j] = current;
                        }
                    }
                    if (order.length == 1) {
                        return order[0];
                    }
                    args = order.map(function (a) {
                        return a.toCSS(this.context);
                    }).join(this.context.compress ? ',' : ', ');
                    return new Anonymous((isMin ? 'min' : 'max') + '(' + args + ')');
                };
                functionRegistry.addMultiple({
                    min: function () {
                        return minMax(true, arguments);
                    },
                    max: function () {
                        return minMax(false, arguments);
                    },
                    convert: function (val, unit) {
                        return val.convertTo(unit.value);
                    },
                    pi: function () {
                        return new Dimension(Math.PI);
                    },
                    mod: function (a, b) {
                        return new Dimension(a.value % b.value, a.unit);
                    },
                    pow: function (x, y) {
                        if (typeof x === 'number' && typeof y === 'number') {
                            x = new Dimension(x);
                            y = new Dimension(y);
                        } else if (!(x instanceof Dimension) || !(y instanceof Dimension)) {
                            throw {
                                type: 'Argument',
                                message: 'arguments must be numbers'
                            };
                        }
                        return new Dimension(Math.pow(x.value, y.value), x.unit);
                    },
                    percentage: function (n) {
                        var result = mathHelper._math(function (num) {
                            return num * 100;
                        }, '%', n);
                        return result;
                    }
                });
            },
            {
                '../tree/anonymous': 46,
                '../tree/dimension': 56,
                './function-registry': 22,
                './math-helper.js': 24
            }
        ],
        27: [
            function (require, module, exports) {
                var Quoted = require('../tree/quoted'), Anonymous = require('../tree/anonymous'), JavaScript = require('../tree/javascript'), functionRegistry = require('./function-registry');
                functionRegistry.addMultiple({
                    e: function (str) {
                        return new Anonymous(str instanceof JavaScript ? str.evaluated : str.value);
                    },
                    escape: function (str) {
                        return new Anonymous(encodeURI(str.value).replace(/=/g, '%3D').replace(/:/g, '%3A').replace(/#/g, '%23').replace(/;/g, '%3B').replace(/\(/g, '%28').replace(/\)/g, '%29'));
                    },
                    replace: function (string, pattern, replacement, flags) {
                        var result = string.value;
                        replacement = replacement.type === 'Quoted' ? replacement.value : replacement.toCSS();
                        result = result.replace(new RegExp(pattern.value, flags ? flags.value : ''), replacement);
                        return new Quoted(string.quote || '', result, string.escaped);
                    },
                    '%': function (string) {
                        var args = Array.prototype.slice.call(arguments, 1), result = string.value;
                        for (var i = 0; i < args.length; i++) {
                            result = result.replace(/%[sda]/i, function (token) {
                                var value = args[i].type === 'Quoted' && token.match(/s/i) ? args[i].value : args[i].toCSS();
                                return token.match(/[A-Z]$/) ? encodeURIComponent(value) : value;
                            });
                        }
                        result = result.replace(/%%/g, '%');
                        return new Quoted(string.quote || '', result, string.escaped);
                    }
                });
            },
            {
                '../tree/anonymous': 46,
                '../tree/javascript': 63,
                '../tree/quoted': 73,
                './function-registry': 22
            }
        ],
        28: [
            function (require, module, exports) {
                module.exports = function (environment) {
                    var Dimension = require('../tree/dimension'), Color = require('../tree/color'), Expression = require('../tree/expression'), Quoted = require('../tree/quoted'), URL = require('../tree/url'), functionRegistry = require('./function-registry');
                    functionRegistry.add('svg-gradient', function (direction) {
                        var stops, gradientDirectionSvg, gradientType = 'linear', rectangleDimension = 'x="0" y="0" width="1" height="1"', renderEnv = { compress: false }, returner, directionValue = direction.toCSS(renderEnv), i, color, position, positionValue, alpha;
                        function throwArgumentDescriptor() {
                            throw {
                                type: 'Argument',
                                message: 'svg-gradient expects direction, start_color [start_position], [color position,]...,' + ' end_color [end_position] or direction, color list'
                            };
                        }
                        if (arguments.length == 2) {
                            if (arguments[1].value.length < 2) {
                                throwArgumentDescriptor();
                            }
                            stops = arguments[1].value;
                        } else if (arguments.length < 3) {
                            throwArgumentDescriptor();
                        } else {
                            stops = Array.prototype.slice.call(arguments, 1);
                        }
                        switch (directionValue) {
                        case 'to bottom':
                            gradientDirectionSvg = 'x1="0%" y1="0%" x2="0%" y2="100%"';
                            break;
                        case 'to right':
                            gradientDirectionSvg = 'x1="0%" y1="0%" x2="100%" y2="0%"';
                            break;
                        case 'to bottom right':
                            gradientDirectionSvg = 'x1="0%" y1="0%" x2="100%" y2="100%"';
                            break;
                        case 'to top right':
                            gradientDirectionSvg = 'x1="0%" y1="100%" x2="100%" y2="0%"';
                            break;
                        case 'ellipse':
                        case 'ellipse at center':
                            gradientType = 'radial';
                            gradientDirectionSvg = 'cx="50%" cy="50%" r="75%"';
                            rectangleDimension = 'x="-50" y="-50" width="101" height="101"';
                            break;
                        default:
                            throw {
                                type: 'Argument',
                                message: 'svg-gradient direction must be \'to bottom\', \'to right\',' + ' \'to bottom right\', \'to top right\' or \'ellipse at center\''
                            };
                        }
                        returner = '<?xml version="1.0" ?>' + '<svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="100%" height="100%" viewBox="0 0 1 1" preserveAspectRatio="none">' + '<' + gradientType + 'Gradient id="gradient" gradientUnits="userSpaceOnUse" ' + gradientDirectionSvg + '>';
                        for (i = 0; i < stops.length; i += 1) {
                            if (stops[i] instanceof Expression) {
                                color = stops[i].value[0];
                                position = stops[i].value[1];
                            } else {
                                color = stops[i];
                                position = undefined;
                            }
                            if (!(color instanceof Color) || !((i === 0 || i + 1 === stops.length) && position === undefined) && !(position instanceof Dimension)) {
                                throwArgumentDescriptor();
                            }
                            positionValue = position ? position.toCSS(renderEnv) : i === 0 ? '0%' : '100%';
                            alpha = color.alpha;
                            returner += '<stop offset="' + positionValue + '" stop-color="' + color.toRGB() + '"' + (alpha < 1 ? ' stop-opacity="' + alpha + '"' : '') + '/>';
                        }
                        returner += '</' + gradientType + 'Gradient>' + '<rect ' + rectangleDimension + ' fill="url(#gradient)" /></svg>';
                        returner = encodeURIComponent(returner);
                        returner = 'data:image/svg+xml,' + returner;
                        return new URL(new Quoted('\'' + returner + '\'', returner, false, this.index, this.currentFileInfo), this.index, this.currentFileInfo);
                    });
                };
            },
            {
                '../tree/color': 50,
                '../tree/dimension': 56,
                '../tree/expression': 59,
                '../tree/quoted': 73,
                '../tree/url': 80,
                './function-registry': 22
            }
        ],
        29: [
            function (require, module, exports) {
                var Keyword = require('../tree/keyword'), DetachedRuleset = require('../tree/detached-ruleset'), Dimension = require('../tree/dimension'), Color = require('../tree/color'), Quoted = require('../tree/quoted'), Anonymous = require('../tree/anonymous'), URL = require('../tree/url'), Operation = require('../tree/operation'), functionRegistry = require('./function-registry');
                var isa = function (n, Type) {
                        return n instanceof Type ? Keyword.True : Keyword.False;
                    }, isunit = function (n, unit) {
                        if (unit === undefined) {
                            throw {
                                type: 'Argument',
                                message: 'missing the required second argument to isunit.'
                            };
                        }
                        unit = typeof unit.value === 'string' ? unit.value : unit;
                        if (typeof unit !== 'string') {
                            throw {
                                type: 'Argument',
                                message: 'Second argument to isunit should be a unit or a string.'
                            };
                        }
                        return n instanceof Dimension && n.unit.is(unit) ? Keyword.True : Keyword.False;
                    }, getItemsFromNode = function (node) {
                        var items = Array.isArray(node.value) ? node.value : Array(node);
                        return items;
                    };
                functionRegistry.addMultiple({
                    isruleset: function (n) {
                        return isa(n, DetachedRuleset);
                    },
                    iscolor: function (n) {
                        return isa(n, Color);
                    },
                    isnumber: function (n) {
                        return isa(n, Dimension);
                    },
                    isstring: function (n) {
                        return isa(n, Quoted);
                    },
                    iskeyword: function (n) {
                        return isa(n, Keyword);
                    },
                    isurl: function (n) {
                        return isa(n, URL);
                    },
                    ispixel: function (n) {
                        return isunit(n, 'px');
                    },
                    ispercentage: function (n) {
                        return isunit(n, '%');
                    },
                    isem: function (n) {
                        return isunit(n, 'em');
                    },
                    isunit: isunit,
                    unit: function (val, unit) {
                        if (!(val instanceof Dimension)) {
                            throw {
                                type: 'Argument',
                                message: 'the first argument to unit must be a number' + (val instanceof Operation ? '. Have you forgotten parenthesis?' : '')
                            };
                        }
                        if (unit) {
                            if (unit instanceof Keyword) {
                                unit = unit.value;
                            } else {
                                unit = unit.toCSS();
                            }
                        } else {
                            unit = '';
                        }
                        return new Dimension(val.value, unit);
                    },
                    'get-unit': function (n) {
                        return new Anonymous(n.unit);
                    },
                    extract: function (values, index) {
                        index = index.value - 1;
                        return getItemsFromNode(values)[index];
                    },
                    length: function (values) {
                        return new Dimension(getItemsFromNode(values).length);
                    }
                });
            },
            {
                '../tree/anonymous': 46,
                '../tree/color': 50,
                '../tree/detached-ruleset': 55,
                '../tree/dimension': 56,
                '../tree/keyword': 65,
                '../tree/operation': 71,
                '../tree/quoted': 73,
                '../tree/url': 80,
                './function-registry': 22
            }
        ],
        30: [
            function (require, module, exports) {
                var contexts = require('./contexts'), Parser = require('./parser/parser'), FunctionImporter = require('./plugins/function-importer');
                module.exports = function (environment) {
                    var ImportManager = function (context, rootFileInfo) {
                        this.rootFilename = rootFileInfo.filename;
                        this.paths = context.paths || [];
                        this.contents = {};
                        this.contentsIgnoredChars = {};
                        this.mime = context.mime;
                        this.error = null;
                        this.context = context;
                        this.queue = [];
                        this.files = {};
                    };
                    ImportManager.prototype.push = function (path, tryAppendLessExtension, currentFileInfo, importOptions, callback) {
                        var importManager = this;
                        this.queue.push(path);
                        var fileParsedFunc = function (e, root, fullPath) {
                            importManager.queue.splice(importManager.queue.indexOf(path), 1);
                            var importedEqualsRoot = fullPath === importManager.rootFilename;
                            if (importOptions.optional && e) {
                                callback(null, { rules: [] }, false, null);
                            } else {
                                importManager.files[fullPath] = root;
                                if (e && !importManager.error) {
                                    importManager.error = e;
                                }
                                callback(e, root, importedEqualsRoot, fullPath);
                            }
                        };
                        var newFileInfo = {
                            relativeUrls: this.context.relativeUrls,
                            entryPath: currentFileInfo.entryPath,
                            rootpath: currentFileInfo.rootpath,
                            rootFilename: currentFileInfo.rootFilename
                        };
                        var fileManager = environment.getFileManager(path, currentFileInfo.currentDirectory, this.context, environment);
                        if (!fileManager) {
                            fileParsedFunc({ message: 'Could not find a file-manager for ' + path });
                            return;
                        }
                        if (tryAppendLessExtension) {
                            path = fileManager.tryAppendExtension(path, importOptions.plugin ? '.js' : '.less');
                        }
                        var loadFileCallback = function (loadedFile) {
                            var resolvedFilename = loadedFile.filename, contents = loadedFile.contents.replace(/^\uFEFF/, '');
                            newFileInfo.currentDirectory = fileManager.getPath(resolvedFilename);
                            if (newFileInfo.relativeUrls) {
                                newFileInfo.rootpath = fileManager.join(importManager.context.rootpath || '', fileManager.pathDiff(newFileInfo.currentDirectory, newFileInfo.entryPath));
                                if (!fileManager.isPathAbsolute(newFileInfo.rootpath) && fileManager.alwaysMakePathsAbsolute()) {
                                    newFileInfo.rootpath = fileManager.join(newFileInfo.entryPath, newFileInfo.rootpath);
                                }
                            }
                            newFileInfo.filename = resolvedFilename;
                            var newEnv = new contexts.Parse(importManager.context);
                            newEnv.processImports = false;
                            importManager.contents[resolvedFilename] = contents;
                            if (currentFileInfo.reference || importOptions.reference) {
                                newFileInfo.reference = true;
                            }
                            if (importOptions.plugin) {
                                new FunctionImporter(newEnv, newFileInfo).eval(contents, function (e, root) {
                                    fileParsedFunc(e, root, resolvedFilename);
                                });
                            } else if (importOptions.inline) {
                                fileParsedFunc(null, contents, resolvedFilename);
                            } else {
                                new Parser(newEnv, importManager, newFileInfo).parse(contents, function (e, root) {
                                    fileParsedFunc(e, root, resolvedFilename);
                                });
                            }
                        };
                        var promise = fileManager.loadFile(path, currentFileInfo.currentDirectory, this.context, environment, function (err, loadedFile) {
                            if (err) {
                                fileParsedFunc(err);
                            } else {
                                loadFileCallback(loadedFile);
                            }
                        });
                        if (promise) {
                            promise.then(loadFileCallback, fileParsedFunc);
                        }
                    };
                    return ImportManager;
                };
            },
            {
                './contexts': 11,
                './parser/parser': 38,
                './plugins/function-importer': 40
            }
        ],
        31: [
            function (require, module, exports) {
                module.exports = function (environment, fileManagers) {
                    var SourceMapOutput, SourceMapBuilder, ParseTree, ImportManager, Environment;
                    var less = {
                        version: [
                            2,
                            6,
                            0
                        ],
                        data: require('./data'),
                        tree: require('./tree'),
                        Environment: Environment = require('./environment/environment'),
                        AbstractFileManager: require('./environment/abstract-file-manager'),
                        environment: environment = new Environment(environment, fileManagers),
                        visitors: require('./visitors'),
                        Parser: require('./parser/parser'),
                        functions: require('./functions')(environment),
                        contexts: require('./contexts'),
                        SourceMapOutput: SourceMapOutput = require('./source-map-output')(environment),
                        SourceMapBuilder: SourceMapBuilder = require('./source-map-builder')(SourceMapOutput, environment),
                        ParseTree: ParseTree = require('./parse-tree')(SourceMapBuilder),
                        ImportManager: ImportManager = require('./import-manager')(environment),
                        render: require('./render')(environment, ParseTree, ImportManager),
                        parse: require('./parse')(environment, ParseTree, ImportManager),
                        LessError: require('./less-error'),
                        transformTree: require('./transform-tree'),
                        utils: require('./utils'),
                        PluginManager: require('./plugin-manager'),
                        logger: require('./logger')
                    };
                    return less;
                };
            },
            {
                './contexts': 11,
                './data': 13,
                './environment/abstract-file-manager': 15,
                './environment/environment': 16,
                './functions': 23,
                './import-manager': 30,
                './less-error': 32,
                './logger': 33,
                './parse': 35,
                './parse-tree': 34,
                './parser/parser': 38,
                './plugin-manager': 39,
                './render': 41,
                './source-map-builder': 42,
                './source-map-output': 43,
                './transform-tree': 44,
                './tree': 62,
                './utils': 83,
                './visitors': 87
            }
        ],
        32: [
            function (require, module, exports) {
                var utils = require('./utils');
                var LessError = module.exports = function LessError(e, importManager, currentFilename) {
                    Error.call(this);
                    var filename = e.filename || currentFilename;
                    if (importManager && filename) {
                        var input = importManager.contents[filename], loc = utils.getLocation(e.index, input), line = loc.line, col = loc.column, callLine = e.call && utils.getLocation(e.call, input).line, lines = input.split('\n');
                        this.type = e.type || 'Syntax';
                        this.filename = filename;
                        this.index = e.index;
                        this.line = typeof line === 'number' ? line + 1 : null;
                        this.callLine = callLine + 1;
                        this.callExtract = lines[callLine];
                        this.column = col;
                        this.extract = [
                            lines[line - 1],
                            lines[line],
                            lines[line + 1]
                        ];
                    }
                    this.message = e.message;
                    this.stack = e.stack;
                };
                if (typeof Object.create === 'undefined') {
                    var F = function () {
                    };
                    F.prototype = Error.prototype;
                    LessError.prototype = new F();
                } else {
                    LessError.prototype = Object.create(Error.prototype);
                }
                LessError.prototype.constructor = LessError;
            },
            { './utils': 83 }
        ],
        33: [
            function (require, module, exports) {
                module.exports = {
                    error: function (msg) {
                        this._fireEvent('error', msg);
                    },
                    warn: function (msg) {
                        this._fireEvent('warn', msg);
                    },
                    info: function (msg) {
                        this._fireEvent('info', msg);
                    },
                    debug: function (msg) {
                        this._fireEvent('debug', msg);
                    },
                    addListener: function (listener) {
                        this._listeners.push(listener);
                    },
                    removeListener: function (listener) {
                        for (var i = 0; i < this._listeners.length; i++) {
                            if (this._listeners[i] === listener) {
                                this._listeners.splice(i, 1);
                                return;
                            }
                        }
                    },
                    _fireEvent: function (type, msg) {
                        for (var i = 0; i < this._listeners.length; i++) {
                            var logFunction = this._listeners[i][type];
                            if (logFunction) {
                                logFunction(msg);
                            }
                        }
                    },
                    _listeners: []
                };
            },
            {}
        ],
        34: [
            function (require, module, exports) {
                var LessError = require('./less-error'), transformTree = require('./transform-tree'), logger = require('./logger');
                module.exports = function (SourceMapBuilder) {
                    var ParseTree = function (root, imports) {
                        this.root = root;
                        this.imports = imports;
                    };
                    ParseTree.prototype.toCSS = function (options) {
                        var evaldRoot, result = {}, sourceMapBuilder;
                        try {
                            evaldRoot = transformTree(this.root, options);
                        } catch (e) {
                            throw new LessError(e, this.imports);
                        }
                        try {
                            var compress = Boolean(options.compress);
                            if (compress) {
                                logger.warn('The compress option has been deprecated. We recommend you use a dedicated css minifier, for instance see less-plugin-clean-css.');
                            }
                            var toCSSOptions = {
                                compress: compress,
                                dumpLineNumbers: options.dumpLineNumbers,
                                strictUnits: Boolean(options.strictUnits),
                                numPrecision: 8
                            };
                            if (options.sourceMap) {
                                sourceMapBuilder = new SourceMapBuilder(options.sourceMap);
                                result.css = sourceMapBuilder.toCSS(evaldRoot, toCSSOptions, this.imports);
                            } else {
                                result.css = evaldRoot.toCSS(toCSSOptions);
                            }
                        } catch (e) {
                            throw new LessError(e, this.imports);
                        }
                        if (options.pluginManager) {
                            var postProcessors = options.pluginManager.getPostProcessors();
                            for (var i = 0; i < postProcessors.length; i++) {
                                result.css = postProcessors[i].process(result.css, {
                                    sourceMap: sourceMapBuilder,
                                    options: options,
                                    imports: this.imports
                                });
                            }
                        }
                        if (options.sourceMap) {
                            result.map = sourceMapBuilder.getExternalSourceMap();
                        }
                        result.imports = [];
                        for (var file in this.imports.files) {
                            if (this.imports.files.hasOwnProperty(file) && file !== this.imports.rootFilename) {
                                result.imports.push(file);
                            }
                        }
                        return result;
                    };
                    return ParseTree;
                };
            },
            {
                './less-error': 32,
                './logger': 33,
                './transform-tree': 44
            }
        ],
        35: [
            function (require, module, exports) {
                var PromiseConstructor, contexts = require('./contexts'), Parser = require('./parser/parser'), PluginManager = require('./plugin-manager');
                module.exports = function (environment, ParseTree, ImportManager) {
                    var parse = function (input, options, callback) {
                        options = options || {};
                        if (typeof options === 'function') {
                            callback = options;
                            options = {};
                        }
                        if (!callback) {
                            if (!PromiseConstructor) {
                                PromiseConstructor = typeof Promise === 'undefined' ? require('promise') : Promise;
                            }
                            var self = this;
                            return new PromiseConstructor(function (resolve, reject) {
                                parse.call(self, input, options, function (err, output) {
                                    if (err) {
                                        reject(err);
                                    } else {
                                        resolve(output);
                                    }
                                });
                            });
                        } else {
                            var context, rootFileInfo, pluginManager = new PluginManager(this);
                            pluginManager.addPlugins(options.plugins);
                            options.pluginManager = pluginManager;
                            context = new contexts.Parse(options);
                            if (options.rootFileInfo) {
                                rootFileInfo = options.rootFileInfo;
                            } else {
                                var filename = options.filename || 'input';
                                var entryPath = filename.replace(/[^\/\\]*$/, '');
                                rootFileInfo = {
                                    filename: filename,
                                    relativeUrls: context.relativeUrls,
                                    rootpath: context.rootpath || '',
                                    currentDirectory: entryPath,
                                    entryPath: entryPath,
                                    rootFilename: filename
                                };
                                if (rootFileInfo.rootpath && rootFileInfo.rootpath.slice(-1) !== '/') {
                                    rootFileInfo.rootpath += '/';
                                }
                            }
                            var imports = new ImportManager(context, rootFileInfo);
                            new Parser(context, imports, rootFileInfo).parse(input, function (e, root) {
                                if (e) {
                                    return callback(e);
                                }
                                callback(null, root, imports, options);
                            }, options);
                        }
                    };
                    return parse;
                };
            },
            {
                './contexts': 11,
                './parser/parser': 38,
                './plugin-manager': 39,
                'promise': undefined
            }
        ],
        36: [
            function (require, module, exports) {
                module.exports = function (input, fail) {
                    var len = input.length, level = 0, parenLevel = 0, lastOpening, lastOpeningParen, lastMultiComment, lastMultiCommentEndBrace, chunks = [], emitFrom = 0, chunkerCurrentIndex, currentChunkStartIndex, cc, cc2, matched;
                    function emitChunk(force) {
                        var len = chunkerCurrentIndex - emitFrom;
                        if (len < 512 && !force || !len) {
                            return;
                        }
                        chunks.push(input.slice(emitFrom, chunkerCurrentIndex + 1));
                        emitFrom = chunkerCurrentIndex + 1;
                    }
                    for (chunkerCurrentIndex = 0; chunkerCurrentIndex < len; chunkerCurrentIndex++) {
                        cc = input.charCodeAt(chunkerCurrentIndex);
                        if (cc >= 97 && cc <= 122 || cc < 34) {
                            continue;
                        }
                        switch (cc) {
                        case 40:
                            parenLevel++;
                            lastOpeningParen = chunkerCurrentIndex;
                            continue;
                        case 41:
                            if (--parenLevel < 0) {
                                return fail('missing opening `(`', chunkerCurrentIndex);
                            }
                            continue;
                        case 59:
                            if (!parenLevel) {
                                emitChunk();
                            }
                            continue;
                        case 123:
                            level++;
                            lastOpening = chunkerCurrentIndex;
                            continue;
                        case 125:
                            if (--level < 0) {
                                return fail('missing opening `{`', chunkerCurrentIndex);
                            }
                            if (!level && !parenLevel) {
                                emitChunk();
                            }
                            continue;
                        case 92:
                            if (chunkerCurrentIndex < len - 1) {
                                chunkerCurrentIndex++;
                                continue;
                            }
                            return fail('unescaped `\\`', chunkerCurrentIndex);
                        case 34:
                        case 39:
                        case 96:
                            matched = 0;
                            currentChunkStartIndex = chunkerCurrentIndex;
                            for (chunkerCurrentIndex = chunkerCurrentIndex + 1; chunkerCurrentIndex < len; chunkerCurrentIndex++) {
                                cc2 = input.charCodeAt(chunkerCurrentIndex);
                                if (cc2 > 96) {
                                    continue;
                                }
                                if (cc2 == cc) {
                                    matched = 1;
                                    break;
                                }
                                if (cc2 == 92) {
                                    if (chunkerCurrentIndex == len - 1) {
                                        return fail('unescaped `\\`', chunkerCurrentIndex);
                                    }
                                    chunkerCurrentIndex++;
                                }
                            }
                            if (matched) {
                                continue;
                            }
                            return fail('unmatched `' + String.fromCharCode(cc) + '`', currentChunkStartIndex);
                        case 47:
                            if (parenLevel || chunkerCurrentIndex == len - 1) {
                                continue;
                            }
                            cc2 = input.charCodeAt(chunkerCurrentIndex + 1);
                            if (cc2 == 47) {
                                for (chunkerCurrentIndex = chunkerCurrentIndex + 2; chunkerCurrentIndex < len; chunkerCurrentIndex++) {
                                    cc2 = input.charCodeAt(chunkerCurrentIndex);
                                    if (cc2 <= 13 && (cc2 == 10 || cc2 == 13)) {
                                        break;
                                    }
                                }
                            } else if (cc2 == 42) {
                                lastMultiComment = currentChunkStartIndex = chunkerCurrentIndex;
                                for (chunkerCurrentIndex = chunkerCurrentIndex + 2; chunkerCurrentIndex < len - 1; chunkerCurrentIndex++) {
                                    cc2 = input.charCodeAt(chunkerCurrentIndex);
                                    if (cc2 == 125) {
                                        lastMultiCommentEndBrace = chunkerCurrentIndex;
                                    }
                                    if (cc2 != 42) {
                                        continue;
                                    }
                                    if (input.charCodeAt(chunkerCurrentIndex + 1) == 47) {
                                        break;
                                    }
                                }
                                if (chunkerCurrentIndex == len - 1) {
                                    return fail('missing closing `*/`', currentChunkStartIndex);
                                }
                                chunkerCurrentIndex++;
                            }
                            continue;
                        case 42:
                            if (chunkerCurrentIndex < len - 1 && input.charCodeAt(chunkerCurrentIndex + 1) == 47) {
                                return fail('unmatched `/*`', chunkerCurrentIndex);
                            }
                            continue;
                        }
                    }
                    if (level !== 0) {
                        if (lastMultiComment > lastOpening && lastMultiCommentEndBrace > lastMultiComment) {
                            return fail('missing closing `}` or `*/`', lastOpening);
                        } else {
                            return fail('missing closing `}`', lastOpening);
                        }
                    } else if (parenLevel !== 0) {
                        return fail('missing closing `)`', lastOpeningParen);
                    }
                    emitChunk(true);
                    return chunks;
                };
            },
            {}
        ],
        37: [
            function (require, module, exports) {
                var chunker = require('./chunker');
                module.exports = function () {
                    var input, j, saveStack = [], furthest, furthestPossibleErrorMessage, chunks, current, currentPos, parserInput = {};
                    parserInput.save = function () {
                        currentPos = parserInput.i;
                        saveStack.push({
                            current: current,
                            i: parserInput.i,
                            j: j
                        });
                    };
                    parserInput.restore = function (possibleErrorMessage) {
                        if (parserInput.i > furthest || parserInput.i === furthest && possibleErrorMessage && !furthestPossibleErrorMessage) {
                            furthest = parserInput.i;
                            furthestPossibleErrorMessage = possibleErrorMessage;
                        }
                        var state = saveStack.pop();
                        current = state.current;
                        currentPos = parserInput.i = state.i;
                        j = state.j;
                    };
                    parserInput.forget = function () {
                        saveStack.pop();
                    };
                    parserInput.isWhitespace = function (offset) {
                        var pos = parserInput.i + (offset || 0), code = input.charCodeAt(pos);
                        return code === CHARCODE_SPACE || code === CHARCODE_CR || code === CHARCODE_TAB || code === CHARCODE_LF;
                    };
                    parserInput.$re = function (tok) {
                        if (parserInput.i > currentPos) {
                            current = current.slice(parserInput.i - currentPos);
                            currentPos = parserInput.i;
                        }
                        var m = tok.exec(current);
                        if (!m) {
                            return null;
                        }
                        skipWhitespace(m[0].length);
                        if (typeof m === 'string') {
                            return m;
                        }
                        return m.length === 1 ? m[0] : m;
                    };
                    parserInput.$char = function (tok) {
                        if (input.charAt(parserInput.i) !== tok) {
                            return null;
                        }
                        skipWhitespace(1);
                        return tok;
                    };
                    parserInput.$str = function (tok) {
                        var tokLength = tok.length;
                        for (var i = 0; i < tokLength; i++) {
                            if (input.charAt(parserInput.i + i) !== tok.charAt(i)) {
                                return null;
                            }
                        }
                        skipWhitespace(tokLength);
                        return tok;
                    };
                    parserInput.$quoted = function () {
                        var startChar = input.charAt(parserInput.i);
                        if (startChar !== '\'' && startChar !== '"') {
                            return;
                        }
                        var length = input.length, currentPosition = parserInput.i;
                        for (var i = 1; i + currentPosition < length; i++) {
                            var nextChar = input.charAt(i + currentPosition);
                            switch (nextChar) {
                            case '\\':
                                i++;
                                continue;
                            case '\r':
                            case '\n':
                                break;
                            case startChar:
                                var str = input.substr(currentPosition, i + 1);
                                skipWhitespace(i + 1);
                                return str;
                            default:
                            }
                        }
                        return null;
                    };
                    var CHARCODE_SPACE = 32, CHARCODE_TAB = 9, CHARCODE_LF = 10, CHARCODE_CR = 13, CHARCODE_PLUS = 43, CHARCODE_COMMA = 44, CHARCODE_FORWARD_SLASH = 47, CHARCODE_9 = 57;
                    parserInput.autoCommentAbsorb = true;
                    parserInput.commentStore = [];
                    parserInput.finished = false;
                    var skipWhitespace = function (length) {
                        var oldi = parserInput.i, oldj = j, curr = parserInput.i - currentPos, endIndex = parserInput.i + current.length - curr, mem = parserInput.i += length, inp = input, c, nextChar, comment;
                        for (; parserInput.i < endIndex; parserInput.i++) {
                            c = inp.charCodeAt(parserInput.i);
                            if (parserInput.autoCommentAbsorb && c === CHARCODE_FORWARD_SLASH) {
                                nextChar = inp.charAt(parserInput.i + 1);
                                if (nextChar === '/') {
                                    comment = {
                                        index: parserInput.i,
                                        isLineComment: true
                                    };
                                    var nextNewLine = inp.indexOf('\n', parserInput.i + 2);
                                    if (nextNewLine < 0) {
                                        nextNewLine = endIndex;
                                    }
                                    parserInput.i = nextNewLine;
                                    comment.text = inp.substr(comment.i, parserInput.i - comment.i);
                                    parserInput.commentStore.push(comment);
                                    continue;
                                } else if (nextChar === '*') {
                                    var nextStarSlash = inp.indexOf('*/', parserInput.i + 2);
                                    if (nextStarSlash >= 0) {
                                        comment = {
                                            index: parserInput.i,
                                            text: inp.substr(parserInput.i, nextStarSlash + 2 - parserInput.i),
                                            isLineComment: false
                                        };
                                        parserInput.i += comment.text.length - 1;
                                        parserInput.commentStore.push(comment);
                                        continue;
                                    }
                                }
                                break;
                            }
                            if (c !== CHARCODE_SPACE && c !== CHARCODE_LF && c !== CHARCODE_TAB && c !== CHARCODE_CR) {
                                break;
                            }
                        }
                        current = current.slice(length + parserInput.i - mem + curr);
                        currentPos = parserInput.i;
                        if (!current.length) {
                            if (j < chunks.length - 1) {
                                current = chunks[++j];
                                skipWhitespace(0);
                                return true;
                            }
                            parserInput.finished = true;
                        }
                        return oldi !== parserInput.i || oldj !== j;
                    };
                    parserInput.peek = function (tok) {
                        if (typeof tok === 'string') {
                            for (var i = 0; i < tok.length; i++) {
                                if (input.charAt(parserInput.i + i) !== tok.charAt(i)) {
                                    return false;
                                }
                            }
                            return true;
                        } else {
                            return tok.test(current);
                        }
                    };
                    parserInput.peekChar = function (tok) {
                        return input.charAt(parserInput.i) === tok;
                    };
                    parserInput.currentChar = function () {
                        return input.charAt(parserInput.i);
                    };
                    parserInput.getInput = function () {
                        return input;
                    };
                    parserInput.peekNotNumeric = function () {
                        var c = input.charCodeAt(parserInput.i);
                        return c > CHARCODE_9 || c < CHARCODE_PLUS || c === CHARCODE_FORWARD_SLASH || c === CHARCODE_COMMA;
                    };
                    parserInput.start = function (str, chunkInput, failFunction) {
                        input = str;
                        parserInput.i = j = currentPos = furthest = 0;
                        if (chunkInput) {
                            chunks = chunker(str, failFunction);
                        } else {
                            chunks = [str];
                        }
                        current = chunks[0];
                        skipWhitespace(0);
                    };
                    parserInput.end = function () {
                        var message, isFinished = parserInput.i >= input.length;
                        if (parserInput.i < furthest) {
                            message = furthestPossibleErrorMessage;
                            parserInput.i = furthest;
                        }
                        return {
                            isFinished: isFinished,
                            furthest: parserInput.i,
                            furthestPossibleErrorMessage: message,
                            furthestReachedEnd: parserInput.i >= input.length - 1,
                            furthestChar: input[parserInput.i]
                        };
                    };
                    return parserInput;
                };
            },
            { './chunker': 36 }
        ],
        38: [
            function (require, module, exports) {
                var LessError = require('../less-error'), tree = require('../tree'), visitors = require('../visitors'), getParserInput = require('./parser-input'), utils = require('../utils');
                var Parser = function Parser(context, imports, fileInfo) {
                    var parsers, parserInput = getParserInput();
                    function expect(arg, msg, index) {
                        var result = Object.prototype.toString.call(arg) === '[object Function]' ? arg.call(parsers) : parserInput.$re(arg);
                        if (result) {
                            return result;
                        }
                        error(msg || (typeof arg === 'string' ? 'expected \'' + arg + '\' got \'' + parserInput.currentChar() + '\'' : 'unexpected token'));
                    }
                    function expectChar(arg, msg) {
                        if (parserInput.$char(arg)) {
                            return arg;
                        }
                        error(msg || 'expected \'' + arg + '\' got \'' + parserInput.currentChar() + '\'');
                    }
                    function error(msg, type) {
                        throw new LessError({
                            index: parserInput.i,
                            filename: fileInfo.filename,
                            type: type || 'Syntax',
                            message: msg
                        }, imports);
                    }
                    function getDebugInfo(index) {
                        var filename = fileInfo.filename;
                        return {
                            lineNumber: utils.getLocation(index, parserInput.getInput()).line + 1,
                            fileName: filename
                        };
                    }
                    return {
                        parse: function (str, callback, additionalData) {
                            var root, error = null, globalVars, modifyVars, ignored, preText = '';
                            globalVars = additionalData && additionalData.globalVars ? Parser.serializeVars(additionalData.globalVars) + '\n' : '';
                            modifyVars = additionalData && additionalData.modifyVars ? '\n' + Parser.serializeVars(additionalData.modifyVars) : '';
                            if (context.pluginManager) {
                                var preProcessors = context.pluginManager.getPreProcessors();
                                for (var i = 0; i < preProcessors.length; i++) {
                                    str = preProcessors[i].process(str, {
                                        context: context,
                                        imports: imports,
                                        fileInfo: fileInfo
                                    });
                                }
                            }
                            if (globalVars || additionalData && additionalData.banner) {
                                preText = (additionalData && additionalData.banner ? additionalData.banner : '') + globalVars;
                                ignored = imports.contentsIgnoredChars;
                                ignored[fileInfo.filename] = ignored[fileInfo.filename] || 0;
                                ignored[fileInfo.filename] += preText.length;
                            }
                            str = str.replace(/\r\n?/g, '\n');
                            str = preText + str.replace(/^\uFEFF/, '') + modifyVars;
                            imports.contents[fileInfo.filename] = str;
                            try {
                                parserInput.start(str, context.chunkInput, function fail(msg, index) {
                                    throw new LessError({
                                        index: index,
                                        type: 'Parse',
                                        message: msg,
                                        filename: fileInfo.filename
                                    }, imports);
                                });
                                root = new tree.Ruleset(null, this.parsers.primary());
                                root.root = true;
                                root.firstRoot = true;
                            } catch (e) {
                                return callback(new LessError(e, imports, fileInfo.filename));
                            }
                            var endInfo = parserInput.end();
                            if (!endInfo.isFinished) {
                                var message = endInfo.furthestPossibleErrorMessage;
                                if (!message) {
                                    message = 'Unrecognised input';
                                    if (endInfo.furthestChar === '}') {
                                        message += '. Possibly missing opening \'{\'';
                                    } else if (endInfo.furthestChar === ')') {
                                        message += '. Possibly missing opening \'(\'';
                                    } else if (endInfo.furthestReachedEnd) {
                                        message += '. Possibly missing something';
                                    }
                                }
                                error = new LessError({
                                    type: 'Parse',
                                    message: message,
                                    index: endInfo.furthest,
                                    filename: fileInfo.filename
                                }, imports);
                            }
                            var finish = function (e) {
                                e = error || e || imports.error;
                                if (e) {
                                    if (!(e instanceof LessError)) {
                                        e = new LessError(e, imports, fileInfo.filename);
                                    }
                                    return callback(e);
                                } else {
                                    return callback(null, root);
                                }
                            };
                            if (context.processImports !== false) {
                                new visitors.ImportVisitor(imports, finish).run(root);
                            } else {
                                return finish();
                            }
                        },
                        parsers: parsers = {
                            primary: function () {
                                var mixin = this.mixin, root = [], node;
                                while (true) {
                                    while (true) {
                                        node = this.comment();
                                        if (!node) {
                                            break;
                                        }
                                        root.push(node);
                                    }
                                    if (parserInput.finished) {
                                        break;
                                    }
                                    if (parserInput.peek('}')) {
                                        break;
                                    }
                                    node = this.extendRule();
                                    if (node) {
                                        root = root.concat(node);
                                        continue;
                                    }
                                    node = mixin.definition() || this.rule() || this.ruleset() || mixin.call() || this.rulesetCall() || this.directive();
                                    if (node) {
                                        root.push(node);
                                    } else {
                                        var foundSemiColon = false;
                                        while (parserInput.$char(';')) {
                                            foundSemiColon = true;
                                        }
                                        if (!foundSemiColon) {
                                            break;
                                        }
                                    }
                                }
                                return root;
                            },
                            comment: function () {
                                if (parserInput.commentStore.length) {
                                    var comment = parserInput.commentStore.shift();
                                    return new tree.Comment(comment.text, comment.isLineComment, comment.index, fileInfo);
                                }
                            },
                            entities: {
                                quoted: function () {
                                    var str, index = parserInput.i, isEscaped = false;
                                    parserInput.save();
                                    if (parserInput.$char('~')) {
                                        isEscaped = true;
                                    }
                                    str = parserInput.$quoted();
                                    if (!str) {
                                        parserInput.restore();
                                        return;
                                    }
                                    parserInput.forget();
                                    return new tree.Quoted(str.charAt(0), str.substr(1, str.length - 2), isEscaped, index, fileInfo);
                                },
                                keyword: function () {
                                    var k = parserInput.$char('%') || parserInput.$re(/^[_A-Za-z-][_A-Za-z0-9-]*/);
                                    if (k) {
                                        return tree.Color.fromKeyword(k) || new tree.Keyword(k);
                                    }
                                },
                                namedColor: function () {
                                    parserInput.save();
                                    var autoCommentAbsorb = parserInput.autoCommentAbsorb;
                                    parserInput.autoCommentAbsorb = false;
                                    var k = parserInput.$re(/^[_A-Za-z-][_A-Za-z0-9-]*/);
                                    parserInput.autoCommentAbsorb = autoCommentAbsorb;
                                    if (!k) {
                                        parserInput.forget();
                                        return;
                                    }
                                    var result = tree.Color.fromKeyword(k);
                                    if (!result) {
                                        parserInput.restore();
                                    } else {
                                        parserInput.forget();
                                        return result;
                                    }
                                },
                                call: function () {
                                    var name, nameLC, args, alpha, index = parserInput.i;
                                    if (parserInput.peek(/^url\(/i)) {
                                        return;
                                    }
                                    parserInput.save();
                                    name = parserInput.$re(/^([\w-]+|%|progid:[\w\.]+)\(/);
                                    if (!name) {
                                        parserInput.forget();
                                        return;
                                    }
                                    name = name[1];
                                    nameLC = name.toLowerCase();
                                    if (nameLC === 'alpha') {
                                        alpha = parsers.alpha();
                                        if (alpha) {
                                            parserInput.forget();
                                            return alpha;
                                        }
                                    }
                                    args = this.arguments();
                                    if (!parserInput.$char(')')) {
                                        parserInput.restore('Could not parse call arguments or missing \')\'');
                                        return;
                                    }
                                    parserInput.forget();
                                    return new tree.Call(name, args, index, fileInfo);
                                },
                                arguments: function () {
                                    var args = [], arg;
                                    while (true) {
                                        arg = this.assignment() || parsers.expression();
                                        if (!arg) {
                                            break;
                                        }
                                        args.push(arg);
                                        if (!parserInput.$char(',')) {
                                            break;
                                        }
                                    }
                                    return args;
                                },
                                literal: function () {
                                    return this.dimension() || this.color() || this.quoted() || this.unicodeDescriptor();
                                },
                                assignment: function () {
                                    var key, value;
                                    parserInput.save();
                                    key = parserInput.$re(/^\w+(?=\s?=)/i);
                                    if (!key) {
                                        parserInput.restore();
                                        return;
                                    }
                                    if (!parserInput.$char('=')) {
                                        parserInput.restore();
                                        return;
                                    }
                                    value = parsers.entity();
                                    if (value) {
                                        parserInput.forget();
                                        return new tree.Assignment(key, value);
                                    } else {
                                        parserInput.restore();
                                    }
                                },
                                url: function () {
                                    var value, index = parserInput.i;
                                    parserInput.autoCommentAbsorb = false;
                                    if (!parserInput.$str('url(')) {
                                        parserInput.autoCommentAbsorb = true;
                                        return;
                                    }
                                    value = this.quoted() || this.variable() || parserInput.$re(/^(?:(?:\\[\(\)'"])|[^\(\)'"])+/) || '';
                                    parserInput.autoCommentAbsorb = true;
                                    expectChar(')');
                                    return new tree.URL(value.value != null || value instanceof tree.Variable ? value : new tree.Anonymous(value), index, fileInfo);
                                },
                                variable: function () {
                                    var name, index = parserInput.i;
                                    if (parserInput.currentChar() === '@' && (name = parserInput.$re(/^@@?[\w-]+/))) {
                                        return new tree.Variable(name, index, fileInfo);
                                    }
                                },
                                variableCurly: function () {
                                    var curly, index = parserInput.i;
                                    if (parserInput.currentChar() === '@' && (curly = parserInput.$re(/^@\{([\w-]+)\}/))) {
                                        return new tree.Variable('@' + curly[1], index, fileInfo);
                                    }
                                },
                                color: function () {
                                    var rgb;
                                    if (parserInput.currentChar() === '#' && (rgb = parserInput.$re(/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})/))) {
                                        var colorCandidateString = rgb.input.match(/^#([\w]+).*/);
                                        colorCandidateString = colorCandidateString[1];
                                        if (!colorCandidateString.match(/^[A-Fa-f0-9]+$/)) {
                                            error('Invalid HEX color code');
                                        }
                                        return new tree.Color(rgb[1], undefined, '#' + colorCandidateString);
                                    }
                                    return this.namedColor();
                                },
                                dimension: function () {
                                    if (parserInput.peekNotNumeric()) {
                                        return;
                                    }
                                    var value = parserInput.$re(/^([+-]?\d*\.?\d+)(%|[a-z_]+)?/i);
                                    if (value) {
                                        return new tree.Dimension(value[1], value[2]);
                                    }
                                },
                                unicodeDescriptor: function () {
                                    var ud;
                                    ud = parserInput.$re(/^U\+[0-9a-fA-F?]+(\-[0-9a-fA-F?]+)?/);
                                    if (ud) {
                                        return new tree.UnicodeDescriptor(ud[0]);
                                    }
                                },
                                javascript: function () {
                                    var js, index = parserInput.i;
                                    parserInput.save();
                                    var escape = parserInput.$char('~');
                                    var jsQuote = parserInput.$char('`');
                                    if (!jsQuote) {
                                        parserInput.restore();
                                        return;
                                    }
                                    js = parserInput.$re(/^[^`]*`/);
                                    if (js) {
                                        parserInput.forget();
                                        return new tree.JavaScript(js.substr(0, js.length - 1), Boolean(escape), index, fileInfo);
                                    }
                                    parserInput.restore('invalid javascript definition');
                                }
                            },
                            variable: function () {
                                var name;
                                if (parserInput.currentChar() === '@' && (name = parserInput.$re(/^(@[\w-]+)\s*:/))) {
                                    return name[1];
                                }
                            },
                            rulesetCall: function () {
                                var name;
                                if (parserInput.currentChar() === '@' && (name = parserInput.$re(/^(@[\w-]+)\s*\(\s*\)\s*;/))) {
                                    return new tree.RulesetCall(name[1]);
                                }
                            },
                            extend: function (isRule) {
                                var elements, e, index = parserInput.i, option, extendList, extend;
                                if (!parserInput.$str(isRule ? '&:extend(' : ':extend(')) {
                                    return;
                                }
                                do {
                                    option = null;
                                    elements = null;
                                    while (!(option = parserInput.$re(/^(all)(?=\s*(\)|,))/))) {
                                        e = this.element();
                                        if (!e) {
                                            break;
                                        }
                                        if (elements) {
                                            elements.push(e);
                                        } else {
                                            elements = [e];
                                        }
                                    }
                                    option = option && option[1];
                                    if (!elements) {
                                        error('Missing target selector for :extend().');
                                    }
                                    extend = new tree.Extend(new tree.Selector(elements), option, index, fileInfo);
                                    if (extendList) {
                                        extendList.push(extend);
                                    } else {
                                        extendList = [extend];
                                    }
                                } while (parserInput.$char(','));
                                expect(/^\)/);
                                if (isRule) {
                                    expect(/^;/);
                                }
                                return extendList;
                            },
                            extendRule: function () {
                                return this.extend(true);
                            },
                            mixin: {
                                call: function () {
                                    var s = parserInput.currentChar(), important = false, index = parserInput.i, elemIndex, elements, elem, e, c, args;
                                    if (s !== '.' && s !== '#') {
                                        return;
                                    }
                                    parserInput.save();
                                    while (true) {
                                        elemIndex = parserInput.i;
                                        e = parserInput.$re(/^[#.](?:[\w-]|\\(?:[A-Fa-f0-9]{1,6} ?|[^A-Fa-f0-9]))+/);
                                        if (!e) {
                                            break;
                                        }
                                        elem = new tree.Element(c, e, elemIndex, fileInfo);
                                        if (elements) {
                                            elements.push(elem);
                                        } else {
                                            elements = [elem];
                                        }
                                        c = parserInput.$char('>');
                                    }
                                    if (elements) {
                                        if (parserInput.$char('(')) {
                                            args = this.args(true).args;
                                            expectChar(')');
                                        }
                                        if (parsers.important()) {
                                            important = true;
                                        }
                                        if (parsers.end()) {
                                            parserInput.forget();
                                            return new tree.mixin.Call(elements, args, index, fileInfo, important);
                                        }
                                    }
                                    parserInput.restore();
                                },
                                args: function (isCall) {
                                    var entities = parsers.entities, returner = {
                                            args: null,
                                            variadic: false
                                        }, expressions = [], argsSemiColon = [], argsComma = [], isSemiColonSeparated, expressionContainsNamed, name, nameLoop, value, arg, expand;
                                    parserInput.save();
                                    while (true) {
                                        if (isCall) {
                                            arg = parsers.detachedRuleset() || parsers.expression();
                                        } else {
                                            parserInput.commentStore.length = 0;
                                            if (parserInput.$str('...')) {
                                                returner.variadic = true;
                                                if (parserInput.$char(';') && !isSemiColonSeparated) {
                                                    isSemiColonSeparated = true;
                                                }
                                                (isSemiColonSeparated ? argsSemiColon : argsComma).push({ variadic: true });
                                                break;
                                            }
                                            arg = entities.variable() || entities.literal() || entities.keyword();
                                        }
                                        if (!arg) {
                                            break;
                                        }
                                        nameLoop = null;
                                        if (arg.throwAwayComments) {
                                            arg.throwAwayComments();
                                        }
                                        value = arg;
                                        var val = null;
                                        if (isCall) {
                                            if (arg.value && arg.value.length == 1) {
                                                val = arg.value[0];
                                            }
                                        } else {
                                            val = arg;
                                        }
                                        if (val && val instanceof tree.Variable) {
                                            if (parserInput.$char(':')) {
                                                if (expressions.length > 0) {
                                                    if (isSemiColonSeparated) {
                                                        error('Cannot mix ; and , as delimiter types');
                                                    }
                                                    expressionContainsNamed = true;
                                                }
                                                value = parsers.detachedRuleset() || parsers.expression();
                                                if (!value) {
                                                    if (isCall) {
                                                        error('could not understand value for named argument');
                                                    } else {
                                                        parserInput.restore();
                                                        returner.args = [];
                                                        return returner;
                                                    }
                                                }
                                                nameLoop = name = val.name;
                                            } else if (parserInput.$str('...')) {
                                                if (!isCall) {
                                                    returner.variadic = true;
                                                    if (parserInput.$char(';') && !isSemiColonSeparated) {
                                                        isSemiColonSeparated = true;
                                                    }
                                                    (isSemiColonSeparated ? argsSemiColon : argsComma).push({
                                                        name: arg.name,
                                                        variadic: true
                                                    });
                                                    break;
                                                } else {
                                                    expand = true;
                                                }
                                            } else if (!isCall) {
                                                name = nameLoop = val.name;
                                                value = null;
                                            }
                                        }
                                        if (value) {
                                            expressions.push(value);
                                        }
                                        argsComma.push({
                                            name: nameLoop,
                                            value: value,
                                            expand: expand
                                        });
                                        if (parserInput.$char(',')) {
                                            continue;
                                        }
                                        if (parserInput.$char(';') || isSemiColonSeparated) {
                                            if (expressionContainsNamed) {
                                                error('Cannot mix ; and , as delimiter types');
                                            }
                                            isSemiColonSeparated = true;
                                            if (expressions.length > 1) {
                                                value = new tree.Value(expressions);
                                            }
                                            argsSemiColon.push({
                                                name: name,
                                                value: value,
                                                expand: expand
                                            });
                                            name = null;
                                            expressions = [];
                                            expressionContainsNamed = false;
                                        }
                                    }
                                    parserInput.forget();
                                    returner.args = isSemiColonSeparated ? argsSemiColon : argsComma;
                                    return returner;
                                },
                                definition: function () {
                                    var name, params = [], match, ruleset, cond, variadic = false;
                                    if (parserInput.currentChar() !== '.' && parserInput.currentChar() !== '#' || parserInput.peek(/^[^{]*\}/)) {
                                        return;
                                    }
                                    parserInput.save();
                                    match = parserInput.$re(/^([#.](?:[\w-]|\\(?:[A-Fa-f0-9]{1,6} ?|[^A-Fa-f0-9]))+)\s*\(/);
                                    if (match) {
                                        name = match[1];
                                        var argInfo = this.args(false);
                                        params = argInfo.args;
                                        variadic = argInfo.variadic;
                                        if (!parserInput.$char(')')) {
                                            parserInput.restore('Missing closing \')\'');
                                            return;
                                        }
                                        parserInput.commentStore.length = 0;
                                        if (parserInput.$str('when')) {
                                            cond = expect(parsers.conditions, 'expected condition');
                                        }
                                        ruleset = parsers.block();
                                        if (ruleset) {
                                            parserInput.forget();
                                            return new tree.mixin.Definition(name, params, ruleset, cond, variadic);
                                        } else {
                                            parserInput.restore();
                                        }
                                    } else {
                                        parserInput.forget();
                                    }
                                }
                            },
                            entity: function () {
                                var entities = this.entities;
                                return this.comment() || entities.literal() || entities.variable() || entities.url() || entities.call() || entities.keyword() || entities.javascript();
                            },
                            end: function () {
                                return parserInput.$char(';') || parserInput.peek('}');
                            },
                            alpha: function () {
                                var value;
                                if (!parserInput.$re(/^opacity=/i)) {
                                    return;
                                }
                                value = parserInput.$re(/^\d+/);
                                if (!value) {
                                    value = expect(this.entities.variable, 'Could not parse alpha');
                                }
                                expectChar(')');
                                return new tree.Alpha(value);
                            },
                            element: function () {
                                var e, c, v, index = parserInput.i;
                                c = this.combinator();
                                e = parserInput.$re(/^(?:\d+\.\d+|\d+)%/) || parserInput.$re(/^(?:[.#]?|:*)(?:[\w-]|[^\x00-\x9f]|\\(?:[A-Fa-f0-9]{1,6} ?|[^A-Fa-f0-9]))+/) || parserInput.$char('*') || parserInput.$char('&') || this.attribute() || parserInput.$re(/^\([^&()@]+\)/) || parserInput.$re(/^[\.#:](?=@)/) || this.entities.variableCurly();
                                if (!e) {
                                    parserInput.save();
                                    if (parserInput.$char('(')) {
                                        if ((v = this.selector()) && parserInput.$char(')')) {
                                            e = new tree.Paren(v);
                                            parserInput.forget();
                                        } else {
                                            parserInput.restore('Missing closing \')\'');
                                        }
                                    } else {
                                        parserInput.forget();
                                    }
                                }
                                if (e) {
                                    return new tree.Element(c, e, index, fileInfo);
                                }
                            },
                            combinator: function () {
                                var c = parserInput.currentChar();
                                if (c === '/') {
                                    parserInput.save();
                                    var slashedCombinator = parserInput.$re(/^\/[a-z]+\//i);
                                    if (slashedCombinator) {
                                        parserInput.forget();
                                        return new tree.Combinator(slashedCombinator);
                                    }
                                    parserInput.restore();
                                }
                                if (c === '>' || c === '+' || c === '~' || c === '|' || c === '^') {
                                    parserInput.i++;
                                    if (c === '^' && parserInput.currentChar() === '^') {
                                        c = '^^';
                                        parserInput.i++;
                                    }
                                    while (parserInput.isWhitespace()) {
                                        parserInput.i++;
                                    }
                                    return new tree.Combinator(c);
                                } else if (parserInput.isWhitespace(-1)) {
                                    return new tree.Combinator(' ');
                                } else {
                                    return new tree.Combinator(null);
                                }
                            },
                            lessSelector: function () {
                                return this.selector(true);
                            },
                            selector: function (isLess) {
                                var index = parserInput.i, elements, extendList, c, e, allExtends, when, condition;
                                while (isLess && (extendList = this.extend()) || isLess && (when = parserInput.$str('when')) || (e = this.element())) {
                                    if (when) {
                                        condition = expect(this.conditions, 'expected condition');
                                    } else if (condition) {
                                        error('CSS guard can only be used at the end of selector');
                                    } else if (extendList) {
                                        if (allExtends) {
                                            allExtends = allExtends.concat(extendList);
                                        } else {
                                            allExtends = extendList;
                                        }
                                    } else {
                                        if (allExtends) {
                                            error('Extend can only be used at the end of selector');
                                        }
                                        c = parserInput.currentChar();
                                        if (elements) {
                                            elements.push(e);
                                        } else {
                                            elements = [e];
                                        }
                                        e = null;
                                    }
                                    if (c === '{' || c === '}' || c === ';' || c === ',' || c === ')') {
                                        break;
                                    }
                                }
                                if (elements) {
                                    return new tree.Selector(elements, allExtends, condition, index, fileInfo);
                                }
                                if (allExtends) {
                                    error('Extend must be used to extend a selector, it cannot be used on its own');
                                }
                            },
                            attribute: function () {
                                if (!parserInput.$char('[')) {
                                    return;
                                }
                                var entities = this.entities, key, val, op;
                                if (!(key = entities.variableCurly())) {
                                    key = expect(/^(?:[_A-Za-z0-9-\*]*\|)?(?:[_A-Za-z0-9-]|\\.)+/);
                                }
                                op = parserInput.$re(/^[|~*$^]?=/);
                                if (op) {
                                    val = entities.quoted() || parserInput.$re(/^[0-9]+%/) || parserInput.$re(/^[\w-]+/) || entities.variableCurly();
                                }
                                expectChar(']');
                                return new tree.Attribute(key, op, val);
                            },
                            block: function () {
                                var content;
                                if (parserInput.$char('{') && (content = this.primary()) && parserInput.$char('}')) {
                                    return content;
                                }
                            },
                            blockRuleset: function () {
                                var block = this.block();
                                if (block) {
                                    block = new tree.Ruleset(null, block);
                                }
                                return block;
                            },
                            detachedRuleset: function () {
                                var blockRuleset = this.blockRuleset();
                                if (blockRuleset) {
                                    return new tree.DetachedRuleset(blockRuleset);
                                }
                            },
                            ruleset: function () {
                                var selectors, s, rules, debugInfo;
                                parserInput.save();
                                if (context.dumpLineNumbers) {
                                    debugInfo = getDebugInfo(parserInput.i);
                                }
                                while (true) {
                                    s = this.lessSelector();
                                    if (!s) {
                                        break;
                                    }
                                    if (selectors) {
                                        selectors.push(s);
                                    } else {
                                        selectors = [s];
                                    }
                                    parserInput.commentStore.length = 0;
                                    if (s.condition && selectors.length > 1) {
                                        error('Guards are only currently allowed on a single selector.');
                                    }
                                    if (!parserInput.$char(',')) {
                                        break;
                                    }
                                    if (s.condition) {
                                        error('Guards are only currently allowed on a single selector.');
                                    }
                                    parserInput.commentStore.length = 0;
                                }
                                if (selectors && (rules = this.block())) {
                                    parserInput.forget();
                                    var ruleset = new tree.Ruleset(selectors, rules, context.strictImports);
                                    if (context.dumpLineNumbers) {
                                        ruleset.debugInfo = debugInfo;
                                    }
                                    return ruleset;
                                } else {
                                    parserInput.restore();
                                }
                            },
                            rule: function (tryAnonymous) {
                                var name, value, startOfRule = parserInput.i, c = parserInput.currentChar(), important, merge, isVariable;
                                if (c === '.' || c === '#' || c === '&' || c === ':') {
                                    return;
                                }
                                parserInput.save();
                                name = this.variable() || this.ruleProperty();
                                if (name) {
                                    isVariable = typeof name === 'string';
                                    if (isVariable) {
                                        value = this.detachedRuleset();
                                    }
                                    parserInput.commentStore.length = 0;
                                    if (!value) {
                                        merge = !isVariable && name.length > 1 && name.pop().value;
                                        var tryValueFirst = !tryAnonymous && (context.compress || isVariable);
                                        if (tryValueFirst) {
                                            value = this.value();
                                        }
                                        if (!value) {
                                            value = this.anonymousValue();
                                            if (value) {
                                                parserInput.forget();
                                                return new tree.Rule(name, value, false, merge, startOfRule, fileInfo);
                                            }
                                        }
                                        if (!tryValueFirst && !value) {
                                            value = this.value();
                                        }
                                        important = this.important();
                                    }
                                    if (value && this.end()) {
                                        parserInput.forget();
                                        return new tree.Rule(name, value, important, merge, startOfRule, fileInfo);
                                    } else {
                                        parserInput.restore();
                                        if (value && !tryAnonymous) {
                                            return this.rule(true);
                                        }
                                    }
                                } else {
                                    parserInput.forget();
                                }
                            },
                            anonymousValue: function () {
                                var match = parserInput.$re(/^([^@+\/'"*`(;{}-]*);/);
                                if (match) {
                                    return new tree.Anonymous(match[1]);
                                }
                            },
                            'import': function () {
                                var path, features, index = parserInput.i;
                                var dir = parserInput.$re(/^@import?\s+/);
                                if (dir) {
                                    var options = (dir ? this.importOptions() : null) || {};
                                    if (path = this.entities.quoted() || this.entities.url()) {
                                        features = this.mediaFeatures();
                                        if (!parserInput.$char(';')) {
                                            parserInput.i = index;
                                            error('missing semi-colon or unrecognised media features on import');
                                        }
                                        features = features && new tree.Value(features);
                                        return new tree.Import(path, features, options, index, fileInfo);
                                    } else {
                                        parserInput.i = index;
                                        error('malformed import statement');
                                    }
                                }
                            },
                            importOptions: function () {
                                var o, options = {}, optionName, value;
                                if (!parserInput.$char('(')) {
                                    return null;
                                }
                                do {
                                    o = this.importOption();
                                    if (o) {
                                        optionName = o;
                                        value = true;
                                        switch (optionName) {
                                        case 'css':
                                            optionName = 'less';
                                            value = false;
                                            break;
                                        case 'once':
                                            optionName = 'multiple';
                                            value = false;
                                            break;
                                        }
                                        options[optionName] = value;
                                        if (!parserInput.$char(',')) {
                                            break;
                                        }
                                    }
                                } while (o);
                                expectChar(')');
                                return options;
                            },
                            importOption: function () {
                                var opt = parserInput.$re(/^(less|css|multiple|once|inline|reference|optional)/);
                                if (opt) {
                                    return opt[1];
                                }
                            },
                            mediaFeature: function () {
                                var entities = this.entities, nodes = [], e, p;
                                parserInput.save();
                                do {
                                    e = entities.keyword() || entities.variable();
                                    if (e) {
                                        nodes.push(e);
                                    } else if (parserInput.$char('(')) {
                                        p = this.property();
                                        e = this.value();
                                        if (parserInput.$char(')')) {
                                            if (p && e) {
                                                nodes.push(new tree.Paren(new tree.Rule(p, e, null, null, parserInput.i, fileInfo, true)));
                                            } else if (e) {
                                                nodes.push(new tree.Paren(e));
                                            } else {
                                                error('badly formed media feature definition');
                                            }
                                        } else {
                                            error('Missing closing \')\'', 'Parse');
                                        }
                                    }
                                } while (e);
                                parserInput.forget();
                                if (nodes.length > 0) {
                                    return new tree.Expression(nodes);
                                }
                            },
                            mediaFeatures: function () {
                                var entities = this.entities, features = [], e;
                                do {
                                    e = this.mediaFeature();
                                    if (e) {
                                        features.push(e);
                                        if (!parserInput.$char(',')) {
                                            break;
                                        }
                                    } else {
                                        e = entities.variable();
                                        if (e) {
                                            features.push(e);
                                            if (!parserInput.$char(',')) {
                                                break;
                                            }
                                        }
                                    }
                                } while (e);
                                return features.length > 0 ? features : null;
                            },
                            media: function () {
                                var features, rules, media, debugInfo;
                                if (context.dumpLineNumbers) {
                                    debugInfo = getDebugInfo(parserInput.i);
                                }
                                parserInput.save();
                                if (parserInput.$str('@media')) {
                                    features = this.mediaFeatures();
                                    rules = this.block();
                                    if (!rules) {
                                        error('media definitions require block statements after any features');
                                    }
                                    parserInput.forget();
                                    media = new tree.Media(rules, features, parserInput.i, fileInfo);
                                    if (context.dumpLineNumbers) {
                                        media.debugInfo = debugInfo;
                                    }
                                    return media;
                                }
                                parserInput.restore();
                            },
                            plugin: function () {
                                var path, index = parserInput.i, dir = parserInput.$re(/^@plugin?\s+/);
                                if (dir) {
                                    var options = { plugin: true };
                                    if (path = this.entities.quoted() || this.entities.url()) {
                                        if (!parserInput.$char(';')) {
                                            parserInput.i = index;
                                            error('missing semi-colon on plugin');
                                        }
                                        return new tree.Import(path, null, options, index, fileInfo);
                                    } else {
                                        parserInput.i = index;
                                        error('malformed plugin statement');
                                    }
                                }
                            },
                            directive: function () {
                                var index = parserInput.i, name, value, rules, nonVendorSpecificName, hasIdentifier, hasExpression, hasUnknown, hasBlock = true, isRooted = true;
                                if (parserInput.currentChar() !== '@') {
                                    return;
                                }
                                value = this['import']() || this.plugin() || this.media();
                                if (value) {
                                    return value;
                                }
                                parserInput.save();
                                name = parserInput.$re(/^@[a-z-]+/);
                                if (!name) {
                                    return;
                                }
                                nonVendorSpecificName = name;
                                if (name.charAt(1) == '-' && name.indexOf('-', 2) > 0) {
                                    nonVendorSpecificName = '@' + name.slice(name.indexOf('-', 2) + 1);
                                }
                                switch (nonVendorSpecificName) {
                                case '@charset':
                                    hasIdentifier = true;
                                    hasBlock = false;
                                    break;
                                case '@namespace':
                                    hasExpression = true;
                                    hasBlock = false;
                                    break;
                                case '@keyframes':
                                case '@counter-style':
                                    hasIdentifier = true;
                                    break;
                                case '@document':
                                case '@supports':
                                    hasUnknown = true;
                                    isRooted = false;
                                    break;
                                default:
                                    hasUnknown = true;
                                    break;
                                }
                                parserInput.commentStore.length = 0;
                                if (hasIdentifier) {
                                    value = this.entity();
                                    if (!value) {
                                        error('expected ' + name + ' identifier');
                                    }
                                } else if (hasExpression) {
                                    value = this.expression();
                                    if (!value) {
                                        error('expected ' + name + ' expression');
                                    }
                                } else if (hasUnknown) {
                                    value = (parserInput.$re(/^[^{;]+/) || '').trim();
                                    hasBlock = parserInput.currentChar() == '{';
                                    if (value) {
                                        value = new tree.Anonymous(value);
                                    }
                                }
                                if (hasBlock) {
                                    rules = this.blockRuleset();
                                }
                                if (rules || !hasBlock && value && parserInput.$char(';')) {
                                    parserInput.forget();
                                    return new tree.Directive(name, value, rules, index, fileInfo, context.dumpLineNumbers ? getDebugInfo(index) : null, isRooted);
                                }
                                parserInput.restore('directive options not recognised');
                            },
                            value: function () {
                                var e, expressions = [];
                                do {
                                    e = this.expression();
                                    if (e) {
                                        expressions.push(e);
                                        if (!parserInput.$char(',')) {
                                            break;
                                        }
                                    }
                                } while (e);
                                if (expressions.length > 0) {
                                    return new tree.Value(expressions);
                                }
                            },
                            important: function () {
                                if (parserInput.currentChar() === '!') {
                                    return parserInput.$re(/^! *important/);
                                }
                            },
                            sub: function () {
                                var a, e;
                                parserInput.save();
                                if (parserInput.$char('(')) {
                                    a = this.addition();
                                    if (a && parserInput.$char(')')) {
                                        parserInput.forget();
                                        e = new tree.Expression([a]);
                                        e.parens = true;
                                        return e;
                                    }
                                    parserInput.restore('Expected \')\'');
                                    return;
                                }
                                parserInput.restore();
                            },
                            multiplication: function () {
                                var m, a, op, operation, isSpaced;
                                m = this.operand();
                                if (m) {
                                    isSpaced = parserInput.isWhitespace(-1);
                                    while (true) {
                                        if (parserInput.peek(/^\/[*\/]/)) {
                                            break;
                                        }
                                        parserInput.save();
                                        op = parserInput.$char('/') || parserInput.$char('*');
                                        if (!op) {
                                            parserInput.forget();
                                            break;
                                        }
                                        a = this.operand();
                                        if (!a) {
                                            parserInput.restore();
                                            break;
                                        }
                                        parserInput.forget();
                                        m.parensInOp = true;
                                        a.parensInOp = true;
                                        operation = new tree.Operation(op, [
                                            operation || m,
                                            a
                                        ], isSpaced);
                                        isSpaced = parserInput.isWhitespace(-1);
                                    }
                                    return operation || m;
                                }
                            },
                            addition: function () {
                                var m, a, op, operation, isSpaced;
                                m = this.multiplication();
                                if (m) {
                                    isSpaced = parserInput.isWhitespace(-1);
                                    while (true) {
                                        op = parserInput.$re(/^[-+]\s+/) || !isSpaced && (parserInput.$char('+') || parserInput.$char('-'));
                                        if (!op) {
                                            break;
                                        }
                                        a = this.multiplication();
                                        if (!a) {
                                            break;
                                        }
                                        m.parensInOp = true;
                                        a.parensInOp = true;
                                        operation = new tree.Operation(op, [
                                            operation || m,
                                            a
                                        ], isSpaced);
                                        isSpaced = parserInput.isWhitespace(-1);
                                    }
                                    return operation || m;
                                }
                            },
                            conditions: function () {
                                var a, b, index = parserInput.i, condition;
                                a = this.condition();
                                if (a) {
                                    while (true) {
                                        if (!parserInput.peek(/^,\s*(not\s*)?\(/) || !parserInput.$char(',')) {
                                            break;
                                        }
                                        b = this.condition();
                                        if (!b) {
                                            break;
                                        }
                                        condition = new tree.Condition('or', condition || a, b, index);
                                    }
                                    return condition || a;
                                }
                            },
                            condition: function () {
                                var result, logical, next;
                                function or() {
                                    return parserInput.$str('or');
                                }
                                result = this.conditionAnd(this);
                                if (!result) {
                                    return;
                                }
                                logical = or();
                                if (logical) {
                                    next = this.condition();
                                    if (next) {
                                        result = new tree.Condition(logical, result, next);
                                    } else {
                                        return;
                                    }
                                }
                                return result;
                            },
                            conditionAnd: function () {
                                var result, logical, next;
                                function insideCondition(me) {
                                    return me.negatedCondition() || me.parenthesisCondition();
                                }
                                function and() {
                                    return parserInput.$str('and');
                                }
                                result = insideCondition(this);
                                if (!result) {
                                    return;
                                }
                                logical = and();
                                if (logical) {
                                    next = this.conditionAnd();
                                    if (next) {
                                        result = new tree.Condition(logical, result, next);
                                    } else {
                                        return;
                                    }
                                }
                                return result;
                            },
                            negatedCondition: function () {
                                if (parserInput.$str('not')) {
                                    var result = this.parenthesisCondition();
                                    if (result) {
                                        result.negate = !result.negate;
                                    }
                                    return result;
                                }
                            },
                            parenthesisCondition: function () {
                                var body;
                                if (!parserInput.$str('(')) {
                                    return;
                                }
                                body = this.condition() || this.atomicCondition();
                                expectChar(')');
                                return body;
                            },
                            atomicCondition: function () {
                                var entities = this.entities, index = parserInput.i, a, b, c, op;
                                a = this.addition() || entities.keyword() || entities.quoted();
                                if (a) {
                                    if (parserInput.$char('>')) {
                                        if (parserInput.$char('=')) {
                                            op = '>=';
                                        } else {
                                            op = '>';
                                        }
                                    } else if (parserInput.$char('<')) {
                                        if (parserInput.$char('=')) {
                                            op = '<=';
                                        } else {
                                            op = '<';
                                        }
                                    } else if (parserInput.$char('=')) {
                                        if (parserInput.$char('>')) {
                                            op = '=>';
                                        } else if (parserInput.$char('<')) {
                                            op = '=<';
                                        } else {
                                            op = '=';
                                        }
                                    }
                                    if (op) {
                                        b = this.addition() || entities.keyword() || entities.quoted();
                                        if (b) {
                                            c = new tree.Condition(op, a, b, index, false);
                                        } else {
                                            error('expected expression');
                                        }
                                    } else {
                                        c = new tree.Condition('=', a, new tree.Keyword('true'), index, false);
                                    }
                                    return c;
                                }
                            },
                            operand: function () {
                                var entities = this.entities, negate;
                                if (parserInput.peek(/^-[@\(]/)) {
                                    negate = parserInput.$char('-');
                                }
                                var o = this.sub() || entities.dimension() || entities.variable() || entities.call() || entities.color();
                                if (negate) {
                                    o.parensInOp = true;
                                    o = new tree.Negative(o);
                                }
                                return o;
                            },
                            expression: function () {
                                var entities = [], e, delim;
                                do {
                                    e = this.comment();
                                    if (e) {
                                        entities.push(e);
                                        continue;
                                    }
                                    e = this.addition() || this.entity();
                                    if (e) {
                                        entities.push(e);
                                        if (!parserInput.peek(/^\/[\/*]/)) {
                                            delim = parserInput.$char('/');
                                            if (delim) {
                                                entities.push(new tree.Anonymous(delim));
                                            }
                                        }
                                    }
                                } while (e);
                                if (entities.length > 0) {
                                    return new tree.Expression(entities);
                                }
                            },
                            property: function () {
                                var name = parserInput.$re(/^(\*?-?[_a-zA-Z0-9-]+)\s*:/);
                                if (name) {
                                    return name[1];
                                }
                            },
                            ruleProperty: function () {
                                var name = [], index = [], s, k;
                                parserInput.save();
                                var simpleProperty = parserInput.$re(/^([_a-zA-Z0-9-]+)\s*:/);
                                if (simpleProperty) {
                                    name = [new tree.Keyword(simpleProperty[1])];
                                    parserInput.forget();
                                    return name;
                                }
                                function match(re) {
                                    var i = parserInput.i, chunk = parserInput.$re(re);
                                    if (chunk) {
                                        index.push(i);
                                        return name.push(chunk[1]);
                                    }
                                }
                                match(/^(\*?)/);
                                while (true) {
                                    if (!match(/^((?:[\w-]+)|(?:@\{[\w-]+\}))/)) {
                                        break;
                                    }
                                }
                                if (name.length > 1 && match(/^((?:\+_|\+)?)\s*:/)) {
                                    parserInput.forget();
                                    if (name[0] === '') {
                                        name.shift();
                                        index.shift();
                                    }
                                    for (k = 0; k < name.length; k++) {
                                        s = name[k];
                                        name[k] = s.charAt(0) !== '@' ? new tree.Keyword(s) : new tree.Variable('@' + s.slice(2, -1), index[k], fileInfo);
                                    }
                                    return name;
                                }
                                parserInput.restore();
                            }
                        }
                    };
                };
                Parser.serializeVars = function (vars) {
                    var s = '';
                    for (var name in vars) {
                        if (Object.hasOwnProperty.call(vars, name)) {
                            var value = vars[name];
                            s += (name[0] === '@' ? '' : '@') + name + ': ' + value + (String(value).slice(-1) === ';' ? '' : ';');
                        }
                    }
                    return s;
                };
                module.exports = Parser;
            },
            {
                '../less-error': 32,
                '../tree': 62,
                '../utils': 83,
                '../visitors': 87,
                './parser-input': 37
            }
        ],
        39: [
            function (require, module, exports) {
                var PluginManager = function (less) {
                    this.less = less;
                    this.visitors = [];
                    this.preProcessors = [];
                    this.postProcessors = [];
                    this.installedPlugins = [];
                    this.fileManagers = [];
                };
                PluginManager.prototype.addPlugins = function (plugins) {
                    if (plugins) {
                        for (var i = 0; i < plugins.length; i++) {
                            this.addPlugin(plugins[i]);
                        }
                    }
                };
                PluginManager.prototype.addPlugin = function (plugin) {
                    this.installedPlugins.push(plugin);
                    plugin.install(this.less, this);
                };
                PluginManager.prototype.addVisitor = function (visitor) {
                    this.visitors.push(visitor);
                };
                PluginManager.prototype.addPreProcessor = function (preProcessor, priority) {
                    var indexToInsertAt;
                    for (indexToInsertAt = 0; indexToInsertAt < this.preProcessors.length; indexToInsertAt++) {
                        if (this.preProcessors[indexToInsertAt].priority >= priority) {
                            break;
                        }
                    }
                    this.preProcessors.splice(indexToInsertAt, 0, {
                        preProcessor: preProcessor,
                        priority: priority
                    });
                };
                PluginManager.prototype.addPostProcessor = function (postProcessor, priority) {
                    var indexToInsertAt;
                    for (indexToInsertAt = 0; indexToInsertAt < this.postProcessors.length; indexToInsertAt++) {
                        if (this.postProcessors[indexToInsertAt].priority >= priority) {
                            break;
                        }
                    }
                    this.postProcessors.splice(indexToInsertAt, 0, {
                        postProcessor: postProcessor,
                        priority: priority
                    });
                };
                PluginManager.prototype.addFileManager = function (manager) {
                    this.fileManagers.push(manager);
                };
                PluginManager.prototype.getPreProcessors = function () {
                    var preProcessors = [];
                    for (var i = 0; i < this.preProcessors.length; i++) {
                        preProcessors.push(this.preProcessors[i].preProcessor);
                    }
                    return preProcessors;
                };
                PluginManager.prototype.getPostProcessors = function () {
                    var postProcessors = [];
                    for (var i = 0; i < this.postProcessors.length; i++) {
                        postProcessors.push(this.postProcessors[i].postProcessor);
                    }
                    return postProcessors;
                };
                PluginManager.prototype.getVisitors = function () {
                    return this.visitors;
                };
                PluginManager.prototype.getFileManagers = function () {
                    return this.fileManagers;
                };
                module.exports = PluginManager;
            },
            {}
        ],
        40: [
            function (require, module, exports) {
                var LessError = require('../less-error'), tree = require('../tree');
                var FunctionImporter = module.exports = function FunctionImporter(context, fileInfo) {
                    this.fileInfo = fileInfo;
                };
                FunctionImporter.prototype.eval = function (contents, callback) {
                    var loaded = {}, loader, registry;
                    registry = {
                        add: function (name, func) {
                            loaded[name] = func;
                        },
                        addMultiple: function (functions) {
                            Object.keys(functions).forEach(function (name) {
                                loaded[name] = functions[name];
                            });
                        }
                    };
                    try {
                        loader = new Function('functions', 'tree', 'fileInfo', contents);
                        loader(registry, tree, this.fileInfo);
                    } catch (e) {
                        callback(new LessError({
                            message: 'Plugin evaluation error: \'' + e.name + ': ' + e.message.replace(/["]/g, '\'') + '\'',
                            filename: this.fileInfo.filename
                        }), null);
                    }
                    callback(null, { functions: loaded });
                };
            },
            {
                '../less-error': 32,
                '../tree': 62
            }
        ],
        41: [
            function (require, module, exports) {
                var PromiseConstructor;
                module.exports = function (environment, ParseTree, ImportManager) {
                    var render = function (input, options, callback) {
                        if (typeof options === 'function') {
                            callback = options;
                            options = {};
                        }
                        if (!callback) {
                            if (!PromiseConstructor) {
                                PromiseConstructor = typeof Promise === 'undefined' ? require('promise') : Promise;
                            }
                            var self = this;
                            return new PromiseConstructor(function (resolve, reject) {
                                render.call(self, input, options, function (err, output) {
                                    if (err) {
                                        reject(err);
                                    } else {
                                        resolve(output);
                                    }
                                });
                            });
                        } else {
                            this.parse(input, options, function (err, root, imports, options) {
                                if (err) {
                                    return callback(err);
                                }
                                var result;
                                try {
                                    var parseTree = new ParseTree(root, imports);
                                    result = parseTree.toCSS(options);
                                } catch (err) {
                                    return callback(err);
                                }
                                callback(null, result);
                            });
                        }
                    };
                    return render;
                };
            },
            { 'promise': undefined }
        ],
        42: [
            function (require, module, exports) {
                module.exports = function (SourceMapOutput, environment) {
                    var SourceMapBuilder = function (options) {
                        this.options = options;
                    };
                    SourceMapBuilder.prototype.toCSS = function (rootNode, options, imports) {
                        var sourceMapOutput = new SourceMapOutput({
                            contentsIgnoredCharsMap: imports.contentsIgnoredChars,
                            rootNode: rootNode,
                            contentsMap: imports.contents,
                            sourceMapFilename: this.options.sourceMapFilename,
                            sourceMapURL: this.options.sourceMapURL,
                            outputFilename: this.options.sourceMapOutputFilename,
                            sourceMapBasepath: this.options.sourceMapBasepath,
                            sourceMapRootpath: this.options.sourceMapRootpath,
                            outputSourceFiles: this.options.outputSourceFiles,
                            sourceMapGenerator: this.options.sourceMapGenerator,
                            sourceMapFileInline: this.options.sourceMapFileInline
                        });
                        var css = sourceMapOutput.toCSS(options);
                        this.sourceMap = sourceMapOutput.sourceMap;
                        this.sourceMapURL = sourceMapOutput.sourceMapURL;
                        if (this.options.sourceMapInputFilename) {
                            this.sourceMapInputFilename = sourceMapOutput.normalizeFilename(this.options.sourceMapInputFilename);
                        }
                        return css + this.getCSSAppendage();
                    };
                    SourceMapBuilder.prototype.getCSSAppendage = function () {
                        var sourceMapURL = this.sourceMapURL;
                        if (this.options.sourceMapFileInline) {
                            if (this.sourceMap === undefined) {
                                return '';
                            }
                            sourceMapURL = 'data:application/json;base64,' + environment.encodeBase64(this.sourceMap);
                        }
                        if (sourceMapURL) {
                            return '/*# sourceMappingURL=' + sourceMapURL + ' */';
                        }
                        return '';
                    };
                    SourceMapBuilder.prototype.getExternalSourceMap = function () {
                        return this.sourceMap;
                    };
                    SourceMapBuilder.prototype.setExternalSourceMap = function (sourceMap) {
                        this.sourceMap = sourceMap;
                    };
                    SourceMapBuilder.prototype.isInline = function () {
                        return this.options.sourceMapFileInline;
                    };
                    SourceMapBuilder.prototype.getSourceMapURL = function () {
                        return this.sourceMapURL;
                    };
                    SourceMapBuilder.prototype.getOutputFilename = function () {
                        return this.options.sourceMapOutputFilename;
                    };
                    SourceMapBuilder.prototype.getInputFilename = function () {
                        return this.sourceMapInputFilename;
                    };
                    return SourceMapBuilder;
                };
            },
            {}
        ],
        43: [
            function (require, module, exports) {
                module.exports = function (environment) {
                    var SourceMapOutput = function (options) {
                        this._css = [];
                        this._rootNode = options.rootNode;
                        this._contentsMap = options.contentsMap;
                        this._contentsIgnoredCharsMap = options.contentsIgnoredCharsMap;
                        if (options.sourceMapFilename) {
                            this._sourceMapFilename = options.sourceMapFilename.replace(/\\/g, '/');
                        }
                        this._outputFilename = options.outputFilename;
                        this.sourceMapURL = options.sourceMapURL;
                        if (options.sourceMapBasepath) {
                            this._sourceMapBasepath = options.sourceMapBasepath.replace(/\\/g, '/');
                        }
                        if (options.sourceMapRootpath) {
                            this._sourceMapRootpath = options.sourceMapRootpath.replace(/\\/g, '/');
                            if (this._sourceMapRootpath.charAt(this._sourceMapRootpath.length - 1) !== '/') {
                                this._sourceMapRootpath += '/';
                            }
                        } else {
                            this._sourceMapRootpath = '';
                        }
                        this._outputSourceFiles = options.outputSourceFiles;
                        this._sourceMapGeneratorConstructor = environment.getSourceMapGenerator();
                        this._lineNumber = 0;
                        this._column = 0;
                    };
                    SourceMapOutput.prototype.normalizeFilename = function (filename) {
                        filename = filename.replace(/\\/g, '/');
                        if (this._sourceMapBasepath && filename.indexOf(this._sourceMapBasepath) === 0) {
                            filename = filename.substring(this._sourceMapBasepath.length);
                            if (filename.charAt(0) === '\\' || filename.charAt(0) === '/') {
                                filename = filename.substring(1);
                            }
                        }
                        return (this._sourceMapRootpath || '') + filename;
                    };
                    SourceMapOutput.prototype.add = function (chunk, fileInfo, index, mapLines) {
                        if (!chunk) {
                            return;
                        }
                        var lines, sourceLines, columns, sourceColumns, i;
                        if (fileInfo) {
                            var inputSource = this._contentsMap[fileInfo.filename];
                            if (this._contentsIgnoredCharsMap[fileInfo.filename]) {
                                index -= this._contentsIgnoredCharsMap[fileInfo.filename];
                                if (index < 0) {
                                    index = 0;
                                }
                                inputSource = inputSource.slice(this._contentsIgnoredCharsMap[fileInfo.filename]);
                            }
                            inputSource = inputSource.substring(0, index);
                            sourceLines = inputSource.split('\n');
                            sourceColumns = sourceLines[sourceLines.length - 1];
                        }
                        lines = chunk.split('\n');
                        columns = lines[lines.length - 1];
                        if (fileInfo) {
                            if (!mapLines) {
                                this._sourceMapGenerator.addMapping({
                                    generated: {
                                        line: this._lineNumber + 1,
                                        column: this._column
                                    },
                                    original: {
                                        line: sourceLines.length,
                                        column: sourceColumns.length
                                    },
                                    source: this.normalizeFilename(fileInfo.filename)
                                });
                            } else {
                                for (i = 0; i < lines.length; i++) {
                                    this._sourceMapGenerator.addMapping({
                                        generated: {
                                            line: this._lineNumber + i + 1,
                                            column: i === 0 ? this._column : 0
                                        },
                                        original: {
                                            line: sourceLines.length + i,
                                            column: i === 0 ? sourceColumns.length : 0
                                        },
                                        source: this.normalizeFilename(fileInfo.filename)
                                    });
                                }
                            }
                        }
                        if (lines.length === 1) {
                            this._column += columns.length;
                        } else {
                            this._lineNumber += lines.length - 1;
                            this._column = columns.length;
                        }
                        this._css.push(chunk);
                    };
                    SourceMapOutput.prototype.isEmpty = function () {
                        return this._css.length === 0;
                    };
                    SourceMapOutput.prototype.toCSS = function (context) {
                        this._sourceMapGenerator = new this._sourceMapGeneratorConstructor({
                            file: this._outputFilename,
                            sourceRoot: null
                        });
                        if (this._outputSourceFiles) {
                            for (var filename in this._contentsMap) {
                                if (this._contentsMap.hasOwnProperty(filename)) {
                                    var source = this._contentsMap[filename];
                                    if (this._contentsIgnoredCharsMap[filename]) {
                                        source = source.slice(this._contentsIgnoredCharsMap[filename]);
                                    }
                                    this._sourceMapGenerator.setSourceContent(this.normalizeFilename(filename), source);
                                }
                            }
                        }
                        this._rootNode.genCSS(context, this);
                        if (this._css.length > 0) {
                            var sourceMapURL, sourceMapContent = JSON.stringify(this._sourceMapGenerator.toJSON());
                            if (this.sourceMapURL) {
                                sourceMapURL = this.sourceMapURL;
                            } else if (this._sourceMapFilename) {
                                sourceMapURL = this._sourceMapFilename;
                            }
                            this.sourceMapURL = sourceMapURL;
                            this.sourceMap = sourceMapContent;
                        }
                        return this._css.join('');
                    };
                    return SourceMapOutput;
                };
            },
            {}
        ],
        44: [
            function (require, module, exports) {
                var contexts = require('./contexts'), visitor = require('./visitors'), tree = require('./tree');
                module.exports = function (root, options) {
                    options = options || {};
                    var evaldRoot, variables = options.variables, evalEnv = new contexts.Eval(options);
                    if (typeof variables === 'object' && !Array.isArray(variables)) {
                        variables = Object.keys(variables).map(function (k) {
                            var value = variables[k];
                            if (!(value instanceof tree.Value)) {
                                if (!(value instanceof tree.Expression)) {
                                    value = new tree.Expression([value]);
                                }
                                value = new tree.Value([value]);
                            }
                            return new tree.Rule('@' + k, value, false, null, 0);
                        });
                        evalEnv.frames = [new tree.Ruleset(null, variables)];
                    }
                    var preEvalVisitors = [], visitors = [
                            new visitor.JoinSelectorVisitor(),
                            new visitor.MarkVisibleSelectorsVisitor(true),
                            new visitor.ExtendVisitor(),
                            new visitor.ToCSSVisitor({ compress: Boolean(options.compress) })
                        ], i;
                    if (options.pluginManager) {
                        var pluginVisitors = options.pluginManager.getVisitors();
                        for (i = 0; i < pluginVisitors.length; i++) {
                            var pluginVisitor = pluginVisitors[i];
                            if (pluginVisitor.isPreEvalVisitor) {
                                preEvalVisitors.push(pluginVisitor);
                            } else {
                                if (pluginVisitor.isPreVisitor) {
                                    visitors.splice(0, 0, pluginVisitor);
                                } else {
                                    visitors.push(pluginVisitor);
                                }
                            }
                        }
                    }
                    for (i = 0; i < preEvalVisitors.length; i++) {
                        preEvalVisitors[i].run(root);
                    }
                    evaldRoot = root.eval(evalEnv);
                    for (i = 0; i < visitors.length; i++) {
                        visitors[i].run(evaldRoot);
                    }
                    return evaldRoot;
                };
            },
            {
                './contexts': 11,
                './tree': 62,
                './visitors': 87
            }
        ],
        45: [
            function (require, module, exports) {
                var Node = require('./node');
                var Alpha = function (val) {
                    this.value = val;
                };
                Alpha.prototype = new Node();
                Alpha.prototype.type = 'Alpha';
                Alpha.prototype.accept = function (visitor) {
                    this.value = visitor.visit(this.value);
                };
                Alpha.prototype.eval = function (context) {
                    if (this.value.eval) {
                        return new Alpha(this.value.eval(context));
                    }
                    return this;
                };
                Alpha.prototype.genCSS = function (context, output) {
                    output.add('alpha(opacity=');
                    if (this.value.genCSS) {
                        this.value.genCSS(context, output);
                    } else {
                        output.add(this.value);
                    }
                    output.add(')');
                };
                module.exports = Alpha;
            },
            { './node': 70 }
        ],
        46: [
            function (require, module, exports) {
                var Node = require('./node');
                var Anonymous = function (value, index, currentFileInfo, mapLines, rulesetLike, visibilityInfo) {
                    this.value = value;
                    this.index = index;
                    this.mapLines = mapLines;
                    this.currentFileInfo = currentFileInfo;
                    this.rulesetLike = typeof rulesetLike === 'undefined' ? false : rulesetLike;
                    this.copyVisibilityInfo(visibilityInfo);
                };
                Anonymous.prototype = new Node();
                Anonymous.prototype.type = 'Anonymous';
                Anonymous.prototype.eval = function () {
                    return new Anonymous(this.value, this.index, this.currentFileInfo, this.mapLines, this.rulesetLike, this.visibilityInfo());
                };
                Anonymous.prototype.compare = function (other) {
                    return other.toCSS && this.toCSS() === other.toCSS() ? 0 : undefined;
                };
                Anonymous.prototype.isRulesetLike = function () {
                    return this.rulesetLike;
                };
                Anonymous.prototype.genCSS = function (context, output) {
                    output.add(this.value, this.currentFileInfo, this.index, this.mapLines);
                };
                module.exports = Anonymous;
            },
            { './node': 70 }
        ],
        47: [
            function (require, module, exports) {
                var Node = require('./node');
                var Assignment = function (key, val) {
                    this.key = key;
                    this.value = val;
                };
                Assignment.prototype = new Node();
                Assignment.prototype.type = 'Assignment';
                Assignment.prototype.accept = function (visitor) {
                    this.value = visitor.visit(this.value);
                };
                Assignment.prototype.eval = function (context) {
                    if (this.value.eval) {
                        return new Assignment(this.key, this.value.eval(context));
                    }
                    return this;
                };
                Assignment.prototype.genCSS = function (context, output) {
                    output.add(this.key + '=');
                    if (this.value.genCSS) {
                        this.value.genCSS(context, output);
                    } else {
                        output.add(this.value);
                    }
                };
                module.exports = Assignment;
            },
            { './node': 70 }
        ],
        48: [
            function (require, module, exports) {
                var Node = require('./node');
                var Attribute = function (key, op, value) {
                    this.key = key;
                    this.op = op;
                    this.value = value;
                };
                Attribute.prototype = new Node();
                Attribute.prototype.type = 'Attribute';
                Attribute.prototype.eval = function (context) {
                    return new Attribute(this.key.eval ? this.key.eval(context) : this.key, this.op, this.value && this.value.eval ? this.value.eval(context) : this.value);
                };
                Attribute.prototype.genCSS = function (context, output) {
                    output.add(this.toCSS(context));
                };
                Attribute.prototype.toCSS = function (context) {
                    var value = this.key.toCSS ? this.key.toCSS(context) : this.key;
                    if (this.op) {
                        value += this.op;
                        value += this.value.toCSS ? this.value.toCSS(context) : this.value;
                    }
                    return '[' + value + ']';
                };
                module.exports = Attribute;
            },
            { './node': 70 }
        ],
        49: [
            function (require, module, exports) {
                var Node = require('./node'), FunctionCaller = require('../functions/function-caller');
                var Call = function (name, args, index, currentFileInfo) {
                    this.name = name;
                    this.args = args;
                    this.index = index;
                    this.currentFileInfo = currentFileInfo;
                };
                Call.prototype = new Node();
                Call.prototype.type = 'Call';
                Call.prototype.accept = function (visitor) {
                    if (this.args) {
                        this.args = visitor.visitArray(this.args);
                    }
                };
                Call.prototype.eval = function (context) {
                    var args = this.args.map(function (a) {
                            return a.eval(context);
                        }), result, funcCaller = new FunctionCaller(this.name, context, this.index, this.currentFileInfo);
                    if (funcCaller.isValid()) {
                        try {
                            result = funcCaller.call(args);
                            if (result != null) {
                                return result;
                            }
                        } catch (e) {
                            throw {
                                type: e.type || 'Runtime',
                                message: 'error evaluating function `' + this.name + '`' + (e.message ? ': ' + e.message : ''),
                                index: this.index,
                                filename: this.currentFileInfo.filename
                            };
                        }
                    }
                    return new Call(this.name, args, this.index, this.currentFileInfo);
                };
                Call.prototype.genCSS = function (context, output) {
                    output.add(this.name + '(', this.currentFileInfo, this.index);
                    for (var i = 0; i < this.args.length; i++) {
                        this.args[i].genCSS(context, output);
                        if (i + 1 < this.args.length) {
                            output.add(', ');
                        }
                    }
                    output.add(')');
                };
                module.exports = Call;
            },
            {
                '../functions/function-caller': 21,
                './node': 70
            }
        ],
        50: [
            function (require, module, exports) {
                var Node = require('./node'), colors = require('../data/colors');
                var Color = function (rgb, a, originalForm) {
                    if (Array.isArray(rgb)) {
                        this.rgb = rgb;
                    } else if (rgb.length == 6) {
                        this.rgb = rgb.match(/.{2}/g).map(function (c) {
                            return parseInt(c, 16);
                        });
                    } else {
                        this.rgb = rgb.split('').map(function (c) {
                            return parseInt(c + c, 16);
                        });
                    }
                    this.alpha = typeof a === 'number' ? a : 1;
                    if (typeof originalForm !== 'undefined') {
                        this.value = originalForm;
                    }
                };
                Color.prototype = new Node();
                Color.prototype.type = 'Color';
                function clamp(v, max) {
                    return Math.min(Math.max(v, 0), max);
                }
                function toHex(v) {
                    return '#' + v.map(function (c) {
                        c = clamp(Math.round(c), 255);
                        return (c < 16 ? '0' : '') + c.toString(16);
                    }).join('');
                }
                Color.prototype.luma = function () {
                    var r = this.rgb[0] / 255, g = this.rgb[1] / 255, b = this.rgb[2] / 255;
                    r = r <= 0.03928 ? r / 12.92 : Math.pow((r + 0.055) / 1.055, 2.4);
                    g = g <= 0.03928 ? g / 12.92 : Math.pow((g + 0.055) / 1.055, 2.4);
                    b = b <= 0.03928 ? b / 12.92 : Math.pow((b + 0.055) / 1.055, 2.4);
                    return 0.2126 * r + 0.7152 * g + 0.0722 * b;
                };
                Color.prototype.genCSS = function (context, output) {
                    output.add(this.toCSS(context));
                };
                Color.prototype.toCSS = function (context, doNotCompress) {
                    var compress = context && context.compress && !doNotCompress, color, alpha;
                    if (this.value) {
                        return this.value;
                    }
                    alpha = this.fround(context, this.alpha);
                    if (alpha < 1) {
                        return 'rgba(' + this.rgb.map(function (c) {
                            return clamp(Math.round(c), 255);
                        }).concat(clamp(alpha, 1)).join(',' + (compress ? '' : ' ')) + ')';
                    }
                    color = this.toRGB();
                    if (compress) {
                        var splitcolor = color.split('');
                        if (splitcolor[1] === splitcolor[2] && splitcolor[3] === splitcolor[4] && splitcolor[5] === splitcolor[6]) {
                            color = '#' + splitcolor[1] + splitcolor[3] + splitcolor[5];
                        }
                    }
                    return color;
                };
                Color.prototype.operate = function (context, op, other) {
                    var rgb = [];
                    var alpha = this.alpha * (1 - other.alpha) + other.alpha;
                    for (var c = 0; c < 3; c++) {
                        rgb[c] = this._operate(context, op, this.rgb[c], other.rgb[c]);
                    }
                    return new Color(rgb, alpha);
                };
                Color.prototype.toRGB = function () {
                    return toHex(this.rgb);
                };
                Color.prototype.toHSL = function () {
                    var r = this.rgb[0] / 255, g = this.rgb[1] / 255, b = this.rgb[2] / 255, a = this.alpha;
                    var max = Math.max(r, g, b), min = Math.min(r, g, b);
                    var h, s, l = (max + min) / 2, d = max - min;
                    if (max === min) {
                        h = s = 0;
                    } else {
                        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
                        switch (max) {
                        case r:
                            h = (g - b) / d + (g < b ? 6 : 0);
                            break;
                        case g:
                            h = (b - r) / d + 2;
                            break;
                        case b:
                            h = (r - g) / d + 4;
                            break;
                        }
                        h /= 6;
                    }
                    return {
                        h: h * 360,
                        s: s,
                        l: l,
                        a: a
                    };
                };
                Color.prototype.toHSV = function () {
                    var r = this.rgb[0] / 255, g = this.rgb[1] / 255, b = this.rgb[2] / 255, a = this.alpha;
                    var max = Math.max(r, g, b), min = Math.min(r, g, b);
                    var h, s, v = max;
                    var d = max - min;
                    if (max === 0) {
                        s = 0;
                    } else {
                        s = d / max;
                    }
                    if (max === min) {
                        h = 0;
                    } else {
                        switch (max) {
                        case r:
                            h = (g - b) / d + (g < b ? 6 : 0);
                            break;
                        case g:
                            h = (b - r) / d + 2;
                            break;
                        case b:
                            h = (r - g) / d + 4;
                            break;
                        }
                        h /= 6;
                    }
                    return {
                        h: h * 360,
                        s: s,
                        v: v,
                        a: a
                    };
                };
                Color.prototype.toARGB = function () {
                    return toHex([this.alpha * 255].concat(this.rgb));
                };
                Color.prototype.compare = function (x) {
                    return x.rgb && x.rgb[0] === this.rgb[0] && x.rgb[1] === this.rgb[1] && x.rgb[2] === this.rgb[2] && x.alpha === this.alpha ? 0 : undefined;
                };
                Color.fromKeyword = function (keyword) {
                    var c, key = keyword.toLowerCase();
                    if (colors.hasOwnProperty(key)) {
                        c = new Color(colors[key].slice(1));
                    } else if (key === 'transparent') {
                        c = new Color([
                            0,
                            0,
                            0
                        ], 0);
                    }
                    if (c) {
                        c.value = keyword;
                        return c;
                    }
                };
                module.exports = Color;
            },
            {
                '../data/colors': 12,
                './node': 70
            }
        ],
        51: [
            function (require, module, exports) {
                var Node = require('./node');
                var Combinator = function (value) {
                    if (value === ' ') {
                        this.value = ' ';
                        this.emptyOrWhitespace = true;
                    } else {
                        this.value = value ? value.trim() : '';
                        this.emptyOrWhitespace = this.value === '';
                    }
                };
                Combinator.prototype = new Node();
                Combinator.prototype.type = 'Combinator';
                var _noSpaceCombinators = {
                    '': true,
                    ' ': true,
                    '|': true
                };
                Combinator.prototype.genCSS = function (context, output) {
                    var spaceOrEmpty = context.compress || _noSpaceCombinators[this.value] ? '' : ' ';
                    output.add(spaceOrEmpty + this.value + spaceOrEmpty);
                };
                module.exports = Combinator;
            },
            { './node': 70 }
        ],
        52: [
            function (require, module, exports) {
                var Node = require('./node'), getDebugInfo = require('./debug-info');
                var Comment = function (value, isLineComment, index, currentFileInfo) {
                    this.value = value;
                    this.isLineComment = isLineComment;
                    this.currentFileInfo = currentFileInfo;
                };
                Comment.prototype = new Node();
                Comment.prototype.type = 'Comment';
                Comment.prototype.genCSS = function (context, output) {
                    if (this.debugInfo) {
                        output.add(getDebugInfo(context, this), this.currentFileInfo, this.index);
                    }
                    output.add(this.value);
                };
                Comment.prototype.isSilent = function (context) {
                    var isCompressed = context.compress && this.value[2] !== '!';
                    return this.isLineComment || isCompressed;
                };
                module.exports = Comment;
            },
            {
                './debug-info': 54,
                './node': 70
            }
        ],
        53: [
            function (require, module, exports) {
                var Node = require('./node');
                var Condition = function (op, l, r, i, negate) {
                    this.op = op.trim();
                    this.lvalue = l;
                    this.rvalue = r;
                    this.index = i;
                    this.negate = negate;
                };
                Condition.prototype = new Node();
                Condition.prototype.type = 'Condition';
                Condition.prototype.accept = function (visitor) {
                    this.lvalue = visitor.visit(this.lvalue);
                    this.rvalue = visitor.visit(this.rvalue);
                };
                Condition.prototype.eval = function (context) {
                    var result = function (op, a, b) {
                        switch (op) {
                        case 'and':
                            return a && b;
                        case 'or':
                            return a || b;
                        default:
                            switch (Node.compare(a, b)) {
                            case -1:
                                return op === '<' || op === '=<' || op === '<=';
                            case 0:
                                return op === '=' || op === '>=' || op === '=<' || op === '<=';
                            case 1:
                                return op === '>' || op === '>=';
                            default:
                                return false;
                            }
                        }
                    }(this.op, this.lvalue.eval(context), this.rvalue.eval(context));
                    return this.negate ? !result : result;
                };
                module.exports = Condition;
            },
            { './node': 70 }
        ],
        54: [
            function (require, module, exports) {
                var debugInfo = function (context, ctx, lineSeparator) {
                    var result = '';
                    if (context.dumpLineNumbers && !context.compress) {
                        switch (context.dumpLineNumbers) {
                        case 'comments':
                            result = debugInfo.asComment(ctx);
                            break;
                        case 'mediaquery':
                            result = debugInfo.asMediaQuery(ctx);
                            break;
                        case 'all':
                            result = debugInfo.asComment(ctx) + (lineSeparator || '') + debugInfo.asMediaQuery(ctx);
                            break;
                        }
                    }
                    return result;
                };
                debugInfo.asComment = function (ctx) {
                    return '/* line ' + ctx.debugInfo.lineNumber + ', ' + ctx.debugInfo.fileName + ' */\n';
                };
                debugInfo.asMediaQuery = function (ctx) {
                    var filenameWithProtocol = ctx.debugInfo.fileName;
                    if (!/^[a-z]+:\/\//i.test(filenameWithProtocol)) {
                        filenameWithProtocol = 'file://' + filenameWithProtocol;
                    }
                    return '@media -sass-debug-info{filename{font-family:' + filenameWithProtocol.replace(/([.:\/\\])/g, function (a) {
                        if (a == '\\') {
                            a = '/';
                        }
                        return '\\' + a;
                    }) + '}line{font-family:\\00003' + ctx.debugInfo.lineNumber + '}}\n';
                };
                module.exports = debugInfo;
            },
            {}
        ],
        55: [
            function (require, module, exports) {
                var Node = require('./node'), contexts = require('../contexts');
                var DetachedRuleset = function (ruleset, frames) {
                    this.ruleset = ruleset;
                    this.frames = frames;
                };
                DetachedRuleset.prototype = new Node();
                DetachedRuleset.prototype.type = 'DetachedRuleset';
                DetachedRuleset.prototype.evalFirst = true;
                DetachedRuleset.prototype.accept = function (visitor) {
                    this.ruleset = visitor.visit(this.ruleset);
                };
                DetachedRuleset.prototype.eval = function (context) {
                    var frames = this.frames || context.frames.slice(0);
                    return new DetachedRuleset(this.ruleset, frames);
                };
                DetachedRuleset.prototype.callEval = function (context) {
                    return this.ruleset.eval(this.frames ? new contexts.Eval(context, this.frames.concat(context.frames)) : context);
                };
                module.exports = DetachedRuleset;
            },
            {
                '../contexts': 11,
                './node': 70
            }
        ],
        56: [
            function (require, module, exports) {
                var Node = require('./node'), unitConversions = require('../data/unit-conversions'), Unit = require('./unit'), Color = require('./color');
                var Dimension = function (value, unit) {
                    this.value = parseFloat(value);
                    this.unit = unit && unit instanceof Unit ? unit : new Unit(unit ? [unit] : undefined);
                };
                Dimension.prototype = new Node();
                Dimension.prototype.type = 'Dimension';
                Dimension.prototype.accept = function (visitor) {
                    this.unit = visitor.visit(this.unit);
                };
                Dimension.prototype.eval = function (context) {
                    return this;
                };
                Dimension.prototype.toColor = function () {
                    return new Color([
                        this.value,
                        this.value,
                        this.value
                    ]);
                };
                Dimension.prototype.genCSS = function (context, output) {
                    if (context && context.strictUnits && !this.unit.isSingular()) {
                        throw new Error('Multiple units in dimension. Correct the units or use the unit function. Bad unit: ' + this.unit.toString());
                    }
                    var value = this.fround(context, this.value), strValue = String(value);
                    if (value !== 0 && value < 0.000001 && value > -0.000001) {
                        strValue = value.toFixed(20).replace(/0+$/, '');
                    }
                    if (context && context.compress) {
                        if (value === 0 && this.unit.isLength()) {
                            output.add(strValue);
                            return;
                        }
                        if (value > 0 && value < 1) {
                            strValue = strValue.substr(1);
                        }
                    }
                    output.add(strValue);
                    this.unit.genCSS(context, output);
                };
                Dimension.prototype.operate = function (context, op, other) {
                    var value = this._operate(context, op, this.value, other.value), unit = this.unit.clone();
                    if (op === '+' || op === '-') {
                        if (unit.numerator.length === 0 && unit.denominator.length === 0) {
                            unit = other.unit.clone();
                            if (this.unit.backupUnit) {
                                unit.backupUnit = this.unit.backupUnit;
                            }
                        } else if (other.unit.numerator.length === 0 && unit.denominator.length === 0) {
                        } else {
                            other = other.convertTo(this.unit.usedUnits());
                            if (context.strictUnits && other.unit.toString() !== unit.toString()) {
                                throw new Error('Incompatible units. Change the units or use the unit function. Bad units: \'' + unit.toString() + '\' and \'' + other.unit.toString() + '\'.');
                            }
                            value = this._operate(context, op, this.value, other.value);
                        }
                    } else if (op === '*') {
                        unit.numerator = unit.numerator.concat(other.unit.numerator).sort();
                        unit.denominator = unit.denominator.concat(other.unit.denominator).sort();
                        unit.cancel();
                    } else if (op === '/') {
                        unit.numerator = unit.numerator.concat(other.unit.denominator).sort();
                        unit.denominator = unit.denominator.concat(other.unit.numerator).sort();
                        unit.cancel();
                    }
                    return new Dimension(value, unit);
                };
                Dimension.prototype.compare = function (other) {
                    var a, b;
                    if (!(other instanceof Dimension)) {
                        return undefined;
                    }
                    if (this.unit.isEmpty() || other.unit.isEmpty()) {
                        a = this;
                        b = other;
                    } else {
                        a = this.unify();
                        b = other.unify();
                        if (a.unit.compare(b.unit) !== 0) {
                            return undefined;
                        }
                    }
                    return Node.numericCompare(a.value, b.value);
                };
                Dimension.prototype.unify = function () {
                    return this.convertTo({
                        length: 'px',
                        duration: 's',
                        angle: 'rad'
                    });
                };
                Dimension.prototype.convertTo = function (conversions) {
                    var value = this.value, unit = this.unit.clone(), i, groupName, group, targetUnit, derivedConversions = {}, applyUnit;
                    if (typeof conversions === 'string') {
                        for (i in unitConversions) {
                            if (unitConversions[i].hasOwnProperty(conversions)) {
                                derivedConversions = {};
                                derivedConversions[i] = conversions;
                            }
                        }
                        conversions = derivedConversions;
                    }
                    applyUnit = function (atomicUnit, denominator) {
                        if (group.hasOwnProperty(atomicUnit)) {
                            if (denominator) {
                                value = value / (group[atomicUnit] / group[targetUnit]);
                            } else {
                                value = value * (group[atomicUnit] / group[targetUnit]);
                            }
                            return targetUnit;
                        }
                        return atomicUnit;
                    };
                    for (groupName in conversions) {
                        if (conversions.hasOwnProperty(groupName)) {
                            targetUnit = conversions[groupName];
                            group = unitConversions[groupName];
                            unit.map(applyUnit);
                        }
                    }
                    unit.cancel();
                    return new Dimension(value, unit);
                };
                module.exports = Dimension;
            },
            {
                '../data/unit-conversions': 14,
                './color': 50,
                './node': 70,
                './unit': 79
            }
        ],
        57: [
            function (require, module, exports) {
                var Node = require('./node'), Selector = require('./selector'), Ruleset = require('./ruleset');
                var Directive = function (name, value, rules, index, currentFileInfo, debugInfo, isRooted, visibilityInfo) {
                    var i;
                    this.name = name;
                    this.value = value;
                    if (rules) {
                        if (Array.isArray(rules)) {
                            this.rules = rules;
                        } else {
                            this.rules = [rules];
                            this.rules[0].selectors = new Selector([], null, null, this.index, currentFileInfo).createEmptySelectors();
                        }
                        for (i = 0; i < this.rules.length; i++) {
                            this.rules[i].allowImports = true;
                        }
                    }
                    this.index = index;
                    this.currentFileInfo = currentFileInfo;
                    this.debugInfo = debugInfo;
                    this.isRooted = isRooted || false;
                    this.copyVisibilityInfo(visibilityInfo);
                };
                Directive.prototype = new Node();
                Directive.prototype.type = 'Directive';
                Directive.prototype.accept = function (visitor) {
                    var value = this.value, rules = this.rules;
                    if (rules) {
                        this.rules = visitor.visitArray(rules);
                    }
                    if (value) {
                        this.value = visitor.visit(value);
                    }
                };
                Directive.prototype.isRulesetLike = function () {
                    return this.rules || !this.isCharset();
                };
                Directive.prototype.isCharset = function () {
                    return '@charset' === this.name;
                };
                Directive.prototype.genCSS = function (context, output) {
                    var value = this.value, rules = this.rules;
                    output.add(this.name, this.currentFileInfo, this.index);
                    if (value) {
                        output.add(' ');
                        value.genCSS(context, output);
                    }
                    if (rules) {
                        this.outputRuleset(context, output, rules);
                    } else {
                        output.add(';');
                    }
                };
                Directive.prototype.eval = function (context) {
                    var mediaPathBackup, mediaBlocksBackup, value = this.value, rules = this.rules;
                    mediaPathBackup = context.mediaPath;
                    mediaBlocksBackup = context.mediaBlocks;
                    context.mediaPath = [];
                    context.mediaBlocks = [];
                    if (value) {
                        value = value.eval(context);
                    }
                    if (rules) {
                        rules = [rules[0].eval(context)];
                        rules[0].root = true;
                    }
                    context.mediaPath = mediaPathBackup;
                    context.mediaBlocks = mediaBlocksBackup;
                    return new Directive(this.name, value, rules, this.index, this.currentFileInfo, this.debugInfo, this.isRooted, this.visibilityInfo());
                };
                Directive.prototype.variable = function (name) {
                    if (this.rules) {
                        return Ruleset.prototype.variable.call(this.rules[0], name);
                    }
                };
                Directive.prototype.find = function () {
                    if (this.rules) {
                        return Ruleset.prototype.find.apply(this.rules[0], arguments);
                    }
                };
                Directive.prototype.rulesets = function () {
                    if (this.rules) {
                        return Ruleset.prototype.rulesets.apply(this.rules[0]);
                    }
                };
                Directive.prototype.outputRuleset = function (context, output, rules) {
                    var ruleCnt = rules.length, i;
                    context.tabLevel = (context.tabLevel | 0) + 1;
                    if (context.compress) {
                        output.add('{');
                        for (i = 0; i < ruleCnt; i++) {
                            rules[i].genCSS(context, output);
                        }
                        output.add('}');
                        context.tabLevel--;
                        return;
                    }
                    var tabSetStr = '\n' + Array(context.tabLevel).join('  '), tabRuleStr = tabSetStr + '  ';
                    if (!ruleCnt) {
                        output.add(' {' + tabSetStr + '}');
                    } else {
                        output.add(' {' + tabRuleStr);
                        rules[0].genCSS(context, output);
                        for (i = 1; i < ruleCnt; i++) {
                            output.add(tabRuleStr);
                            rules[i].genCSS(context, output);
                        }
                        output.add(tabSetStr + '}');
                    }
                    context.tabLevel--;
                };
                module.exports = Directive;
            },
            {
                './node': 70,
                './ruleset': 76,
                './selector': 77
            }
        ],
        58: [
            function (require, module, exports) {
                var Node = require('./node'), Paren = require('./paren'), Combinator = require('./combinator');
                var Element = function (combinator, value, index, currentFileInfo, info) {
                    this.combinator = combinator instanceof Combinator ? combinator : new Combinator(combinator);
                    if (typeof value === 'string') {
                        this.value = value.trim();
                    } else if (value) {
                        this.value = value;
                    } else {
                        this.value = '';
                    }
                    this.index = index;
                    this.currentFileInfo = currentFileInfo;
                    this.copyVisibilityInfo(info);
                };
                Element.prototype = new Node();
                Element.prototype.type = 'Element';
                Element.prototype.accept = function (visitor) {
                    var value = this.value;
                    this.combinator = visitor.visit(this.combinator);
                    if (typeof value === 'object') {
                        this.value = visitor.visit(value);
                    }
                };
                Element.prototype.eval = function (context) {
                    return new Element(this.combinator, this.value.eval ? this.value.eval(context) : this.value, this.index, this.currentFileInfo, this.visibilityInfo());
                };
                Element.prototype.clone = function () {
                    return new Element(this.combinator, this.value, this.index, this.currentFileInfo, this.visibilityInfo());
                };
                Element.prototype.genCSS = function (context, output) {
                    output.add(this.toCSS(context), this.currentFileInfo, this.index);
                };
                Element.prototype.toCSS = function (context) {
                    context = context || {};
                    var value = this.value, firstSelector = context.firstSelector;
                    if (value instanceof Paren) {
                        context.firstSelector = true;
                    }
                    value = value.toCSS ? value.toCSS(context) : value;
                    context.firstSelector = firstSelector;
                    if (value === '' && this.combinator.value.charAt(0) === '&') {
                        return '';
                    } else {
                        return this.combinator.toCSS(context) + value;
                    }
                };
                module.exports = Element;
            },
            {
                './combinator': 51,
                './node': 70,
                './paren': 72
            }
        ],
        59: [
            function (require, module, exports) {
                var Node = require('./node'), Paren = require('./paren'), Comment = require('./comment');
                var Expression = function (value) {
                    this.value = value;
                    if (!value) {
                        throw new Error('Expression requires an array parameter');
                    }
                };
                Expression.prototype = new Node();
                Expression.prototype.type = 'Expression';
                Expression.prototype.accept = function (visitor) {
                    this.value = visitor.visitArray(this.value);
                };
                Expression.prototype.eval = function (context) {
                    var returnValue, inParenthesis = this.parens && !this.parensInOp, doubleParen = false;
                    if (inParenthesis) {
                        context.inParenthesis();
                    }
                    if (this.value.length > 1) {
                        returnValue = new Expression(this.value.map(function (e) {
                            return e.eval(context);
                        }));
                    } else if (this.value.length === 1) {
                        if (this.value[0].parens && !this.value[0].parensInOp) {
                            doubleParen = true;
                        }
                        returnValue = this.value[0].eval(context);
                    } else {
                        returnValue = this;
                    }
                    if (inParenthesis) {
                        context.outOfParenthesis();
                    }
                    if (this.parens && this.parensInOp && !context.isMathOn() && !doubleParen) {
                        returnValue = new Paren(returnValue);
                    }
                    return returnValue;
                };
                Expression.prototype.genCSS = function (context, output) {
                    for (var i = 0; i < this.value.length; i++) {
                        this.value[i].genCSS(context, output);
                        if (i + 1 < this.value.length) {
                            output.add(' ');
                        }
                    }
                };
                Expression.prototype.throwAwayComments = function () {
                    this.value = this.value.filter(function (v) {
                        return !(v instanceof Comment);
                    });
                };
                module.exports = Expression;
            },
            {
                './comment': 52,
                './node': 70,
                './paren': 72
            }
        ],
        60: [
            function (require, module, exports) {
                var Node = require('./node'), Selector = require('./selector');
                var Extend = function Extend(selector, option, index, currentFileInfo, visibilityInfo) {
                    this.selector = selector;
                    this.option = option;
                    this.index = index;
                    this.object_id = Extend.next_id++;
                    this.parent_ids = [this.object_id];
                    this.currentFileInfo = currentFileInfo || {};
                    this.copyVisibilityInfo(visibilityInfo);
                    switch (option) {
                    case 'all':
                        this.allowBefore = true;
                        this.allowAfter = true;
                        break;
                    default:
                        this.allowBefore = false;
                        this.allowAfter = false;
                        break;
                    }
                };
                Extend.next_id = 0;
                Extend.prototype = new Node();
                Extend.prototype.type = 'Extend';
                Extend.prototype.accept = function (visitor) {
                    this.selector = visitor.visit(this.selector);
                };
                Extend.prototype.eval = function (context) {
                    return new Extend(this.selector.eval(context), this.option, this.index, this.currentFileInfo, this.visibilityInfo());
                };
                Extend.prototype.clone = function (context) {
                    return new Extend(this.selector, this.option, this.index, this.currentFileInfo, this.visibilityInfo());
                };
                Extend.prototype.findSelfSelectors = function (selectors) {
                    var selfElements = [], i, selectorElements;
                    for (i = 0; i < selectors.length; i++) {
                        selectorElements = selectors[i].elements;
                        if (i > 0 && selectorElements.length && selectorElements[0].combinator.value === '') {
                            selectorElements[0].combinator.value = ' ';
                        }
                        selfElements = selfElements.concat(selectors[i].elements);
                    }
                    this.selfSelectors = [new Selector(selfElements)];
                    this.selfSelectors[0].copyVisibilityInfo(this.visibilityInfo());
                };
                module.exports = Extend;
            },
            {
                './node': 70,
                './selector': 77
            }
        ],
        61: [
            function (require, module, exports) {
                var Node = require('./node'), Media = require('./media'), URL = require('./url'), Quoted = require('./quoted'), Ruleset = require('./ruleset'), Anonymous = require('./anonymous');
                var Import = function (path, features, options, index, currentFileInfo, visibilityInfo) {
                    this.options = options;
                    this.index = index;
                    this.path = path;
                    this.features = features;
                    this.currentFileInfo = currentFileInfo;
                    if (this.options.less !== undefined || this.options.inline) {
                        this.css = !this.options.less || this.options.inline;
                    } else {
                        var pathValue = this.getPath();
                        if (pathValue && /[#\.\&\?\/]css([\?;].*)?$/.test(pathValue)) {
                            this.css = true;
                        }
                    }
                    this.copyVisibilityInfo(visibilityInfo);
                };
                Import.prototype = new Node();
                Import.prototype.type = 'Import';
                Import.prototype.accept = function (visitor) {
                    if (this.features) {
                        this.features = visitor.visit(this.features);
                    }
                    this.path = visitor.visit(this.path);
                    if (!this.options.plugin && !this.options.inline && this.root) {
                        this.root = visitor.visit(this.root);
                    }
                };
                Import.prototype.genCSS = function (context, output) {
                    if (this.css && this.path.currentFileInfo.reference === undefined) {
                        output.add('@import ', this.currentFileInfo, this.index);
                        this.path.genCSS(context, output);
                        if (this.features) {
                            output.add(' ');
                            this.features.genCSS(context, output);
                        }
                        output.add(';');
                    }
                };
                Import.prototype.getPath = function () {
                    return this.path instanceof URL ? this.path.value.value : this.path.value;
                };
                Import.prototype.isVariableImport = function () {
                    var path = this.path;
                    if (path instanceof URL) {
                        path = path.value;
                    }
                    if (path instanceof Quoted) {
                        return path.containsVariables();
                    }
                    return true;
                };
                Import.prototype.evalForImport = function (context) {
                    var path = this.path;
                    if (path instanceof URL) {
                        path = path.value;
                    }
                    return new Import(path.eval(context), this.features, this.options, this.index, this.currentFileInfo, this.visibilityInfo());
                };
                Import.prototype.evalPath = function (context) {
                    var path = this.path.eval(context);
                    var rootpath = this.currentFileInfo && this.currentFileInfo.rootpath;
                    if (!(path instanceof URL)) {
                        if (rootpath) {
                            var pathValue = path.value;
                            if (pathValue && context.isPathRelative(pathValue)) {
                                path.value = rootpath + pathValue;
                            }
                        }
                        path.value = context.normalizePath(path.value);
                    }
                    return path;
                };
                Import.prototype.eval = function (context) {
                    var result = this.doEval(context);
                    if (this.options.reference || this.blocksVisibility()) {
                        if (result.length || result.length === 0) {
                            result.forEach(function (node) {
                                node.addVisibilityBlock();
                            });
                        } else {
                            result.addVisibilityBlock();
                        }
                    }
                    return result;
                };
                Import.prototype.doEval = function (context) {
                    var ruleset, registry, features = this.features && this.features.eval(context);
                    if (this.options.plugin) {
                        registry = context.frames[0] && context.frames[0].functionRegistry;
                        if (registry && this.root && this.root.functions) {
                            registry.addMultiple(this.root.functions);
                        }
                        return [];
                    }
                    if (this.skip) {
                        if (typeof this.skip === 'function') {
                            this.skip = this.skip();
                        }
                        if (this.skip) {
                            return [];
                        }
                    }
                    if (this.options.inline) {
                        var contents = new Anonymous(this.root, 0, {
                            filename: this.importedFilename,
                            reference: this.path.currentFileInfo && this.path.currentFileInfo.reference
                        }, true, true);
                        return this.features ? new Media([contents], this.features.value) : [contents];
                    } else if (this.css) {
                        var newImport = new Import(this.evalPath(context), features, this.options, this.index);
                        if (!newImport.css && this.error) {
                            throw this.error;
                        }
                        return newImport;
                    } else {
                        ruleset = new Ruleset(null, this.root.rules.slice(0));
                        ruleset.evalImports(context);
                        return this.features ? new Media(ruleset.rules, this.features.value) : ruleset.rules;
                    }
                };
                module.exports = Import;
            },
            {
                './anonymous': 46,
                './media': 66,
                './node': 70,
                './quoted': 73,
                './ruleset': 76,
                './url': 80
            }
        ],
        62: [
            function (require, module, exports) {
                var tree = {};
                tree.Node = require('./node');
                tree.Alpha = require('./alpha');
                tree.Color = require('./color');
                tree.Directive = require('./directive');
                tree.DetachedRuleset = require('./detached-ruleset');
                tree.Operation = require('./operation');
                tree.Dimension = require('./dimension');
                tree.Unit = require('./unit');
                tree.Keyword = require('./keyword');
                tree.Variable = require('./variable');
                tree.Ruleset = require('./ruleset');
                tree.Element = require('./element');
                tree.Attribute = require('./attribute');
                tree.Combinator = require('./combinator');
                tree.Selector = require('./selector');
                tree.Quoted = require('./quoted');
                tree.Expression = require('./expression');
                tree.Rule = require('./rule');
                tree.Call = require('./call');
                tree.URL = require('./url');
                tree.Import = require('./import');
                tree.mixin = {
                    Call: require('./mixin-call'),
                    Definition: require('./mixin-definition')
                };
                tree.Comment = require('./comment');
                tree.Anonymous = require('./anonymous');
                tree.Value = require('./value');
                tree.JavaScript = require('./javascript');
                tree.Assignment = require('./assignment');
                tree.Condition = require('./condition');
                tree.Paren = require('./paren');
                tree.Media = require('./media');
                tree.UnicodeDescriptor = require('./unicode-descriptor');
                tree.Negative = require('./negative');
                tree.Extend = require('./extend');
                tree.RulesetCall = require('./ruleset-call');
                module.exports = tree;
            },
            {
                './alpha': 45,
                './anonymous': 46,
                './assignment': 47,
                './attribute': 48,
                './call': 49,
                './color': 50,
                './combinator': 51,
                './comment': 52,
                './condition': 53,
                './detached-ruleset': 55,
                './dimension': 56,
                './directive': 57,
                './element': 58,
                './expression': 59,
                './extend': 60,
                './import': 61,
                './javascript': 63,
                './keyword': 65,
                './media': 66,
                './mixin-call': 67,
                './mixin-definition': 68,
                './negative': 69,
                './node': 70,
                './operation': 71,
                './paren': 72,
                './quoted': 73,
                './rule': 74,
                './ruleset': 76,
                './ruleset-call': 75,
                './selector': 77,
                './unicode-descriptor': 78,
                './unit': 79,
                './url': 80,
                './value': 81,
                './variable': 82
            }
        ],
        63: [
            function (require, module, exports) {
                var JsEvalNode = require('./js-eval-node'), Dimension = require('./dimension'), Quoted = require('./quoted'), Anonymous = require('./anonymous');
                var JavaScript = function (string, escaped, index, currentFileInfo) {
                    this.escaped = escaped;
                    this.expression = string;
                    this.index = index;
                    this.currentFileInfo = currentFileInfo;
                };
                JavaScript.prototype = new JsEvalNode();
                JavaScript.prototype.type = 'JavaScript';
                JavaScript.prototype.eval = function (context) {
                    var result = this.evaluateJavaScript(this.expression, context);
                    if (typeof result === 'number') {
                        return new Dimension(result);
                    } else if (typeof result === 'string') {
                        return new Quoted('"' + result + '"', result, this.escaped, this.index);
                    } else if (Array.isArray(result)) {
                        return new Anonymous(result.join(', '));
                    } else {
                        return new Anonymous(result);
                    }
                };
                module.exports = JavaScript;
            },
            {
                './anonymous': 46,
                './dimension': 56,
                './js-eval-node': 64,
                './quoted': 73
            }
        ],
        64: [
            function (require, module, exports) {
                var Node = require('./node'), Variable = require('./variable');
                var JsEvalNode = function () {
                };
                JsEvalNode.prototype = new Node();
                JsEvalNode.prototype.evaluateJavaScript = function (expression, context) {
                    var result, that = this, evalContext = {};
                    if (context.javascriptEnabled !== undefined && !context.javascriptEnabled) {
                        throw {
                            message: 'You are using JavaScript, which has been disabled.',
                            filename: this.currentFileInfo.filename,
                            index: this.index
                        };
                    }
                    expression = expression.replace(/@\{([\w-]+)\}/g, function (_, name) {
                        return that.jsify(new Variable('@' + name, that.index, that.currentFileInfo).eval(context));
                    });
                    try {
                        expression = new Function('return (' + expression + ')');
                    } catch (e) {
                        throw {
                            message: 'JavaScript evaluation error: ' + e.message + ' from `' + expression + '`',
                            filename: this.currentFileInfo.filename,
                            index: this.index
                        };
                    }
                    var variables = context.frames[0].variables();
                    for (var k in variables) {
                        if (variables.hasOwnProperty(k)) {
                            evalContext[k.slice(1)] = {
                                value: variables[k].value,
                                toJS: function () {
                                    return this.value.eval(context).toCSS();
                                }
                            };
                        }
                    }
                    try {
                        result = expression.call(evalContext);
                    } catch (e) {
                        throw {
                            message: 'JavaScript evaluation error: \'' + e.name + ': ' + e.message.replace(/["]/g, '\'') + '\'',
                            filename: this.currentFileInfo.filename,
                            index: this.index
                        };
                    }
                    return result;
                };
                JsEvalNode.prototype.jsify = function (obj) {
                    if (Array.isArray(obj.value) && obj.value.length > 1) {
                        return '[' + obj.value.map(function (v) {
                            return v.toCSS();
                        }).join(', ') + ']';
                    } else {
                        return obj.toCSS();
                    }
                };
                module.exports = JsEvalNode;
            },
            {
                './node': 70,
                './variable': 82
            }
        ],
        65: [
            function (require, module, exports) {
                var Node = require('./node');
                var Keyword = function (value) {
                    this.value = value;
                };
                Keyword.prototype = new Node();
                Keyword.prototype.type = 'Keyword';
                Keyword.prototype.genCSS = function (context, output) {
                    if (this.value === '%') {
                        throw {
                            type: 'Syntax',
                            message: 'Invalid % without number'
                        };
                    }
                    output.add(this.value);
                };
                Keyword.True = new Keyword('true');
                Keyword.False = new Keyword('false');
                module.exports = Keyword;
            },
            { './node': 70 }
        ],
        66: [
            function (require, module, exports) {
                var Ruleset = require('./ruleset'), Value = require('./value'), Selector = require('./selector'), Anonymous = require('./anonymous'), Expression = require('./expression'), Directive = require('./directive');
                var Media = function (value, features, index, currentFileInfo, visibilityInfo) {
                    this.index = index;
                    this.currentFileInfo = currentFileInfo;
                    var selectors = new Selector([], null, null, this.index, this.currentFileInfo).createEmptySelectors();
                    this.features = new Value(features);
                    this.rules = [new Ruleset(selectors, value)];
                    this.rules[0].allowImports = true;
                    this.copyVisibilityInfo(visibilityInfo);
                };
                Media.prototype = new Directive();
                Media.prototype.type = 'Media';
                Media.prototype.isRulesetLike = true;
                Media.prototype.accept = function (visitor) {
                    if (this.features) {
                        this.features = visitor.visit(this.features);
                    }
                    if (this.rules) {
                        this.rules = visitor.visitArray(this.rules);
                    }
                };
                Media.prototype.genCSS = function (context, output) {
                    output.add('@media ', this.currentFileInfo, this.index);
                    this.features.genCSS(context, output);
                    this.outputRuleset(context, output, this.rules);
                };
                Media.prototype.eval = function (context) {
                    if (!context.mediaBlocks) {
                        context.mediaBlocks = [];
                        context.mediaPath = [];
                    }
                    var media = new Media(null, [], this.index, this.currentFileInfo, this.visibilityInfo());
                    if (this.debugInfo) {
                        this.rules[0].debugInfo = this.debugInfo;
                        media.debugInfo = this.debugInfo;
                    }
                    var strictMathBypass = false;
                    if (!context.strictMath) {
                        strictMathBypass = true;
                        context.strictMath = true;
                    }
                    try {
                        media.features = this.features.eval(context);
                    } finally {
                        if (strictMathBypass) {
                            context.strictMath = false;
                        }
                    }
                    context.mediaPath.push(media);
                    context.mediaBlocks.push(media);
                    this.rules[0].functionRegistry = context.frames[0].functionRegistry.inherit();
                    context.frames.unshift(this.rules[0]);
                    media.rules = [this.rules[0].eval(context)];
                    context.frames.shift();
                    context.mediaPath.pop();
                    return context.mediaPath.length === 0 ? media.evalTop(context) : media.evalNested(context);
                };
                Media.prototype.evalTop = function (context) {
                    var result = this;
                    if (context.mediaBlocks.length > 1) {
                        var selectors = new Selector([], null, null, this.index, this.currentFileInfo).createEmptySelectors();
                        result = new Ruleset(selectors, context.mediaBlocks);
                        result.multiMedia = true;
                        result.copyVisibilityInfo(this.visibilityInfo());
                    }
                    delete context.mediaBlocks;
                    delete context.mediaPath;
                    return result;
                };
                Media.prototype.evalNested = function (context) {
                    var i, value, path = context.mediaPath.concat([this]);
                    for (i = 0; i < path.length; i++) {
                        value = path[i].features instanceof Value ? path[i].features.value : path[i].features;
                        path[i] = Array.isArray(value) ? value : [value];
                    }
                    this.features = new Value(this.permute(path).map(function (path) {
                        path = path.map(function (fragment) {
                            return fragment.toCSS ? fragment : new Anonymous(fragment);
                        });
                        for (i = path.length - 1; i > 0; i--) {
                            path.splice(i, 0, new Anonymous('and'));
                        }
                        return new Expression(path);
                    }));
                    return new Ruleset([], []);
                };
                Media.prototype.permute = function (arr) {
                    if (arr.length === 0) {
                        return [];
                    } else if (arr.length === 1) {
                        return arr[0];
                    } else {
                        var result = [];
                        var rest = this.permute(arr.slice(1));
                        for (var i = 0; i < rest.length; i++) {
                            for (var j = 0; j < arr[0].length; j++) {
                                result.push([arr[0][j]].concat(rest[i]));
                            }
                        }
                        return result;
                    }
                };
                Media.prototype.bubbleSelectors = function (selectors) {
                    if (!selectors) {
                        return;
                    }
                    this.rules = [new Ruleset(selectors.slice(0), [this.rules[0]])];
                };
                module.exports = Media;
            },
            {
                './anonymous': 46,
                './directive': 57,
                './expression': 59,
                './ruleset': 76,
                './selector': 77,
                './value': 81
            }
        ],
        67: [
            function (require, module, exports) {
                var Node = require('./node'), Selector = require('./selector'), MixinDefinition = require('./mixin-definition'), defaultFunc = require('../functions/default');
                var MixinCall = function (elements, args, index, currentFileInfo, important) {
                    this.selector = new Selector(elements);
                    this.arguments = args || [];
                    this.index = index;
                    this.currentFileInfo = currentFileInfo;
                    this.important = important;
                };
                MixinCall.prototype = new Node();
                MixinCall.prototype.type = 'MixinCall';
                MixinCall.prototype.accept = function (visitor) {
                    if (this.selector) {
                        this.selector = visitor.visit(this.selector);
                    }
                    if (this.arguments.length) {
                        this.arguments = visitor.visitArray(this.arguments);
                    }
                };
                MixinCall.prototype.eval = function (context) {
                    var mixins, mixin, mixinPath, args = [], arg, argValue, rules = [], match = false, i, m, f, isRecursive, isOneFound, candidates = [], candidate, conditionResult = [], defaultResult, defFalseEitherCase = -1, defNone = 0, defTrue = 1, defFalse = 2, count, originalRuleset, noArgumentsFilter;
                    function calcDefGroup(mixin, mixinPath) {
                        var f, p, namespace;
                        for (f = 0; f < 2; f++) {
                            conditionResult[f] = true;
                            defaultFunc.value(f);
                            for (p = 0; p < mixinPath.length && conditionResult[f]; p++) {
                                namespace = mixinPath[p];
                                if (namespace.matchCondition) {
                                    conditionResult[f] = conditionResult[f] && namespace.matchCondition(null, context);
                                }
                            }
                            if (mixin.matchCondition) {
                                conditionResult[f] = conditionResult[f] && mixin.matchCondition(args, context);
                            }
                        }
                        if (conditionResult[0] || conditionResult[1]) {
                            if (conditionResult[0] != conditionResult[1]) {
                                return conditionResult[1] ? defTrue : defFalse;
                            }
                            return defNone;
                        }
                        return defFalseEitherCase;
                    }
                    for (i = 0; i < this.arguments.length; i++) {
                        arg = this.arguments[i];
                        argValue = arg.value.eval(context);
                        if (arg.expand && Array.isArray(argValue.value)) {
                            argValue = argValue.value;
                            for (m = 0; m < argValue.length; m++) {
                                args.push({ value: argValue[m] });
                            }
                        } else {
                            args.push({
                                name: arg.name,
                                value: argValue
                            });
                        }
                    }
                    noArgumentsFilter = function (rule) {
                        return rule.matchArgs(null, context);
                    };
                    for (i = 0; i < context.frames.length; i++) {
                        if ((mixins = context.frames[i].find(this.selector, null, noArgumentsFilter)).length > 0) {
                            isOneFound = true;
                            for (m = 0; m < mixins.length; m++) {
                                mixin = mixins[m].rule;
                                mixinPath = mixins[m].path;
                                isRecursive = false;
                                for (f = 0; f < context.frames.length; f++) {
                                    if (!(mixin instanceof MixinDefinition) && mixin === (context.frames[f].originalRuleset || context.frames[f])) {
                                        isRecursive = true;
                                        break;
                                    }
                                }
                                if (isRecursive) {
                                    continue;
                                }
                                if (mixin.matchArgs(args, context)) {
                                    candidate = {
                                        mixin: mixin,
                                        group: calcDefGroup(mixin, mixinPath)
                                    };
                                    if (candidate.group !== defFalseEitherCase) {
                                        candidates.push(candidate);
                                    }
                                    match = true;
                                }
                            }
                            defaultFunc.reset();
                            count = [
                                0,
                                0,
                                0
                            ];
                            for (m = 0; m < candidates.length; m++) {
                                count[candidates[m].group]++;
                            }
                            if (count[defNone] > 0) {
                                defaultResult = defFalse;
                            } else {
                                defaultResult = defTrue;
                                if (count[defTrue] + count[defFalse] > 1) {
                                    throw {
                                        type: 'Runtime',
                                        message: 'Ambiguous use of `default()` found when matching for `' + this.format(args) + '`',
                                        index: this.index,
                                        filename: this.currentFileInfo.filename
                                    };
                                }
                            }
                            for (m = 0; m < candidates.length; m++) {
                                candidate = candidates[m].group;
                                if (candidate === defNone || candidate === defaultResult) {
                                    try {
                                        mixin = candidates[m].mixin;
                                        if (!(mixin instanceof MixinDefinition)) {
                                            originalRuleset = mixin.originalRuleset || mixin;
                                            mixin = new MixinDefinition('', [], mixin.rules, null, false, null, originalRuleset.visibilityInfo());
                                            mixin.originalRuleset = originalRuleset;
                                        }
                                        var newRules = mixin.evalCall(context, args, this.important).rules;
                                        this._setVisibilityToReplacement(newRules);
                                        Array.prototype.push.apply(rules, newRules);
                                    } catch (e) {
                                        throw {
                                            message: e.message,
                                            index: this.index,
                                            filename: this.currentFileInfo.filename,
                                            stack: e.stack
                                        };
                                    }
                                }
                            }
                            if (match) {
                                return rules;
                            }
                        }
                    }
                    if (isOneFound) {
                        throw {
                            type: 'Runtime',
                            message: 'No matching definition was found for `' + this.format(args) + '`',
                            index: this.index,
                            filename: this.currentFileInfo.filename
                        };
                    } else {
                        throw {
                            type: 'Name',
                            message: this.selector.toCSS().trim() + ' is undefined',
                            index: this.index,
                            filename: this.currentFileInfo.filename
                        };
                    }
                };
                MixinCall.prototype._setVisibilityToReplacement = function (replacement) {
                    var i, rule;
                    if (this.blocksVisibility()) {
                        for (i = 0; i < replacement.length; i++) {
                            rule = replacement[i];
                            rule.addVisibilityBlock();
                        }
                    }
                };
                MixinCall.prototype.format = function (args) {
                    return this.selector.toCSS().trim() + '(' + (args ? args.map(function (a) {
                        var argValue = '';
                        if (a.name) {
                            argValue += a.name + ':';
                        }
                        if (a.value.toCSS) {
                            argValue += a.value.toCSS();
                        } else {
                            argValue += '???';
                        }
                        return argValue;
                    }).join(', ') : '') + ')';
                };
                module.exports = MixinCall;
            },
            {
                '../functions/default': 20,
                './mixin-definition': 68,
                './node': 70,
                './selector': 77
            }
        ],
        68: [
            function (require, module, exports) {
                var Selector = require('./selector'), Element = require('./element'), Ruleset = require('./ruleset'), Rule = require('./rule'), Expression = require('./expression'), contexts = require('../contexts');
                var Definition = function (name, params, rules, condition, variadic, frames, visibilityInfo) {
                    this.name = name;
                    this.selectors = [new Selector([new Element(null, name, this.index, this.currentFileInfo)])];
                    this.params = params;
                    this.condition = condition;
                    this.variadic = variadic;
                    this.arity = params.length;
                    this.rules = rules;
                    this._lookups = {};
                    var optionalParameters = [];
                    this.required = params.reduce(function (count, p) {
                        if (!p.name || p.name && !p.value) {
                            return count + 1;
                        } else {
                            optionalParameters.push(p.name);
                            return count;
                        }
                    }, 0);
                    this.optionalParameters = optionalParameters;
                    this.frames = frames;
                    this.copyVisibilityInfo(visibilityInfo);
                };
                Definition.prototype = new Ruleset();
                Definition.prototype.type = 'MixinDefinition';
                Definition.prototype.evalFirst = true;
                Definition.prototype.accept = function (visitor) {
                    if (this.params && this.params.length) {
                        this.params = visitor.visitArray(this.params);
                    }
                    this.rules = visitor.visitArray(this.rules);
                    if (this.condition) {
                        this.condition = visitor.visit(this.condition);
                    }
                };
                Definition.prototype.evalParams = function (context, mixinEnv, args, evaldArguments) {
                    var frame = new Ruleset(null, null), varargs, arg, params = this.params.slice(0), i, j, val, name, isNamedFound, argIndex, argsLength = 0;
                    if (mixinEnv.frames && mixinEnv.frames[0] && mixinEnv.frames[0].functionRegistry) {
                        frame.functionRegistry = mixinEnv.frames[0].functionRegistry.inherit();
                    }
                    mixinEnv = new contexts.Eval(mixinEnv, [frame].concat(mixinEnv.frames));
                    if (args) {
                        args = args.slice(0);
                        argsLength = args.length;
                        for (i = 0; i < argsLength; i++) {
                            arg = args[i];
                            if (name = arg && arg.name) {
                                isNamedFound = false;
                                for (j = 0; j < params.length; j++) {
                                    if (!evaldArguments[j] && name === params[j].name) {
                                        evaldArguments[j] = arg.value.eval(context);
                                        frame.prependRule(new Rule(name, arg.value.eval(context)));
                                        isNamedFound = true;
                                        break;
                                    }
                                }
                                if (isNamedFound) {
                                    args.splice(i, 1);
                                    i--;
                                    continue;
                                } else {
                                    throw {
                                        type: 'Runtime',
                                        message: 'Named argument for ' + this.name + ' ' + args[i].name + ' not found'
                                    };
                                }
                            }
                        }
                    }
                    argIndex = 0;
                    for (i = 0; i < params.length; i++) {
                        if (evaldArguments[i]) {
                            continue;
                        }
                        arg = args && args[argIndex];
                        if (name = params[i].name) {
                            if (params[i].variadic) {
                                varargs = [];
                                for (j = argIndex; j < argsLength; j++) {
                                    varargs.push(args[j].value.eval(context));
                                }
                                frame.prependRule(new Rule(name, new Expression(varargs).eval(context)));
                            } else {
                                val = arg && arg.value;
                                if (val) {
                                    val = val.eval(context);
                                } else if (params[i].value) {
                                    val = params[i].value.eval(mixinEnv);
                                    frame.resetCache();
                                } else {
                                    throw {
                                        type: 'Runtime',
                                        message: 'wrong number of arguments for ' + this.name + ' (' + argsLength + ' for ' + this.arity + ')'
                                    };
                                }
                                frame.prependRule(new Rule(name, val));
                                evaldArguments[i] = val;
                            }
                        }
                        if (params[i].variadic && args) {
                            for (j = argIndex; j < argsLength; j++) {
                                evaldArguments[j] = args[j].value.eval(context);
                            }
                        }
                        argIndex++;
                    }
                    return frame;
                };
                Definition.prototype.makeImportant = function () {
                    var rules = !this.rules ? this.rules : this.rules.map(function (r) {
                        if (r.makeImportant) {
                            return r.makeImportant(true);
                        } else {
                            return r;
                        }
                    });
                    var result = new Definition(this.name, this.params, rules, this.condition, this.variadic, this.frames);
                    return result;
                };
                Definition.prototype.eval = function (context) {
                    return new Definition(this.name, this.params, this.rules, this.condition, this.variadic, this.frames || context.frames.slice(0));
                };
                Definition.prototype.evalCall = function (context, args, important) {
                    var _arguments = [], mixinFrames = this.frames ? this.frames.concat(context.frames) : context.frames, frame = this.evalParams(context, new contexts.Eval(context, mixinFrames), args, _arguments), rules, ruleset;
                    frame.prependRule(new Rule('@arguments', new Expression(_arguments).eval(context)));
                    rules = this.rules.slice(0);
                    ruleset = new Ruleset(null, rules);
                    ruleset.originalRuleset = this;
                    ruleset = ruleset.eval(new contexts.Eval(context, [
                        this,
                        frame
                    ].concat(mixinFrames)));
                    if (important) {
                        ruleset = ruleset.makeImportant();
                    }
                    return ruleset;
                };
                Definition.prototype.matchCondition = function (args, context) {
                    if (this.condition && !this.condition.eval(new contexts.Eval(context, [this.evalParams(context, new contexts.Eval(context, this.frames ? this.frames.concat(context.frames) : context.frames), args, [])].concat(this.frames || []).concat(context.frames)))) {
                        return false;
                    }
                    return true;
                };
                Definition.prototype.matchArgs = function (args, context) {
                    var allArgsCnt = args && args.length || 0, len, optionalParameters = this.optionalParameters;
                    var requiredArgsCnt = !args ? 0 : args.reduce(function (count, p) {
                        if (optionalParameters.indexOf(p.name) < 0) {
                            return count + 1;
                        } else {
                            return count;
                        }
                    }, 0);
                    if (!this.variadic) {
                        if (requiredArgsCnt < this.required) {
                            return false;
                        }
                        if (allArgsCnt > this.params.length) {
                            return false;
                        }
                    } else {
                        if (requiredArgsCnt < this.required - 1) {
                            return false;
                        }
                    }
                    len = Math.min(requiredArgsCnt, this.arity);
                    for (var i = 0; i < len; i++) {
                        if (!this.params[i].name && !this.params[i].variadic) {
                            if (args[i].value.eval(context).toCSS() != this.params[i].value.eval(context).toCSS()) {
                                return false;
                            }
                        }
                    }
                    return true;
                };
                module.exports = Definition;
            },
            {
                '../contexts': 11,
                './element': 58,
                './expression': 59,
                './rule': 74,
                './ruleset': 76,
                './selector': 77
            }
        ],
        69: [
            function (require, module, exports) {
                var Node = require('./node'), Operation = require('./operation'), Dimension = require('./dimension');
                var Negative = function (node) {
                    this.value = node;
                };
                Negative.prototype = new Node();
                Negative.prototype.type = 'Negative';
                Negative.prototype.genCSS = function (context, output) {
                    output.add('-');
                    this.value.genCSS(context, output);
                };
                Negative.prototype.eval = function (context) {
                    if (context.isMathOn()) {
                        return new Operation('*', [
                            new Dimension(-1),
                            this.value
                        ]).eval(context);
                    }
                    return new Negative(this.value.eval(context));
                };
                module.exports = Negative;
            },
            {
                './dimension': 56,
                './node': 70,
                './operation': 71
            }
        ],
        70: [
            function (require, module, exports) {
                var Node = function () {
                };
                Node.prototype.toCSS = function (context) {
                    var strs = [];
                    this.genCSS(context, {
                        add: function (chunk, fileInfo, index) {
                            strs.push(chunk);
                        },
                        isEmpty: function () {
                            return strs.length === 0;
                        }
                    });
                    return strs.join('');
                };
                Node.prototype.genCSS = function (context, output) {
                    output.add(this.value);
                };
                Node.prototype.accept = function (visitor) {
                    this.value = visitor.visit(this.value);
                };
                Node.prototype.eval = function () {
                    return this;
                };
                Node.prototype._operate = function (context, op, a, b) {
                    switch (op) {
                    case '+':
                        return a + b;
                    case '-':
                        return a - b;
                    case '*':
                        return a * b;
                    case '/':
                        return a / b;
                    }
                };
                Node.prototype.fround = function (context, value) {
                    var precision = context && context.numPrecision;
                    return precision == null ? value : Number((value + 2e-16).toFixed(precision));
                };
                Node.compare = function (a, b) {
                    if (a.compare && !(b.type === 'Quoted' || b.type === 'Anonymous')) {
                        return a.compare(b);
                    } else if (b.compare) {
                        return -b.compare(a);
                    } else if (a.type !== b.type) {
                        return undefined;
                    }
                    a = a.value;
                    b = b.value;
                    if (!Array.isArray(a)) {
                        return a === b ? 0 : undefined;
                    }
                    if (a.length !== b.length) {
                        return undefined;
                    }
                    for (var i = 0; i < a.length; i++) {
                        if (Node.compare(a[i], b[i]) !== 0) {
                            return undefined;
                        }
                    }
                    return 0;
                };
                Node.numericCompare = function (a, b) {
                    return a < b ? -1 : a === b ? 0 : a > b ? 1 : undefined;
                };
                Node.prototype.blocksVisibility = function () {
                    if (this.visibilityBlocks == null) {
                        this.visibilityBlocks = 0;
                    }
                    return this.visibilityBlocks !== 0;
                };
                Node.prototype.addVisibilityBlock = function () {
                    if (this.visibilityBlocks == null) {
                        this.visibilityBlocks = 0;
                    }
                    this.visibilityBlocks = this.visibilityBlocks + 1;
                };
                Node.prototype.removeVisibilityBlock = function () {
                    if (this.visibilityBlocks == null) {
                        this.visibilityBlocks = 0;
                    }
                    this.visibilityBlocks = this.visibilityBlocks - 1;
                };
                Node.prototype.ensureVisibility = function () {
                    this.nodeVisible = true;
                };
                Node.prototype.ensureInvisibility = function () {
                    this.nodeVisible = false;
                };
                Node.prototype.isVisible = function () {
                    return this.nodeVisible;
                };
                Node.prototype.visibilityInfo = function () {
                    return {
                        visibilityBlocks: this.visibilityBlocks,
                        nodeVisible: this.nodeVisible
                    };
                };
                Node.prototype.copyVisibilityInfo = function (info) {
                    if (!info) {
                        return;
                    }
                    this.visibilityBlocks = info.visibilityBlocks;
                    this.nodeVisible = info.nodeVisible;
                };
                module.exports = Node;
            },
            {}
        ],
        71: [
            function (require, module, exports) {
                var Node = require('./node'), Color = require('./color'), Dimension = require('./dimension');
                var Operation = function (op, operands, isSpaced) {
                    this.op = op.trim();
                    this.operands = operands;
                    this.isSpaced = isSpaced;
                };
                Operation.prototype = new Node();
                Operation.prototype.type = 'Operation';
                Operation.prototype.accept = function (visitor) {
                    this.operands = visitor.visit(this.operands);
                };
                Operation.prototype.eval = function (context) {
                    var a = this.operands[0].eval(context), b = this.operands[1].eval(context);
                    if (context.isMathOn()) {
                        if (a instanceof Dimension && b instanceof Color) {
                            a = a.toColor();
                        }
                        if (b instanceof Dimension && a instanceof Color) {
                            b = b.toColor();
                        }
                        if (!a.operate) {
                            throw {
                                type: 'Operation',
                                message: 'Operation on an invalid type'
                            };
                        }
                        return a.operate(context, this.op, b);
                    } else {
                        return new Operation(this.op, [
                            a,
                            b
                        ], this.isSpaced);
                    }
                };
                Operation.prototype.genCSS = function (context, output) {
                    this.operands[0].genCSS(context, output);
                    if (this.isSpaced) {
                        output.add(' ');
                    }
                    output.add(this.op);
                    if (this.isSpaced) {
                        output.add(' ');
                    }
                    this.operands[1].genCSS(context, output);
                };
                module.exports = Operation;
            },
            {
                './color': 50,
                './dimension': 56,
                './node': 70
            }
        ],
        72: [
            function (require, module, exports) {
                var Node = require('./node');
                var Paren = function (node) {
                    this.value = node;
                };
                Paren.prototype = new Node();
                Paren.prototype.type = 'Paren';
                Paren.prototype.genCSS = function (context, output) {
                    output.add('(');
                    this.value.genCSS(context, output);
                    output.add(')');
                };
                Paren.prototype.eval = function (context) {
                    return new Paren(this.value.eval(context));
                };
                module.exports = Paren;
            },
            { './node': 70 }
        ],
        73: [
            function (require, module, exports) {
                var Node = require('./node'), JsEvalNode = require('./js-eval-node'), Variable = require('./variable');
                var Quoted = function (str, content, escaped, index, currentFileInfo) {
                    this.escaped = escaped == null ? true : escaped;
                    this.value = content || '';
                    this.quote = str.charAt(0);
                    this.index = index;
                    this.currentFileInfo = currentFileInfo;
                };
                Quoted.prototype = new JsEvalNode();
                Quoted.prototype.type = 'Quoted';
                Quoted.prototype.genCSS = function (context, output) {
                    if (!this.escaped) {
                        output.add(this.quote, this.currentFileInfo, this.index);
                    }
                    output.add(this.value);
                    if (!this.escaped) {
                        output.add(this.quote);
                    }
                };
                Quoted.prototype.containsVariables = function () {
                    return this.value.match(/(`([^`]+)`)|@\{([\w-]+)\}/);
                };
                Quoted.prototype.eval = function (context) {
                    var that = this, value = this.value;
                    var javascriptReplacement = function (_, exp) {
                        return String(that.evaluateJavaScript(exp, context));
                    };
                    var interpolationReplacement = function (_, name) {
                        var v = new Variable('@' + name, that.index, that.currentFileInfo).eval(context, true);
                        return v instanceof Quoted ? v.value : v.toCSS();
                    };
                    function iterativeReplace(value, regexp, replacementFnc) {
                        var evaluatedValue = value;
                        do {
                            value = evaluatedValue;
                            evaluatedValue = value.replace(regexp, replacementFnc);
                        } while (value !== evaluatedValue);
                        return evaluatedValue;
                    }
                    value = iterativeReplace(value, /`([^`]+)`/g, javascriptReplacement);
                    value = iterativeReplace(value, /@\{([\w-]+)\}/g, interpolationReplacement);
                    return new Quoted(this.quote + value + this.quote, value, this.escaped, this.index, this.currentFileInfo);
                };
                Quoted.prototype.compare = function (other) {
                    if (other.type === 'Quoted' && !this.escaped && !other.escaped) {
                        return Node.numericCompare(this.value, other.value);
                    } else {
                        return other.toCSS && this.toCSS() === other.toCSS() ? 0 : undefined;
                    }
                };
                module.exports = Quoted;
            },
            {
                './js-eval-node': 64,
                './node': 70,
                './variable': 82
            }
        ],
        74: [
            function (require, module, exports) {
                var Node = require('./node'), Value = require('./value'), Keyword = require('./keyword');
                var Rule = function (name, value, important, merge, index, currentFileInfo, inline, variable) {
                    this.name = name;
                    this.value = value instanceof Node ? value : new Value([value]);
                    this.important = important ? ' ' + important.trim() : '';
                    this.merge = merge;
                    this.index = index;
                    this.currentFileInfo = currentFileInfo;
                    this.inline = inline || false;
                    this.variable = variable !== undefined ? variable : name.charAt && name.charAt(0) === '@';
                };
                function evalName(context, name) {
                    var value = '', i, n = name.length, output = {
                            add: function (s) {
                                value += s;
                            }
                        };
                    for (i = 0; i < n; i++) {
                        name[i].eval(context).genCSS(context, output);
                    }
                    return value;
                }
                Rule.prototype = new Node();
                Rule.prototype.type = 'Rule';
                Rule.prototype.genCSS = function (context, output) {
                    output.add(this.name + (context.compress ? ':' : ': '), this.currentFileInfo, this.index);
                    try {
                        this.value.genCSS(context, output);
                    } catch (e) {
                        e.index = this.index;
                        e.filename = this.currentFileInfo.filename;
                        throw e;
                    }
                    output.add(this.important + (this.inline || context.lastRule && context.compress ? '' : ';'), this.currentFileInfo, this.index);
                };
                Rule.prototype.eval = function (context) {
                    var strictMathBypass = false, name = this.name, evaldValue, variable = this.variable;
                    if (typeof name !== 'string') {
                        name = name.length === 1 && name[0] instanceof Keyword ? name[0].value : evalName(context, name);
                        variable = false;
                    }
                    if (name === 'font' && !context.strictMath) {
                        strictMathBypass = true;
                        context.strictMath = true;
                    }
                    try {
                        context.importantScope.push({});
                        evaldValue = this.value.eval(context);
                        if (!this.variable && evaldValue.type === 'DetachedRuleset') {
                            throw {
                                message: 'Rulesets cannot be evaluated on a property.',
                                index: this.index,
                                filename: this.currentFileInfo.filename
                            };
                        }
                        var important = this.important, importantResult = context.importantScope.pop();
                        if (!important && importantResult.important) {
                            important = importantResult.important;
                        }
                        return new Rule(name, evaldValue, important, this.merge, this.index, this.currentFileInfo, this.inline, variable);
                    } catch (e) {
                        if (typeof e.index !== 'number') {
                            e.index = this.index;
                            e.filename = this.currentFileInfo.filename;
                        }
                        throw e;
                    } finally {
                        if (strictMathBypass) {
                            context.strictMath = false;
                        }
                    }
                };
                Rule.prototype.makeImportant = function () {
                    return new Rule(this.name, this.value, '!important', this.merge, this.index, this.currentFileInfo, this.inline);
                };
                module.exports = Rule;
            },
            {
                './keyword': 65,
                './node': 70,
                './value': 81
            }
        ],
        75: [
            function (require, module, exports) {
                var Node = require('./node'), Variable = require('./variable');
                var RulesetCall = function (variable) {
                    this.variable = variable;
                };
                RulesetCall.prototype = new Node();
                RulesetCall.prototype.type = 'RulesetCall';
                RulesetCall.prototype.eval = function (context) {
                    var detachedRuleset = new Variable(this.variable).eval(context);
                    return detachedRuleset.callEval(context);
                };
                module.exports = RulesetCall;
            },
            {
                './node': 70,
                './variable': 82
            }
        ],
        76: [
            function (require, module, exports) {
                var Node = require('./node'), Rule = require('./rule'), Selector = require('./selector'), Element = require('./element'), Paren = require('./paren'), contexts = require('../contexts'), globalFunctionRegistry = require('../functions/function-registry'), defaultFunc = require('../functions/default'), getDebugInfo = require('./debug-info');
                var Ruleset = function (selectors, rules, strictImports, visibilityInfo) {
                    this.selectors = selectors;
                    this.rules = rules;
                    this._lookups = {};
                    this.strictImports = strictImports;
                    this.copyVisibilityInfo(visibilityInfo);
                };
                Ruleset.prototype = new Node();
                Ruleset.prototype.type = 'Ruleset';
                Ruleset.prototype.isRuleset = true;
                Ruleset.prototype.isRulesetLike = true;
                Ruleset.prototype.accept = function (visitor) {
                    if (this.paths) {
                        this.paths = visitor.visitArray(this.paths, true);
                    } else if (this.selectors) {
                        this.selectors = visitor.visitArray(this.selectors);
                    }
                    if (this.rules && this.rules.length) {
                        this.rules = visitor.visitArray(this.rules);
                    }
                };
                Ruleset.prototype.eval = function (context) {
                    var thisSelectors = this.selectors, selectors, selCnt, selector, i, hasOnePassingSelector = false;
                    if (thisSelectors && (selCnt = thisSelectors.length)) {
                        selectors = [];
                        defaultFunc.error({
                            type: 'Syntax',
                            message: 'it is currently only allowed in parametric mixin guards,'
                        });
                        for (i = 0; i < selCnt; i++) {
                            selector = thisSelectors[i].eval(context);
                            selectors.push(selector);
                            if (selector.evaldCondition) {
                                hasOnePassingSelector = true;
                            }
                        }
                        defaultFunc.reset();
                    } else {
                        hasOnePassingSelector = true;
                    }
                    var rules = this.rules ? this.rules.slice(0) : null, ruleset = new Ruleset(selectors, rules, this.strictImports, this.visibilityInfo()), rule, subRule;
                    ruleset.originalRuleset = this;
                    ruleset.root = this.root;
                    ruleset.firstRoot = this.firstRoot;
                    ruleset.allowImports = this.allowImports;
                    if (this.debugInfo) {
                        ruleset.debugInfo = this.debugInfo;
                    }
                    if (!hasOnePassingSelector) {
                        rules.length = 0;
                    }
                    ruleset.functionRegistry = function (frames) {
                        var i = 0, n = frames.length, found;
                        for (; i !== n; ++i) {
                            found = frames[i].functionRegistry;
                            if (found) {
                                return found;
                            }
                        }
                        return globalFunctionRegistry;
                    }(context.frames).inherit();
                    var ctxFrames = context.frames;
                    ctxFrames.unshift(ruleset);
                    var ctxSelectors = context.selectors;
                    if (!ctxSelectors) {
                        context.selectors = ctxSelectors = [];
                    }
                    ctxSelectors.unshift(this.selectors);
                    if (ruleset.root || ruleset.allowImports || !ruleset.strictImports) {
                        ruleset.evalImports(context);
                    }
                    var rsRules = ruleset.rules, rsRuleCnt = rsRules ? rsRules.length : 0;
                    for (i = 0; i < rsRuleCnt; i++) {
                        if (rsRules[i].evalFirst) {
                            rsRules[i] = rsRules[i].eval(context);
                        }
                    }
                    var mediaBlockCount = context.mediaBlocks && context.mediaBlocks.length || 0;
                    for (i = 0; i < rsRuleCnt; i++) {
                        if (rsRules[i].type === 'MixinCall') {
                            rules = rsRules[i].eval(context).filter(function (r) {
                                if (r instanceof Rule && r.variable) {
                                    return !ruleset.variable(r.name);
                                }
                                return true;
                            });
                            rsRules.splice.apply(rsRules, [
                                i,
                                1
                            ].concat(rules));
                            rsRuleCnt += rules.length - 1;
                            i += rules.length - 1;
                            ruleset.resetCache();
                        } else if (rsRules[i].type === 'RulesetCall') {
                            rules = rsRules[i].eval(context).rules.filter(function (r) {
                                if (r instanceof Rule && r.variable) {
                                    return false;
                                }
                                return true;
                            });
                            rsRules.splice.apply(rsRules, [
                                i,
                                1
                            ].concat(rules));
                            rsRuleCnt += rules.length - 1;
                            i += rules.length - 1;
                            ruleset.resetCache();
                        }
                    }
                    for (i = 0; i < rsRules.length; i++) {
                        rule = rsRules[i];
                        if (!rule.evalFirst) {
                            rsRules[i] = rule = rule.eval ? rule.eval(context) : rule;
                        }
                    }
                    for (i = 0; i < rsRules.length; i++) {
                        rule = rsRules[i];
                        if (rule instanceof Ruleset && rule.selectors && rule.selectors.length === 1) {
                            if (rule.selectors[0].isJustParentSelector()) {
                                rsRules.splice(i--, 1);
                                for (var j = 0; j < rule.rules.length; j++) {
                                    subRule = rule.rules[j];
                                    subRule.copyVisibilityInfo(rule.visibilityInfo());
                                    if (!(subRule instanceof Rule) || !subRule.variable) {
                                        rsRules.splice(++i, 0, subRule);
                                    }
                                }
                            }
                        }
                    }
                    ctxFrames.shift();
                    ctxSelectors.shift();
                    if (context.mediaBlocks) {
                        for (i = mediaBlockCount; i < context.mediaBlocks.length; i++) {
                            context.mediaBlocks[i].bubbleSelectors(selectors);
                        }
                    }
                    return ruleset;
                };
                Ruleset.prototype.evalImports = function (context) {
                    var rules = this.rules, i, importRules;
                    if (!rules) {
                        return;
                    }
                    for (i = 0; i < rules.length; i++) {
                        if (rules[i].type === 'Import') {
                            importRules = rules[i].eval(context);
                            if (importRules && (importRules.length || importRules.length === 0)) {
                                rules.splice.apply(rules, [
                                    i,
                                    1
                                ].concat(importRules));
                                i += importRules.length - 1;
                            } else {
                                rules.splice(i, 1, importRules);
                            }
                            this.resetCache();
                        }
                    }
                };
                Ruleset.prototype.makeImportant = function () {
                    var result = new Ruleset(this.selectors, this.rules.map(function (r) {
                        if (r.makeImportant) {
                            return r.makeImportant();
                        } else {
                            return r;
                        }
                    }), this.strictImports, this.visibilityInfo());
                    return result;
                };
                Ruleset.prototype.matchArgs = function (args) {
                    return !args || args.length === 0;
                };
                Ruleset.prototype.matchCondition = function (args, context) {
                    var lastSelector = this.selectors[this.selectors.length - 1];
                    if (!lastSelector.evaldCondition) {
                        return false;
                    }
                    if (lastSelector.condition && !lastSelector.condition.eval(new contexts.Eval(context, context.frames))) {
                        return false;
                    }
                    return true;
                };
                Ruleset.prototype.resetCache = function () {
                    this._rulesets = null;
                    this._variables = null;
                    this._lookups = {};
                };
                Ruleset.prototype.variables = function () {
                    if (!this._variables) {
                        this._variables = !this.rules ? {} : this.rules.reduce(function (hash, r) {
                            if (r instanceof Rule && r.variable === true) {
                                hash[r.name] = r;
                            }
                            if (r.type === 'Import' && r.root && r.root.variables) {
                                var vars = r.root.variables();
                                for (var name in vars) {
                                    if (vars.hasOwnProperty(name)) {
                                        hash[name] = vars[name];
                                    }
                                }
                            }
                            return hash;
                        }, {});
                    }
                    return this._variables;
                };
                Ruleset.prototype.variable = function (name) {
                    return this.variables()[name];
                };
                Ruleset.prototype.rulesets = function () {
                    if (!this.rules) {
                        return [];
                    }
                    var filtRules = [], rules = this.rules, cnt = rules.length, i, rule;
                    for (i = 0; i < cnt; i++) {
                        rule = rules[i];
                        if (rule.isRuleset) {
                            filtRules.push(rule);
                        }
                    }
                    return filtRules;
                };
                Ruleset.prototype.prependRule = function (rule) {
                    var rules = this.rules;
                    if (rules) {
                        rules.unshift(rule);
                    } else {
                        this.rules = [rule];
                    }
                };
                Ruleset.prototype.find = function (selector, self, filter) {
                    self = self || this;
                    var rules = [], match, foundMixins, key = selector.toCSS();
                    if (key in this._lookups) {
                        return this._lookups[key];
                    }
                    this.rulesets().forEach(function (rule) {
                        if (rule !== self) {
                            for (var j = 0; j < rule.selectors.length; j++) {
                                match = selector.match(rule.selectors[j]);
                                if (match) {
                                    if (selector.elements.length > match) {
                                        if (!filter || filter(rule)) {
                                            foundMixins = rule.find(new Selector(selector.elements.slice(match)), self, filter);
                                            for (var i = 0; i < foundMixins.length; ++i) {
                                                foundMixins[i].path.push(rule);
                                            }
                                            Array.prototype.push.apply(rules, foundMixins);
                                        }
                                    } else {
                                        rules.push({
                                            rule: rule,
                                            path: []
                                        });
                                    }
                                    break;
                                }
                            }
                        }
                    });
                    this._lookups[key] = rules;
                    return rules;
                };
                Ruleset.prototype.genCSS = function (context, output) {
                    var i, j, charsetRuleNodes = [], ruleNodes = [], debugInfo, rule, path;
                    context.tabLevel = context.tabLevel || 0;
                    if (!this.root) {
                        context.tabLevel++;
                    }
                    var tabRuleStr = context.compress ? '' : Array(context.tabLevel + 1).join('  '), tabSetStr = context.compress ? '' : Array(context.tabLevel).join('  '), sep;
                    function isRulesetLikeNode(rule) {
                        if (typeof rule.isRulesetLike === 'boolean') {
                            return rule.isRulesetLike;
                        } else if (typeof rule.isRulesetLike === 'function') {
                            return rule.isRulesetLike();
                        }
                        return false;
                    }
                    var charsetNodeIndex = 0;
                    var importNodeIndex = 0;
                    for (i = 0; i < this.rules.length; i++) {
                        rule = this.rules[i];
                        if (rule.type === 'Comment') {
                            if (importNodeIndex === i) {
                                importNodeIndex++;
                            }
                            ruleNodes.push(rule);
                        } else if (rule.isCharset && rule.isCharset()) {
                            ruleNodes.splice(charsetNodeIndex, 0, rule);
                            charsetNodeIndex++;
                            importNodeIndex++;
                        } else if (rule.type === 'Import') {
                            ruleNodes.splice(importNodeIndex, 0, rule);
                            importNodeIndex++;
                        } else {
                            ruleNodes.push(rule);
                        }
                    }
                    ruleNodes = charsetRuleNodes.concat(ruleNodes);
                    if (!this.root) {
                        debugInfo = getDebugInfo(context, this, tabSetStr);
                        if (debugInfo) {
                            output.add(debugInfo);
                            output.add(tabSetStr);
                        }
                        var paths = this.paths, pathCnt = paths.length, pathSubCnt;
                        sep = context.compress ? ',' : ',\n' + tabSetStr;
                        for (i = 0; i < pathCnt; i++) {
                            path = paths[i];
                            if (!(pathSubCnt = path.length)) {
                                continue;
                            }
                            if (i > 0) {
                                output.add(sep);
                            }
                            context.firstSelector = true;
                            path[0].genCSS(context, output);
                            context.firstSelector = false;
                            for (j = 1; j < pathSubCnt; j++) {
                                path[j].genCSS(context, output);
                            }
                        }
                        output.add((context.compress ? '{' : ' {\n') + tabRuleStr);
                    }
                    for (i = 0; i < ruleNodes.length; i++) {
                        rule = ruleNodes[i];
                        if (i + 1 === ruleNodes.length) {
                            context.lastRule = true;
                        }
                        var currentLastRule = context.lastRule;
                        if (isRulesetLikeNode(rule)) {
                            context.lastRule = false;
                        }
                        if (rule.genCSS) {
                            rule.genCSS(context, output);
                        } else if (rule.value) {
                            output.add(rule.value.toString());
                        }
                        context.lastRule = currentLastRule;
                        if (!context.lastRule) {
                            output.add(context.compress ? '' : '\n' + tabRuleStr);
                        } else {
                            context.lastRule = false;
                        }
                    }
                    if (!this.root) {
                        output.add(context.compress ? '}' : '\n' + tabSetStr + '}');
                        context.tabLevel--;
                    }
                    if (!output.isEmpty() && !context.compress && this.firstRoot) {
                        output.add('\n');
                    }
                };
                Ruleset.prototype.joinSelectors = function (paths, context, selectors) {
                    for (var s = 0; s < selectors.length; s++) {
                        this.joinSelector(paths, context, selectors[s]);
                    }
                };
                Ruleset.prototype.joinSelector = function (paths, context, selector) {
                    function createParenthesis(elementsToPak, originalElement) {
                        var replacementParen, j;
                        if (elementsToPak.length === 0) {
                            replacementParen = new Paren(elementsToPak[0]);
                        } else {
                            var insideParent = [];
                            for (j = 0; j < elementsToPak.length; j++) {
                                insideParent.push(new Element(null, elementsToPak[j], originalElement.index, originalElement.currentFileInfo));
                            }
                            replacementParen = new Paren(new Selector(insideParent));
                        }
                        return replacementParen;
                    }
                    function createSelector(containedElement, originalElement) {
                        var element, selector;
                        element = new Element(null, containedElement, originalElement.index, originalElement.currentFileInfo);
                        selector = new Selector([element]);
                        return selector;
                    }
                    function replaceParentSelector(paths, context, inSelector) {
                        var i, j, k, currentElements, newSelectors, selectorsMultiplied, sel, el, hadParentSelector = false, length, lastSelector;
                        function findNestedSelector(element) {
                            var maybeSelector;
                            if (element.value.type !== 'Paren') {
                                return null;
                            }
                            maybeSelector = element.value.value;
                            if (maybeSelector.type !== 'Selector') {
                                return null;
                            }
                            return maybeSelector;
                        }
                        currentElements = [];
                        newSelectors = [[]];
                        for (i = 0; i < inSelector.elements.length; i++) {
                            el = inSelector.elements[i];
                            if (el.value !== '&') {
                                var nestedSelector = findNestedSelector(el);
                                if (nestedSelector != null) {
                                    mergeElementsOnToSelectors(currentElements, newSelectors);
                                    var nestedPaths = [], replaced, replacedNewSelectors = [];
                                    replaced = replaceParentSelector(nestedPaths, context, nestedSelector);
                                    hadParentSelector = hadParentSelector || replaced;
                                    for (k = 0; k < nestedPaths.length; k++) {
                                        var replacementSelector = createSelector(createParenthesis(nestedPaths[k], el), el);
                                        addAllReplacementsIntoPath(newSelectors, [replacementSelector], el, inSelector, replacedNewSelectors);
                                    }
                                    newSelectors = replacedNewSelectors;
                                    currentElements = [];
                                } else {
                                    currentElements.push(el);
                                }
                            } else {
                                hadParentSelector = true;
                                selectorsMultiplied = [];
                                mergeElementsOnToSelectors(currentElements, newSelectors);
                                for (j = 0; j < newSelectors.length; j++) {
                                    sel = newSelectors[j];
                                    if (context.length === 0) {
                                        if (sel.length > 0) {
                                            sel[0].elements.push(new Element(el.combinator, '', el.index, el.currentFileInfo));
                                        }
                                        selectorsMultiplied.push(sel);
                                    } else {
                                        for (k = 0; k < context.length; k++) {
                                            var newSelectorPath = addReplacementIntoPath(sel, context[k], el, inSelector);
                                            selectorsMultiplied.push(newSelectorPath);
                                        }
                                    }
                                }
                                newSelectors = selectorsMultiplied;
                                currentElements = [];
                            }
                        }
                        mergeElementsOnToSelectors(currentElements, newSelectors);
                        for (i = 0; i < newSelectors.length; i++) {
                            length = newSelectors[i].length;
                            if (length > 0) {
                                paths.push(newSelectors[i]);
                                lastSelector = newSelectors[i][length - 1];
                                newSelectors[i][length - 1] = lastSelector.createDerived(lastSelector.elements, inSelector.extendList);
                            }
                        }
                        return hadParentSelector;
                    }
                    function addReplacementIntoPath(beginningPath, addPath, replacedElement, originalSelector) {
                        var newSelectorPath, lastSelector, newJoinedSelector;
                        newSelectorPath = [];
                        if (beginningPath.length > 0) {
                            newSelectorPath = beginningPath.slice(0);
                            lastSelector = newSelectorPath.pop();
                            newJoinedSelector = originalSelector.createDerived(lastSelector.elements.slice(0));
                        } else {
                            newJoinedSelector = originalSelector.createDerived([]);
                        }
                        if (addPath.length > 0) {
                            var combinator = replacedElement.combinator, parentEl = addPath[0].elements[0];
                            if (combinator.emptyOrWhitespace && !parentEl.combinator.emptyOrWhitespace) {
                                combinator = parentEl.combinator;
                            }
                            newJoinedSelector.elements.push(new Element(combinator, parentEl.value, replacedElement.index, replacedElement.currentFileInfo));
                            newJoinedSelector.elements = newJoinedSelector.elements.concat(addPath[0].elements.slice(1));
                        }
                        if (newJoinedSelector.elements.length !== 0) {
                            newSelectorPath.push(newJoinedSelector);
                        }
                        if (addPath.length > 1) {
                            var restOfPath = addPath.slice(1);
                            restOfPath = restOfPath.map(function (selector) {
                                return selector.createDerived(selector.elements, []);
                            });
                            newSelectorPath = newSelectorPath.concat(restOfPath);
                        }
                        return newSelectorPath;
                    }
                    function addAllReplacementsIntoPath(beginningPath, addPaths, replacedElement, originalSelector, result) {
                        var j;
                        for (j = 0; j < beginningPath.length; j++) {
                            var newSelectorPath = addReplacementIntoPath(beginningPath[j], addPaths, replacedElement, originalSelector);
                            result.push(newSelectorPath);
                        }
                        return result;
                    }
                    function mergeElementsOnToSelectors(elements, selectors) {
                        var i, sel;
                        if (elements.length === 0) {
                            return;
                        }
                        if (selectors.length === 0) {
                            selectors.push([new Selector(elements)]);
                            return;
                        }
                        for (i = 0; i < selectors.length; i++) {
                            sel = selectors[i];
                            if (sel.length > 0) {
                                sel[sel.length - 1] = sel[sel.length - 1].createDerived(sel[sel.length - 1].elements.concat(elements));
                            } else {
                                sel.push(new Selector(elements));
                            }
                        }
                    }
                    function deriveSelector(visibilityInfo, deriveFrom) {
                        var newSelector = deriveFrom.createDerived(deriveFrom.elements, deriveFrom.extendList, deriveFrom.evaldCondition);
                        newSelector.copyVisibilityInfo(visibilityInfo);
                        return newSelector;
                    }
                    var i, newPaths, hadParentSelector;
                    newPaths = [];
                    hadParentSelector = replaceParentSelector(newPaths, context, selector);
                    if (!hadParentSelector) {
                        if (context.length > 0) {
                            newPaths = [];
                            for (i = 0; i < context.length; i++) {
                                var concatenated = context[i].map(deriveSelector.bind(this, selector.visibilityInfo()));
                                concatenated.push(selector);
                                newPaths.push(concatenated);
                            }
                        } else {
                            newPaths = [[selector]];
                        }
                    }
                    for (i = 0; i < newPaths.length; i++) {
                        paths.push(newPaths[i]);
                    }
                };
                module.exports = Ruleset;
            },
            {
                '../contexts': 11,
                '../functions/default': 20,
                '../functions/function-registry': 22,
                './debug-info': 54,
                './element': 58,
                './node': 70,
                './paren': 72,
                './rule': 74,
                './selector': 77
            }
        ],
        77: [
            function (require, module, exports) {
                var Node = require('./node'), Element = require('./element');
                var Selector = function (elements, extendList, condition, index, currentFileInfo, visibilityInfo) {
                    this.elements = elements;
                    this.extendList = extendList;
                    this.condition = condition;
                    this.currentFileInfo = currentFileInfo || {};
                    if (!condition) {
                        this.evaldCondition = true;
                    }
                    this.copyVisibilityInfo(visibilityInfo);
                };
                Selector.prototype = new Node();
                Selector.prototype.type = 'Selector';
                Selector.prototype.accept = function (visitor) {
                    if (this.elements) {
                        this.elements = visitor.visitArray(this.elements);
                    }
                    if (this.extendList) {
                        this.extendList = visitor.visitArray(this.extendList);
                    }
                    if (this.condition) {
                        this.condition = visitor.visit(this.condition);
                    }
                };
                Selector.prototype.createDerived = function (elements, extendList, evaldCondition) {
                    var info = this.visibilityInfo();
                    evaldCondition = evaldCondition != null ? evaldCondition : this.evaldCondition;
                    var newSelector = new Selector(elements, extendList || this.extendList, null, this.index, this.currentFileInfo, info);
                    newSelector.evaldCondition = evaldCondition;
                    newSelector.mediaEmpty = this.mediaEmpty;
                    return newSelector;
                };
                Selector.prototype.createEmptySelectors = function () {
                    var el = new Element('', '&', this.index, this.currentFileInfo), sels = [new Selector([el], null, null, this.index, this.currentFileInfo)];
                    sels[0].mediaEmpty = true;
                    return sels;
                };
                Selector.prototype.match = function (other) {
                    var elements = this.elements, len = elements.length, olen, i;
                    other.CacheElements();
                    olen = other._elements.length;
                    if (olen === 0 || len < olen) {
                        return 0;
                    } else {
                        for (i = 0; i < olen; i++) {
                            if (elements[i].value !== other._elements[i]) {
                                return 0;
                            }
                        }
                    }
                    return olen;
                };
                Selector.prototype.CacheElements = function () {
                    if (this._elements) {
                        return;
                    }
                    var elements = this.elements.map(function (v) {
                        return v.combinator.value + (v.value.value || v.value);
                    }).join('').match(/[,&#\*\.\w-]([\w-]|(\\.))*/g);
                    if (elements) {
                        if (elements[0] === '&') {
                            elements.shift();
                        }
                    } else {
                        elements = [];
                    }
                    this._elements = elements;
                };
                Selector.prototype.isJustParentSelector = function () {
                    return !this.mediaEmpty && this.elements.length === 1 && this.elements[0].value === '&' && (this.elements[0].combinator.value === ' ' || this.elements[0].combinator.value === '');
                };
                Selector.prototype.eval = function (context) {
                    var evaldCondition = this.condition && this.condition.eval(context), elements = this.elements, extendList = this.extendList;
                    elements = elements && elements.map(function (e) {
                        return e.eval(context);
                    });
                    extendList = extendList && extendList.map(function (extend) {
                        return extend.eval(context);
                    });
                    return this.createDerived(elements, extendList, evaldCondition);
                };
                Selector.prototype.genCSS = function (context, output) {
                    var i, element;
                    if ((!context || !context.firstSelector) && this.elements[0].combinator.value === '') {
                        output.add(' ', this.currentFileInfo, this.index);
                    }
                    if (!this._css) {
                        for (i = 0; i < this.elements.length; i++) {
                            element = this.elements[i];
                            element.genCSS(context, output);
                        }
                    }
                };
                Selector.prototype.getIsOutput = function () {
                    return this.evaldCondition;
                };
                module.exports = Selector;
            },
            {
                './element': 58,
                './node': 70
            }
        ],
        78: [
            function (require, module, exports) {
                var Node = require('./node');
                var UnicodeDescriptor = function (value) {
                    this.value = value;
                };
                UnicodeDescriptor.prototype = new Node();
                UnicodeDescriptor.prototype.type = 'UnicodeDescriptor';
                module.exports = UnicodeDescriptor;
            },
            { './node': 70 }
        ],
        79: [
            function (require, module, exports) {
                var Node = require('./node'), unitConversions = require('../data/unit-conversions');
                var Unit = function (numerator, denominator, backupUnit) {
                    this.numerator = numerator ? numerator.slice(0).sort() : [];
                    this.denominator = denominator ? denominator.slice(0).sort() : [];
                    if (backupUnit) {
                        this.backupUnit = backupUnit;
                    } else if (numerator && numerator.length) {
                        this.backupUnit = numerator[0];
                    }
                };
                Unit.prototype = new Node();
                Unit.prototype.type = 'Unit';
                Unit.prototype.clone = function () {
                    return new Unit(this.numerator.slice(0), this.denominator.slice(0), this.backupUnit);
                };
                Unit.prototype.genCSS = function (context, output) {
                    var strictUnits = context && context.strictUnits;
                    if (this.numerator.length === 1) {
                        output.add(this.numerator[0]);
                    } else if (!strictUnits && this.backupUnit) {
                        output.add(this.backupUnit);
                    } else if (!strictUnits && this.denominator.length) {
                        output.add(this.denominator[0]);
                    }
                };
                Unit.prototype.toString = function () {
                    var i, returnStr = this.numerator.join('*');
                    for (i = 0; i < this.denominator.length; i++) {
                        returnStr += '/' + this.denominator[i];
                    }
                    return returnStr;
                };
                Unit.prototype.compare = function (other) {
                    return this.is(other.toString()) ? 0 : undefined;
                };
                Unit.prototype.is = function (unitString) {
                    return this.toString().toUpperCase() === unitString.toUpperCase();
                };
                Unit.prototype.isLength = function () {
                    return Boolean(this.toCSS().match(/px|em|%|in|cm|mm|pc|pt|ex/));
                };
                Unit.prototype.isEmpty = function () {
                    return this.numerator.length === 0 && this.denominator.length === 0;
                };
                Unit.prototype.isSingular = function () {
                    return this.numerator.length <= 1 && this.denominator.length === 0;
                };
                Unit.prototype.map = function (callback) {
                    var i;
                    for (i = 0; i < this.numerator.length; i++) {
                        this.numerator[i] = callback(this.numerator[i], false);
                    }
                    for (i = 0; i < this.denominator.length; i++) {
                        this.denominator[i] = callback(this.denominator[i], true);
                    }
                };
                Unit.prototype.usedUnits = function () {
                    var group, result = {}, mapUnit;
                    mapUnit = function (atomicUnit) {
                        if (group.hasOwnProperty(atomicUnit) && !result[groupName]) {
                            result[groupName] = atomicUnit;
                        }
                        return atomicUnit;
                    };
                    for (var groupName in unitConversions) {
                        if (unitConversions.hasOwnProperty(groupName)) {
                            group = unitConversions[groupName];
                            this.map(mapUnit);
                        }
                    }
                    return result;
                };
                Unit.prototype.cancel = function () {
                    var counter = {}, atomicUnit, i;
                    for (i = 0; i < this.numerator.length; i++) {
                        atomicUnit = this.numerator[i];
                        counter[atomicUnit] = (counter[atomicUnit] || 0) + 1;
                    }
                    for (i = 0; i < this.denominator.length; i++) {
                        atomicUnit = this.denominator[i];
                        counter[atomicUnit] = (counter[atomicUnit] || 0) - 1;
                    }
                    this.numerator = [];
                    this.denominator = [];
                    for (atomicUnit in counter) {
                        if (counter.hasOwnProperty(atomicUnit)) {
                            var count = counter[atomicUnit];
                            if (count > 0) {
                                for (i = 0; i < count; i++) {
                                    this.numerator.push(atomicUnit);
                                }
                            } else if (count < 0) {
                                for (i = 0; i < -count; i++) {
                                    this.denominator.push(atomicUnit);
                                }
                            }
                        }
                    }
                    this.numerator.sort();
                    this.denominator.sort();
                };
                module.exports = Unit;
            },
            {
                '../data/unit-conversions': 14,
                './node': 70
            }
        ],
        80: [
            function (require, module, exports) {
                var Node = require('./node');
                var URL = function (val, index, currentFileInfo, isEvald) {
                    this.value = val;
                    this.currentFileInfo = currentFileInfo;
                    this.index = index;
                    this.isEvald = isEvald;
                };
                URL.prototype = new Node();
                URL.prototype.type = 'Url';
                URL.prototype.accept = function (visitor) {
                    this.value = visitor.visit(this.value);
                };
                URL.prototype.genCSS = function (context, output) {
                    output.add('url(');
                    this.value.genCSS(context, output);
                    output.add(')');
                };
                URL.prototype.eval = function (context) {
                    var val = this.value.eval(context), rootpath;
                    if (!this.isEvald) {
                        rootpath = this.currentFileInfo && this.currentFileInfo.rootpath;
                        if (rootpath && typeof val.value === 'string' && context.isPathRelative(val.value)) {
                            if (!val.quote) {
                                rootpath = rootpath.replace(/[\(\)'"\s]/g, function (match) {
                                    return '\\' + match;
                                });
                            }
                            val.value = rootpath + val.value;
                        }
                        val.value = context.normalizePath(val.value);
                        if (context.urlArgs) {
                            if (!val.value.match(/^\s*data:/)) {
                                var delimiter = val.value.indexOf('?') === -1 ? '?' : '&';
                                var urlArgs = delimiter + context.urlArgs;
                                if (val.value.indexOf('#') !== -1) {
                                    val.value = val.value.replace('#', urlArgs + '#');
                                } else {
                                    val.value += urlArgs;
                                }
                            }
                        }
                    }
                    return new URL(val, this.index, this.currentFileInfo, true);
                };
                module.exports = URL;
            },
            { './node': 70 }
        ],
        81: [
            function (require, module, exports) {
                var Node = require('./node');
                var Value = function (value) {
                    this.value = value;
                    if (!value) {
                        throw new Error('Value requires an array argument');
                    }
                };
                Value.prototype = new Node();
                Value.prototype.type = 'Value';
                Value.prototype.accept = function (visitor) {
                    if (this.value) {
                        this.value = visitor.visitArray(this.value);
                    }
                };
                Value.prototype.eval = function (context) {
                    if (this.value.length === 1) {
                        return this.value[0].eval(context);
                    } else {
                        return new Value(this.value.map(function (v) {
                            return v.eval(context);
                        }));
                    }
                };
                Value.prototype.genCSS = function (context, output) {
                    var i;
                    for (i = 0; i < this.value.length; i++) {
                        this.value[i].genCSS(context, output);
                        if (i + 1 < this.value.length) {
                            output.add(context && context.compress ? ',' : ', ');
                        }
                    }
                };
                module.exports = Value;
            },
            { './node': 70 }
        ],
        82: [
            function (require, module, exports) {
                var Node = require('./node');
                var Variable = function (name, index, currentFileInfo) {
                    this.name = name;
                    this.index = index;
                    this.currentFileInfo = currentFileInfo || {};
                };
                Variable.prototype = new Node();
                Variable.prototype.type = 'Variable';
                Variable.prototype.eval = function (context) {
                    var variable, name = this.name;
                    if (name.indexOf('@@') === 0) {
                        name = '@' + new Variable(name.slice(1), this.index, this.currentFileInfo).eval(context).value;
                    }
                    if (this.evaluating) {
                        throw {
                            type: 'Name',
                            message: 'Recursive variable definition for ' + name,
                            filename: this.currentFileInfo.filename,
                            index: this.index
                        };
                    }
                    this.evaluating = true;
                    variable = this.find(context.frames, function (frame) {
                        var v = frame.variable(name);
                        if (v) {
                            if (v.important) {
                                var importantScope = context.importantScope[context.importantScope.length - 1];
                                importantScope.important = v.important;
                            }
                            return v.value.eval(context);
                        }
                    });
                    if (variable) {
                        this.evaluating = false;
                        return variable;
                    } else {
                        throw {
                            type: 'Name',
                            message: 'variable ' + name + ' is undefined',
                            filename: this.currentFileInfo.filename,
                            index: this.index
                        };
                    }
                };
                Variable.prototype.find = function (obj, fun) {
                    for (var i = 0, r; i < obj.length; i++) {
                        r = fun.call(obj, obj[i]);
                        if (r) {
                            return r;
                        }
                    }
                    return null;
                };
                module.exports = Variable;
            },
            { './node': 70 }
        ],
        83: [
            function (require, module, exports) {
                module.exports = {
                    getLocation: function (index, inputStream) {
                        var n = index + 1, line = null, column = -1;
                        while (--n >= 0 && inputStream.charAt(n) !== '\n') {
                            column++;
                        }
                        if (typeof index === 'number') {
                            line = (inputStream.slice(0, index).match(/\n/g) || '').length;
                        }
                        return {
                            line: line,
                            column: column
                        };
                    }
                };
            },
            {}
        ],
        84: [
            function (require, module, exports) {
                var tree = require('../tree'), Visitor = require('./visitor'), logger = require('../logger');
                var ExtendFinderVisitor = function () {
                    this._visitor = new Visitor(this);
                    this.contexts = [];
                    this.allExtendsStack = [[]];
                };
                ExtendFinderVisitor.prototype = {
                    run: function (root) {
                        root = this._visitor.visit(root);
                        root.allExtends = this.allExtendsStack[0];
                        return root;
                    },
                    visitRule: function (ruleNode, visitArgs) {
                        visitArgs.visitDeeper = false;
                    },
                    visitMixinDefinition: function (mixinDefinitionNode, visitArgs) {
                        visitArgs.visitDeeper = false;
                    },
                    visitRuleset: function (rulesetNode, visitArgs) {
                        if (rulesetNode.root) {
                            return;
                        }
                        var i, j, extend, allSelectorsExtendList = [], extendList;
                        var rules = rulesetNode.rules, ruleCnt = rules ? rules.length : 0;
                        for (i = 0; i < ruleCnt; i++) {
                            if (rulesetNode.rules[i] instanceof tree.Extend) {
                                allSelectorsExtendList.push(rules[i]);
                                rulesetNode.extendOnEveryPath = true;
                            }
                        }
                        var paths = rulesetNode.paths;
                        for (i = 0; i < paths.length; i++) {
                            var selectorPath = paths[i], selector = selectorPath[selectorPath.length - 1], selExtendList = selector.extendList;
                            extendList = selExtendList ? selExtendList.slice(0).concat(allSelectorsExtendList) : allSelectorsExtendList;
                            if (extendList) {
                                extendList = extendList.map(function (allSelectorsExtend) {
                                    return allSelectorsExtend.clone();
                                });
                            }
                            for (j = 0; j < extendList.length; j++) {
                                this.foundExtends = true;
                                extend = extendList[j];
                                extend.findSelfSelectors(selectorPath);
                                extend.ruleset = rulesetNode;
                                if (j === 0) {
                                    extend.firstExtendOnThisSelectorPath = true;
                                }
                                this.allExtendsStack[this.allExtendsStack.length - 1].push(extend);
                            }
                        }
                        this.contexts.push(rulesetNode.selectors);
                    },
                    visitRulesetOut: function (rulesetNode) {
                        if (!rulesetNode.root) {
                            this.contexts.length = this.contexts.length - 1;
                        }
                    },
                    visitMedia: function (mediaNode, visitArgs) {
                        mediaNode.allExtends = [];
                        this.allExtendsStack.push(mediaNode.allExtends);
                    },
                    visitMediaOut: function (mediaNode) {
                        this.allExtendsStack.length = this.allExtendsStack.length - 1;
                    },
                    visitDirective: function (directiveNode, visitArgs) {
                        directiveNode.allExtends = [];
                        this.allExtendsStack.push(directiveNode.allExtends);
                    },
                    visitDirectiveOut: function (directiveNode) {
                        this.allExtendsStack.length = this.allExtendsStack.length - 1;
                    }
                };
                var ProcessExtendsVisitor = function () {
                    this._visitor = new Visitor(this);
                };
                ProcessExtendsVisitor.prototype = {
                    run: function (root) {
                        var extendFinder = new ExtendFinderVisitor();
                        this.extendIndicies = {};
                        extendFinder.run(root);
                        if (!extendFinder.foundExtends) {
                            return root;
                        }
                        root.allExtends = root.allExtends.concat(this.doExtendChaining(root.allExtends, root.allExtends));
                        this.allExtendsStack = [root.allExtends];
                        var newRoot = this._visitor.visit(root);
                        this.checkExtendsForNonMatched(root.allExtends);
                        return newRoot;
                    },
                    checkExtendsForNonMatched: function (extendList) {
                        var indicies = this.extendIndicies;
                        extendList.filter(function (extend) {
                            return !extend.hasFoundMatches && extend.parent_ids.length == 1;
                        }).forEach(function (extend) {
                            var selector = '_unknown_';
                            try {
                                selector = extend.selector.toCSS({});
                            } catch (_) {
                            }
                            if (!indicies[extend.index + ' ' + selector]) {
                                indicies[extend.index + ' ' + selector] = true;
                                logger.warn('extend \'' + selector + '\' has no matches');
                            }
                        });
                    },
                    doExtendChaining: function (extendsList, extendsListTarget, iterationCount) {
                        var extendIndex, targetExtendIndex, matches, extendsToAdd = [], newSelector, extendVisitor = this, selectorPath, extend, targetExtend, newExtend;
                        iterationCount = iterationCount || 0;
                        for (extendIndex = 0; extendIndex < extendsList.length; extendIndex++) {
                            for (targetExtendIndex = 0; targetExtendIndex < extendsListTarget.length; targetExtendIndex++) {
                                extend = extendsList[extendIndex];
                                targetExtend = extendsListTarget[targetExtendIndex];
                                if (extend.parent_ids.indexOf(targetExtend.object_id) >= 0) {
                                    continue;
                                }
                                selectorPath = [targetExtend.selfSelectors[0]];
                                matches = extendVisitor.findMatch(extend, selectorPath);
                                if (matches.length) {
                                    extend.hasFoundMatches = true;
                                    extend.selfSelectors.forEach(function (selfSelector) {
                                        var info = targetExtend.visibilityInfo();
                                        newSelector = extendVisitor.extendSelector(matches, selectorPath, selfSelector, extend.isVisible());
                                        newExtend = new tree.Extend(targetExtend.selector, targetExtend.option, 0, targetExtend.currentFileInfo, info);
                                        newExtend.selfSelectors = newSelector;
                                        newSelector[newSelector.length - 1].extendList = [newExtend];
                                        extendsToAdd.push(newExtend);
                                        newExtend.ruleset = targetExtend.ruleset;
                                        newExtend.parent_ids = newExtend.parent_ids.concat(targetExtend.parent_ids, extend.parent_ids);
                                        if (targetExtend.firstExtendOnThisSelectorPath) {
                                            newExtend.firstExtendOnThisSelectorPath = true;
                                            targetExtend.ruleset.paths.push(newSelector);
                                        }
                                    });
                                }
                            }
                        }
                        if (extendsToAdd.length) {
                            this.extendChainCount++;
                            if (iterationCount > 100) {
                                var selectorOne = '{unable to calculate}';
                                var selectorTwo = '{unable to calculate}';
                                try {
                                    selectorOne = extendsToAdd[0].selfSelectors[0].toCSS();
                                    selectorTwo = extendsToAdd[0].selector.toCSS();
                                } catch (e) {
                                }
                                throw { message: 'extend circular reference detected. One of the circular extends is currently:' + selectorOne + ':extend(' + selectorTwo + ')' };
                            }
                            return extendsToAdd.concat(extendVisitor.doExtendChaining(extendsToAdd, extendsListTarget, iterationCount + 1));
                        } else {
                            return extendsToAdd;
                        }
                    },
                    visitRule: function (ruleNode, visitArgs) {
                        visitArgs.visitDeeper = false;
                    },
                    visitMixinDefinition: function (mixinDefinitionNode, visitArgs) {
                        visitArgs.visitDeeper = false;
                    },
                    visitSelector: function (selectorNode, visitArgs) {
                        visitArgs.visitDeeper = false;
                    },
                    visitRuleset: function (rulesetNode, visitArgs) {
                        if (rulesetNode.root) {
                            return;
                        }
                        var matches, pathIndex, extendIndex, allExtends = this.allExtendsStack[this.allExtendsStack.length - 1], selectorsToAdd = [], extendVisitor = this, selectorPath;
                        for (extendIndex = 0; extendIndex < allExtends.length; extendIndex++) {
                            for (pathIndex = 0; pathIndex < rulesetNode.paths.length; pathIndex++) {
                                selectorPath = rulesetNode.paths[pathIndex];
                                if (rulesetNode.extendOnEveryPath) {
                                    continue;
                                }
                                var extendList = selectorPath[selectorPath.length - 1].extendList;
                                if (extendList && extendList.length) {
                                    continue;
                                }
                                matches = this.findMatch(allExtends[extendIndex], selectorPath);
                                if (matches.length) {
                                    allExtends[extendIndex].hasFoundMatches = true;
                                    allExtends[extendIndex].selfSelectors.forEach(function (selfSelector) {
                                        var extendedSelectors;
                                        extendedSelectors = extendVisitor.extendSelector(matches, selectorPath, selfSelector, allExtends[extendIndex].isVisible());
                                        selectorsToAdd.push(extendedSelectors);
                                    });
                                }
                            }
                        }
                        rulesetNode.paths = rulesetNode.paths.concat(selectorsToAdd);
                    },
                    findMatch: function (extend, haystackSelectorPath) {
                        var haystackSelectorIndex, hackstackSelector, hackstackElementIndex, haystackElement, targetCombinator, i, extendVisitor = this, needleElements = extend.selector.elements, potentialMatches = [], potentialMatch, matches = [];
                        for (haystackSelectorIndex = 0; haystackSelectorIndex < haystackSelectorPath.length; haystackSelectorIndex++) {
                            hackstackSelector = haystackSelectorPath[haystackSelectorIndex];
                            for (hackstackElementIndex = 0; hackstackElementIndex < hackstackSelector.elements.length; hackstackElementIndex++) {
                                haystackElement = hackstackSelector.elements[hackstackElementIndex];
                                if (extend.allowBefore || haystackSelectorIndex === 0 && hackstackElementIndex === 0) {
                                    potentialMatches.push({
                                        pathIndex: haystackSelectorIndex,
                                        index: hackstackElementIndex,
                                        matched: 0,
                                        initialCombinator: haystackElement.combinator
                                    });
                                }
                                for (i = 0; i < potentialMatches.length; i++) {
                                    potentialMatch = potentialMatches[i];
                                    targetCombinator = haystackElement.combinator.value;
                                    if (targetCombinator === '' && hackstackElementIndex === 0) {
                                        targetCombinator = ' ';
                                    }
                                    if (!extendVisitor.isElementValuesEqual(needleElements[potentialMatch.matched].value, haystackElement.value) || potentialMatch.matched > 0 && needleElements[potentialMatch.matched].combinator.value !== targetCombinator) {
                                        potentialMatch = null;
                                    } else {
                                        potentialMatch.matched++;
                                    }
                                    if (potentialMatch) {
                                        potentialMatch.finished = potentialMatch.matched === needleElements.length;
                                        if (potentialMatch.finished && (!extend.allowAfter && (hackstackElementIndex + 1 < hackstackSelector.elements.length || haystackSelectorIndex + 1 < haystackSelectorPath.length))) {
                                            potentialMatch = null;
                                        }
                                    }
                                    if (potentialMatch) {
                                        if (potentialMatch.finished) {
                                            potentialMatch.length = needleElements.length;
                                            potentialMatch.endPathIndex = haystackSelectorIndex;
                                            potentialMatch.endPathElementIndex = hackstackElementIndex + 1;
                                            potentialMatches.length = 0;
                                            matches.push(potentialMatch);
                                        }
                                    } else {
                                        potentialMatches.splice(i, 1);
                                        i--;
                                    }
                                }
                            }
                        }
                        return matches;
                    },
                    isElementValuesEqual: function (elementValue1, elementValue2) {
                        if (typeof elementValue1 === 'string' || typeof elementValue2 === 'string') {
                            return elementValue1 === elementValue2;
                        }
                        if (elementValue1 instanceof tree.Attribute) {
                            if (elementValue1.op !== elementValue2.op || elementValue1.key !== elementValue2.key) {
                                return false;
                            }
                            if (!elementValue1.value || !elementValue2.value) {
                                if (elementValue1.value || elementValue2.value) {
                                    return false;
                                }
                                return true;
                            }
                            elementValue1 = elementValue1.value.value || elementValue1.value;
                            elementValue2 = elementValue2.value.value || elementValue2.value;
                            return elementValue1 === elementValue2;
                        }
                        elementValue1 = elementValue1.value;
                        elementValue2 = elementValue2.value;
                        if (elementValue1 instanceof tree.Selector) {
                            if (!(elementValue2 instanceof tree.Selector) || elementValue1.elements.length !== elementValue2.elements.length) {
                                return false;
                            }
                            for (var i = 0; i < elementValue1.elements.length; i++) {
                                if (elementValue1.elements[i].combinator.value !== elementValue2.elements[i].combinator.value) {
                                    if (i !== 0 || (elementValue1.elements[i].combinator.value || ' ') !== (elementValue2.elements[i].combinator.value || ' ')) {
                                        return false;
                                    }
                                }
                                if (!this.isElementValuesEqual(elementValue1.elements[i].value, elementValue2.elements[i].value)) {
                                    return false;
                                }
                            }
                            return true;
                        }
                        return false;
                    },
                    extendSelector: function (matches, selectorPath, replacementSelector, isVisible) {
                        var currentSelectorPathIndex = 0, currentSelectorPathElementIndex = 0, path = [], matchIndex, selector, firstElement, match, newElements;
                        for (matchIndex = 0; matchIndex < matches.length; matchIndex++) {
                            match = matches[matchIndex];
                            selector = selectorPath[match.pathIndex];
                            firstElement = new tree.Element(match.initialCombinator, replacementSelector.elements[0].value, replacementSelector.elements[0].index, replacementSelector.elements[0].currentFileInfo);
                            if (match.pathIndex > currentSelectorPathIndex && currentSelectorPathElementIndex > 0) {
                                path[path.length - 1].elements = path[path.length - 1].elements.concat(selectorPath[currentSelectorPathIndex].elements.slice(currentSelectorPathElementIndex));
                                currentSelectorPathElementIndex = 0;
                                currentSelectorPathIndex++;
                            }
                            newElements = selector.elements.slice(currentSelectorPathElementIndex, match.index).concat([firstElement]).concat(replacementSelector.elements.slice(1));
                            if (currentSelectorPathIndex === match.pathIndex && matchIndex > 0) {
                                path[path.length - 1].elements = path[path.length - 1].elements.concat(newElements);
                            } else {
                                path = path.concat(selectorPath.slice(currentSelectorPathIndex, match.pathIndex));
                                path.push(new tree.Selector(newElements));
                            }
                            currentSelectorPathIndex = match.endPathIndex;
                            currentSelectorPathElementIndex = match.endPathElementIndex;
                            if (currentSelectorPathElementIndex >= selectorPath[currentSelectorPathIndex].elements.length) {
                                currentSelectorPathElementIndex = 0;
                                currentSelectorPathIndex++;
                            }
                        }
                        if (currentSelectorPathIndex < selectorPath.length && currentSelectorPathElementIndex > 0) {
                            path[path.length - 1].elements = path[path.length - 1].elements.concat(selectorPath[currentSelectorPathIndex].elements.slice(currentSelectorPathElementIndex));
                            currentSelectorPathIndex++;
                        }
                        path = path.concat(selectorPath.slice(currentSelectorPathIndex, selectorPath.length));
                        path = path.map(function (currentValue) {
                            var derived = currentValue.createDerived(currentValue.elements);
                            if (isVisible) {
                                derived.ensureVisibility();
                            } else {
                                derived.ensureInvisibility();
                            }
                            return derived;
                        });
                        return path;
                    },
                    visitMedia: function (mediaNode, visitArgs) {
                        var newAllExtends = mediaNode.allExtends.concat(this.allExtendsStack[this.allExtendsStack.length - 1]);
                        newAllExtends = newAllExtends.concat(this.doExtendChaining(newAllExtends, mediaNode.allExtends));
                        this.allExtendsStack.push(newAllExtends);
                    },
                    visitMediaOut: function (mediaNode) {
                        var lastIndex = this.allExtendsStack.length - 1;
                        this.allExtendsStack.length = lastIndex;
                    },
                    visitDirective: function (directiveNode, visitArgs) {
                        var newAllExtends = directiveNode.allExtends.concat(this.allExtendsStack[this.allExtendsStack.length - 1]);
                        newAllExtends = newAllExtends.concat(this.doExtendChaining(newAllExtends, directiveNode.allExtends));
                        this.allExtendsStack.push(newAllExtends);
                    },
                    visitDirectiveOut: function (directiveNode) {
                        var lastIndex = this.allExtendsStack.length - 1;
                        this.allExtendsStack.length = lastIndex;
                    }
                };
                module.exports = ProcessExtendsVisitor;
            },
            {
                '../logger': 33,
                '../tree': 62,
                './visitor': 91
            }
        ],
        85: [
            function (require, module, exports) {
                function ImportSequencer(onSequencerEmpty) {
                    this.imports = [];
                    this.variableImports = [];
                    this._onSequencerEmpty = onSequencerEmpty;
                    this._currentDepth = 0;
                }
                ImportSequencer.prototype.addImport = function (callback) {
                    var importSequencer = this, importItem = {
                            callback: callback,
                            args: null,
                            isReady: false
                        };
                    this.imports.push(importItem);
                    return function () {
                        importItem.args = Array.prototype.slice.call(arguments, 0);
                        importItem.isReady = true;
                        importSequencer.tryRun();
                    };
                };
                ImportSequencer.prototype.addVariableImport = function (callback) {
                    this.variableImports.push(callback);
                };
                ImportSequencer.prototype.tryRun = function () {
                    this._currentDepth++;
                    try {
                        while (true) {
                            while (this.imports.length > 0) {
                                var importItem = this.imports[0];
                                if (!importItem.isReady) {
                                    return;
                                }
                                this.imports = this.imports.slice(1);
                                importItem.callback.apply(null, importItem.args);
                            }
                            if (this.variableImports.length === 0) {
                                break;
                            }
                            var variableImport = this.variableImports[0];
                            this.variableImports = this.variableImports.slice(1);
                            variableImport();
                        }
                    } finally {
                        this._currentDepth--;
                    }
                    if (this._currentDepth === 0 && this._onSequencerEmpty) {
                        this._onSequencerEmpty();
                    }
                };
                module.exports = ImportSequencer;
            },
            {}
        ],
        86: [
            function (require, module, exports) {
                var contexts = require('../contexts'), Visitor = require('./visitor'), ImportSequencer = require('./import-sequencer');
                var ImportVisitor = function (importer, finish) {
                    this._visitor = new Visitor(this);
                    this._importer = importer;
                    this._finish = finish;
                    this.context = new contexts.Eval();
                    this.importCount = 0;
                    this.onceFileDetectionMap = {};
                    this.recursionDetector = {};
                    this._sequencer = new ImportSequencer(this._onSequencerEmpty.bind(this));
                };
                ImportVisitor.prototype = {
                    isReplacing: false,
                    run: function (root) {
                        try {
                            this._visitor.visit(root);
                        } catch (e) {
                            this.error = e;
                        }
                        this.isFinished = true;
                        this._sequencer.tryRun();
                    },
                    _onSequencerEmpty: function () {
                        if (!this.isFinished) {
                            return;
                        }
                        this._finish(this.error);
                    },
                    visitImport: function (importNode, visitArgs) {
                        var inlineCSS = importNode.options.inline;
                        if (!importNode.css || inlineCSS) {
                            var context = new contexts.Eval(this.context, this.context.frames.slice(0));
                            var importParent = context.frames[0];
                            this.importCount++;
                            if (importNode.isVariableImport()) {
                                this._sequencer.addVariableImport(this.processImportNode.bind(this, importNode, context, importParent));
                            } else {
                                this.processImportNode(importNode, context, importParent);
                            }
                        }
                        visitArgs.visitDeeper = false;
                    },
                    processImportNode: function (importNode, context, importParent) {
                        var evaldImportNode, inlineCSS = importNode.options.inline;
                        try {
                            evaldImportNode = importNode.evalForImport(context);
                        } catch (e) {
                            if (!e.filename) {
                                e.index = importNode.index;
                                e.filename = importNode.currentFileInfo.filename;
                            }
                            importNode.css = true;
                            importNode.error = e;
                        }
                        if (evaldImportNode && (!evaldImportNode.css || inlineCSS)) {
                            if (evaldImportNode.options.multiple) {
                                context.importMultiple = true;
                            }
                            var tryAppendLessExtension = evaldImportNode.css === undefined;
                            for (var i = 0; i < importParent.rules.length; i++) {
                                if (importParent.rules[i] === importNode) {
                                    importParent.rules[i] = evaldImportNode;
                                    break;
                                }
                            }
                            var onImported = this.onImported.bind(this, evaldImportNode, context), sequencedOnImported = this._sequencer.addImport(onImported);
                            this._importer.push(evaldImportNode.getPath(), tryAppendLessExtension, evaldImportNode.currentFileInfo, evaldImportNode.options, sequencedOnImported);
                        } else {
                            this.importCount--;
                            if (this.isFinished) {
                                this._sequencer.tryRun();
                            }
                        }
                    },
                    onImported: function (importNode, context, e, root, importedAtRoot, fullPath) {
                        if (e) {
                            if (!e.filename) {
                                e.index = importNode.index;
                                e.filename = importNode.currentFileInfo.filename;
                            }
                            this.error = e;
                        }
                        var importVisitor = this, inlineCSS = importNode.options.inline, isPlugin = importNode.options.plugin, isOptional = importNode.options.optional, duplicateImport = importedAtRoot || fullPath in importVisitor.recursionDetector;
                        if (!context.importMultiple) {
                            if (duplicateImport) {
                                importNode.skip = true;
                            } else {
                                importNode.skip = function () {
                                    if (fullPath in importVisitor.onceFileDetectionMap) {
                                        return true;
                                    }
                                    importVisitor.onceFileDetectionMap[fullPath] = true;
                                    return false;
                                };
                            }
                        }
                        if (!fullPath && isOptional) {
                            importNode.skip = true;
                        }
                        if (root) {
                            importNode.root = root;
                            importNode.importedFilename = fullPath;
                            if (!inlineCSS && !isPlugin && (context.importMultiple || !duplicateImport)) {
                                importVisitor.recursionDetector[fullPath] = true;
                                var oldContext = this.context;
                                this.context = context;
                                try {
                                    this._visitor.visit(root);
                                } catch (e) {
                                    this.error = e;
                                }
                                this.context = oldContext;
                            }
                        }
                        importVisitor.importCount--;
                        if (importVisitor.isFinished) {
                            importVisitor._sequencer.tryRun();
                        }
                    },
                    visitRule: function (ruleNode, visitArgs) {
                        if (ruleNode.value.type === 'DetachedRuleset') {
                            this.context.frames.unshift(ruleNode);
                        } else {
                            visitArgs.visitDeeper = false;
                        }
                    },
                    visitRuleOut: function (ruleNode) {
                        if (ruleNode.value.type === 'DetachedRuleset') {
                            this.context.frames.shift();
                        }
                    },
                    visitDirective: function (directiveNode, visitArgs) {
                        this.context.frames.unshift(directiveNode);
                    },
                    visitDirectiveOut: function (directiveNode) {
                        this.context.frames.shift();
                    },
                    visitMixinDefinition: function (mixinDefinitionNode, visitArgs) {
                        this.context.frames.unshift(mixinDefinitionNode);
                    },
                    visitMixinDefinitionOut: function (mixinDefinitionNode) {
                        this.context.frames.shift();
                    },
                    visitRuleset: function (rulesetNode, visitArgs) {
                        this.context.frames.unshift(rulesetNode);
                    },
                    visitRulesetOut: function (rulesetNode) {
                        this.context.frames.shift();
                    },
                    visitMedia: function (mediaNode, visitArgs) {
                        this.context.frames.unshift(mediaNode.rules[0]);
                    },
                    visitMediaOut: function (mediaNode) {
                        this.context.frames.shift();
                    }
                };
                module.exports = ImportVisitor;
            },
            {
                '../contexts': 11,
                './import-sequencer': 85,
                './visitor': 91
            }
        ],
        87: [
            function (require, module, exports) {
                var visitors = {
                    Visitor: require('./visitor'),
                    ImportVisitor: require('./import-visitor'),
                    MarkVisibleSelectorsVisitor: require('./set-tree-visibility-visitor'),
                    ExtendVisitor: require('./extend-visitor'),
                    JoinSelectorVisitor: require('./join-selector-visitor'),
                    ToCSSVisitor: require('./to-css-visitor')
                };
                module.exports = visitors;
            },
            {
                './extend-visitor': 84,
                './import-visitor': 86,
                './join-selector-visitor': 88,
                './set-tree-visibility-visitor': 89,
                './to-css-visitor': 90,
                './visitor': 91
            }
        ],
        88: [
            function (require, module, exports) {
                var Visitor = require('./visitor');
                var JoinSelectorVisitor = function () {
                    this.contexts = [[]];
                    this._visitor = new Visitor(this);
                };
                JoinSelectorVisitor.prototype = {
                    run: function (root) {
                        return this._visitor.visit(root);
                    },
                    visitRule: function (ruleNode, visitArgs) {
                        visitArgs.visitDeeper = false;
                    },
                    visitMixinDefinition: function (mixinDefinitionNode, visitArgs) {
                        visitArgs.visitDeeper = false;
                    },
                    visitRuleset: function (rulesetNode, visitArgs) {
                        var context = this.contexts[this.contexts.length - 1], paths = [], selectors;
                        this.contexts.push(paths);
                        if (!rulesetNode.root) {
                            selectors = rulesetNode.selectors;
                            if (selectors) {
                                selectors = selectors.filter(function (selector) {
                                    return selector.getIsOutput();
                                });
                                rulesetNode.selectors = selectors.length ? selectors : selectors = null;
                                if (selectors) {
                                    rulesetNode.joinSelectors(paths, context, selectors);
                                }
                            }
                            if (!selectors) {
                                rulesetNode.rules = null;
                            }
                            rulesetNode.paths = paths;
                        }
                    },
                    visitRulesetOut: function (rulesetNode) {
                        this.contexts.length = this.contexts.length - 1;
                    },
                    visitMedia: function (mediaNode, visitArgs) {
                        var context = this.contexts[this.contexts.length - 1];
                        mediaNode.rules[0].root = context.length === 0 || context[0].multiMedia;
                    },
                    visitDirective: function (directiveNode, visitArgs) {
                        var context = this.contexts[this.contexts.length - 1];
                        if (directiveNode.rules && directiveNode.rules.length) {
                            directiveNode.rules[0].root = directiveNode.isRooted || context.length === 0 || null;
                        }
                    }
                };
                module.exports = JoinSelectorVisitor;
            },
            { './visitor': 91 }
        ],
        89: [
            function (require, module, exports) {
                var SetTreeVisibilityVisitor = function (visible) {
                    this.visible = visible;
                };
                SetTreeVisibilityVisitor.prototype.run = function (root) {
                    this.visit(root);
                };
                SetTreeVisibilityVisitor.prototype.visitArray = function (nodes) {
                    if (!nodes) {
                        return nodes;
                    }
                    var cnt = nodes.length, i;
                    for (i = 0; i < cnt; i++) {
                        this.visit(nodes[i]);
                    }
                    return nodes;
                };
                SetTreeVisibilityVisitor.prototype.visit = function (node) {
                    if (!node) {
                        return node;
                    }
                    if (node.constructor === Array) {
                        return this.visitArray(node);
                    }
                    if (!node.blocksVisibility || node.blocksVisibility()) {
                        return node;
                    }
                    if (this.visible) {
                        node.ensureVisibility();
                    } else {
                        node.ensureInvisibility();
                    }
                    node.accept(this);
                    return node;
                };
                module.exports = SetTreeVisibilityVisitor;
            },
            {}
        ],
        90: [
            function (require, module, exports) {
                var tree = require('../tree'), Visitor = require('./visitor');
                var CSSVisitorUtils = function (context) {
                    this._visitor = new Visitor(this);
                    this._context = context;
                };
                CSSVisitorUtils.prototype = {
                    containsSilentNonBlockedChild: function (bodyRules) {
                        var rule;
                        if (bodyRules == null) {
                            return false;
                        }
                        for (var r = 0; r < bodyRules.length; r++) {
                            rule = bodyRules[r];
                            if (rule.isSilent && rule.isSilent(this._context) && !rule.blocksVisibility()) {
                                return true;
                            }
                        }
                        return false;
                    },
                    keepOnlyVisibleChilds: function (owner) {
                        if (owner == null || owner.rules == null) {
                            return;
                        }
                        owner.rules = owner.rules.filter(function (thing) {
                            return thing.isVisible();
                        });
                    },
                    isEmpty: function (owner) {
                        if (owner == null || owner.rules == null) {
                            return true;
                        }
                        return owner.rules.length === 0;
                    },
                    hasVisibleSelector: function (rulesetNode) {
                        if (rulesetNode == null || rulesetNode.paths == null) {
                            return false;
                        }
                        return rulesetNode.paths.length > 0;
                    },
                    resolveVisibility: function (node, originalRules) {
                        if (!node.blocksVisibility()) {
                            if (this.isEmpty(node) && !this.containsSilentNonBlockedChild(originalRules)) {
                                return;
                            }
                            return node;
                        }
                        var compiledRulesBody = node.rules[0];
                        this.keepOnlyVisibleChilds(compiledRulesBody);
                        if (this.isEmpty(compiledRulesBody)) {
                            return;
                        }
                        node.ensureVisibility();
                        node.removeVisibilityBlock();
                        return node;
                    },
                    isVisibleRuleset: function (rulesetNode) {
                        if (rulesetNode.firstRoot) {
                            return true;
                        }
                        if (this.isEmpty(rulesetNode)) {
                            return false;
                        }
                        if (!rulesetNode.root && !this.hasVisibleSelector(rulesetNode)) {
                            return false;
                        }
                        return true;
                    }
                };
                var ToCSSVisitor = function (context) {
                    this._visitor = new Visitor(this);
                    this._context = context;
                    this.utils = new CSSVisitorUtils(context);
                };
                ToCSSVisitor.prototype = {
                    isReplacing: true,
                    run: function (root) {
                        return this._visitor.visit(root);
                    },
                    visitRule: function (ruleNode, visitArgs) {
                        if (ruleNode.blocksVisibility() || ruleNode.variable) {
                            return;
                        }
                        return ruleNode;
                    },
                    visitMixinDefinition: function (mixinNode, visitArgs) {
                        mixinNode.frames = [];
                    },
                    visitExtend: function (extendNode, visitArgs) {
                    },
                    visitComment: function (commentNode, visitArgs) {
                        if (commentNode.blocksVisibility() || commentNode.isSilent(this._context)) {
                            return;
                        }
                        return commentNode;
                    },
                    visitMedia: function (mediaNode, visitArgs) {
                        var originalRules = mediaNode.rules[0].rules;
                        mediaNode.accept(this._visitor);
                        visitArgs.visitDeeper = false;
                        return this.utils.resolveVisibility(mediaNode, originalRules);
                    },
                    visitImport: function (importNode, visitArgs) {
                        if (importNode.blocksVisibility()) {
                            return;
                        }
                        return importNode;
                    },
                    visitDirective: function (directiveNode, visitArgs) {
                        if (directiveNode.rules && directiveNode.rules.length) {
                            return this.visitDirectiveWithBody(directiveNode, visitArgs);
                        } else {
                            return this.visitDirectiveWithoutBody(directiveNode, visitArgs);
                        }
                        return directiveNode;
                    },
                    visitDirectiveWithBody: function (directiveNode, visitArgs) {
                        function hasFakeRuleset(directiveNode) {
                            var bodyRules = directiveNode.rules;
                            return bodyRules.length === 1 && (!bodyRules[0].paths || bodyRules[0].paths.length === 0);
                        }
                        function getBodyRules(directiveNode) {
                            var nodeRules = directiveNode.rules;
                            if (hasFakeRuleset(directiveNode)) {
                                return nodeRules[0].rules;
                            }
                            return nodeRules;
                        }
                        var originalRules = getBodyRules(directiveNode);
                        directiveNode.accept(this._visitor);
                        visitArgs.visitDeeper = false;
                        if (!this.utils.isEmpty(directiveNode)) {
                            this._mergeRules(directiveNode.rules[0].rules);
                        }
                        return this.utils.resolveVisibility(directiveNode, originalRules);
                    },
                    visitDirectiveWithoutBody: function (directiveNode, visitArgs) {
                        if (directiveNode.blocksVisibility()) {
                            return;
                        }
                        if (directiveNode.name === '@charset') {
                            if (this.charset) {
                                if (directiveNode.debugInfo) {
                                    var comment = new tree.Comment('/* ' + directiveNode.toCSS(this._context).replace(/\n/g, '') + ' */\n');
                                    comment.debugInfo = directiveNode.debugInfo;
                                    return this._visitor.visit(comment);
                                }
                                return;
                            }
                            this.charset = true;
                        }
                        return directiveNode;
                    },
                    checkPropertiesInRoot: function (rules) {
                        var ruleNode;
                        for (var i = 0; i < rules.length; i++) {
                            ruleNode = rules[i];
                            if (ruleNode instanceof tree.Rule && !ruleNode.variable) {
                                throw {
                                    message: 'properties must be inside selector blocks, they cannot be in the root.',
                                    index: ruleNode.index,
                                    filename: ruleNode.currentFileInfo ? ruleNode.currentFileInfo.filename : null
                                };
                            }
                        }
                    },
                    visitRuleset: function (rulesetNode, visitArgs) {
                        var rule, rulesets = [];
                        if (rulesetNode.firstRoot) {
                            this.checkPropertiesInRoot(rulesetNode.rules);
                        }
                        if (!rulesetNode.root) {
                            this._compileRulesetPaths(rulesetNode);
                            var nodeRules = rulesetNode.rules, nodeRuleCnt = nodeRules ? nodeRules.length : 0;
                            for (var i = 0; i < nodeRuleCnt;) {
                                rule = nodeRules[i];
                                if (rule && rule.rules) {
                                    rulesets.push(this._visitor.visit(rule));
                                    nodeRules.splice(i, 1);
                                    nodeRuleCnt--;
                                    continue;
                                }
                                i++;
                            }
                            if (nodeRuleCnt > 0) {
                                rulesetNode.accept(this._visitor);
                            } else {
                                rulesetNode.rules = null;
                            }
                            visitArgs.visitDeeper = false;
                        } else {
                            rulesetNode.accept(this._visitor);
                            visitArgs.visitDeeper = false;
                        }
                        if (rulesetNode.rules) {
                            this._mergeRules(rulesetNode.rules);
                            this._removeDuplicateRules(rulesetNode.rules);
                        }
                        if (this.utils.isVisibleRuleset(rulesetNode)) {
                            rulesetNode.ensureVisibility();
                            rulesets.splice(0, 0, rulesetNode);
                        }
                        if (rulesets.length === 1) {
                            return rulesets[0];
                        }
                        return rulesets;
                    },
                    _compileRulesetPaths: function (rulesetNode) {
                        if (rulesetNode.paths) {
                            rulesetNode.paths = rulesetNode.paths.filter(function (p) {
                                var i;
                                if (p[0].elements[0].combinator.value === ' ') {
                                    p[0].elements[0].combinator = new tree.Combinator('');
                                }
                                for (i = 0; i < p.length; i++) {
                                    if (p[i].isVisible() && p[i].getIsOutput()) {
                                        return true;
                                    }
                                }
                                return false;
                            });
                        }
                    },
                    _removeDuplicateRules: function (rules) {
                        if (!rules) {
                            return;
                        }
                        var ruleCache = {}, ruleList, rule, i;
                        for (i = rules.length - 1; i >= 0; i--) {
                            rule = rules[i];
                            if (rule instanceof tree.Rule) {
                                if (!ruleCache[rule.name]) {
                                    ruleCache[rule.name] = rule;
                                } else {
                                    ruleList = ruleCache[rule.name];
                                    if (ruleList instanceof tree.Rule) {
                                        ruleList = ruleCache[rule.name] = [ruleCache[rule.name].toCSS(this._context)];
                                    }
                                    var ruleCSS = rule.toCSS(this._context);
                                    if (ruleList.indexOf(ruleCSS) !== -1) {
                                        rules.splice(i, 1);
                                    } else {
                                        ruleList.push(ruleCSS);
                                    }
                                }
                            }
                        }
                    },
                    _mergeRules: function (rules) {
                        if (!rules) {
                            return;
                        }
                        var groups = {}, parts, rule, key;
                        for (var i = 0; i < rules.length; i++) {
                            rule = rules[i];
                            if (rule instanceof tree.Rule && rule.merge) {
                                key = [
                                    rule.name,
                                    rule.important ? '!' : ''
                                ].join(',');
                                if (!groups[key]) {
                                    groups[key] = [];
                                } else {
                                    rules.splice(i--, 1);
                                }
                                groups[key].push(rule);
                            }
                        }
                        Object.keys(groups).map(function (k) {
                            function toExpression(values) {
                                return new tree.Expression(values.map(function (p) {
                                    return p.value;
                                }));
                            }
                            function toValue(values) {
                                return new tree.Value(values.map(function (p) {
                                    return p;
                                }));
                            }
                            parts = groups[k];
                            if (parts.length > 1) {
                                rule = parts[0];
                                var spacedGroups = [];
                                var lastSpacedGroup = [];
                                parts.map(function (p) {
                                    if (p.merge === '+') {
                                        if (lastSpacedGroup.length > 0) {
                                            spacedGroups.push(toExpression(lastSpacedGroup));
                                        }
                                        lastSpacedGroup = [];
                                    }
                                    lastSpacedGroup.push(p);
                                });
                                spacedGroups.push(toExpression(lastSpacedGroup));
                                rule.value = toValue(spacedGroups);
                            }
                        });
                    },
                    visitAnonymous: function (anonymousNode, visitArgs) {
                        if (anonymousNode.blocksVisibility()) {
                            return;
                        }
                        anonymousNode.accept(this._visitor);
                        return anonymousNode;
                    }
                };
                module.exports = ToCSSVisitor;
            },
            {
                '../tree': 62,
                './visitor': 91
            }
        ],
        91: [
            function (require, module, exports) {
                var tree = require('../tree');
                var _visitArgs = { visitDeeper: true }, _hasIndexed = false;
                function _noop(node) {
                    return node;
                }
                function indexNodeTypes(parent, ticker) {
                    var key, child;
                    for (key in parent) {
                        if (parent.hasOwnProperty(key)) {
                            child = parent[key];
                            switch (typeof child) {
                            case 'function':
                                if (child.prototype && child.prototype.type) {
                                    child.prototype.typeIndex = ticker++;
                                }
                                break;
                            case 'object':
                                ticker = indexNodeTypes(child, ticker);
                                break;
                            }
                        }
                    }
                    return ticker;
                }
                var Visitor = function (implementation) {
                    this._implementation = implementation;
                    this._visitFnCache = [];
                    if (!_hasIndexed) {
                        indexNodeTypes(tree, 1);
                        _hasIndexed = true;
                    }
                };
                Visitor.prototype = {
                    visit: function (node) {
                        if (!node) {
                            return node;
                        }
                        var nodeTypeIndex = node.typeIndex;
                        if (!nodeTypeIndex) {
                            return node;
                        }
                        var visitFnCache = this._visitFnCache, impl = this._implementation, aryIndx = nodeTypeIndex << 1, outAryIndex = aryIndx | 1, func = visitFnCache[aryIndx], funcOut = visitFnCache[outAryIndex], visitArgs = _visitArgs, fnName;
                        visitArgs.visitDeeper = true;
                        if (!func) {
                            fnName = 'visit' + node.type;
                            func = impl[fnName] || _noop;
                            funcOut = impl[fnName + 'Out'] || _noop;
                            visitFnCache[aryIndx] = func;
                            visitFnCache[outAryIndex] = funcOut;
                        }
                        if (func !== _noop) {
                            var newNode = func.call(impl, node, visitArgs);
                            if (impl.isReplacing) {
                                node = newNode;
                            }
                        }
                        if (visitArgs.visitDeeper && node && node.accept) {
                            node.accept(this);
                        }
                        if (funcOut != _noop) {
                            funcOut.call(impl, node);
                        }
                        return node;
                    },
                    visitArray: function (nodes, nonReplacing) {
                        if (!nodes) {
                            return nodes;
                        }
                        var cnt = nodes.length, i;
                        if (nonReplacing || !this._implementation.isReplacing) {
                            for (i = 0; i < cnt; i++) {
                                this.visit(nodes[i]);
                            }
                            return nodes;
                        }
                        var out = [];
                        for (i = 0; i < cnt; i++) {
                            var evald = this.visit(nodes[i]);
                            if (evald === undefined) {
                                continue;
                            }
                            if (!evald.splice) {
                                out.push(evald);
                            } else if (evald.length) {
                                this.flatten(evald, out);
                            }
                        }
                        return out;
                    },
                    flatten: function (arr, out) {
                        if (!out) {
                            out = [];
                        }
                        var cnt, i, item, nestedCnt, j, nestedItem;
                        for (i = 0, cnt = arr.length; i < cnt; i++) {
                            item = arr[i];
                            if (item === undefined) {
                                continue;
                            }
                            if (!item.splice) {
                                out.push(item);
                                continue;
                            }
                            for (j = 0, nestedCnt = item.length; j < nestedCnt; j++) {
                                nestedItem = item[j];
                                if (nestedItem === undefined) {
                                    continue;
                                }
                                if (!nestedItem.splice) {
                                    out.push(nestedItem);
                                } else if (nestedItem.length) {
                                    this.flatten(nestedItem, out);
                                }
                            }
                        }
                        return out;
                    }
                };
                module.exports = Visitor;
            },
            { '../tree': 62 }
        ],
        92: [
            function (require, module, exports) {
                var process = module.exports = {};
                var queue = [];
                var draining = false;
                function drainQueue() {
                    if (draining) {
                        return;
                    }
                    draining = true;
                    var currentQueue;
                    var len = queue.length;
                    while (len) {
                        currentQueue = queue;
                        queue = [];
                        var i = -1;
                        while (++i < len) {
                            currentQueue[i]();
                        }
                        len = queue.length;
                    }
                    draining = false;
                }
                process.nextTick = function (fun) {
                    queue.push(fun);
                    if (!draining) {
                        setTimeout(drainQueue, 0);
                    }
                };
                process.title = 'browser';
                process.browser = true;
                process.env = {};
                process.argv = [];
                process.version = '';
                process.versions = {};
                function noop() {
                }
                process.on = noop;
                process.addListener = noop;
                process.once = noop;
                process.off = noop;
                process.removeListener = noop;
                process.removeAllListeners = noop;
                process.emit = noop;
                process.binding = function (name) {
                    throw new Error('process.binding is not supported');
                };
                process.cwd = function () {
                    return '/';
                };
                process.chdir = function (dir) {
                    throw new Error('process.chdir is not supported');
                };
                process.umask = function () {
                    return 0;
                };
            },
            {}
        ],
        93: [
            function (require, module, exports) {
                'use strict';
                var asap = require('asap');
                module.exports = Promise;
                function Promise(fn) {
                    if (typeof this !== 'object')
                        throw new TypeError('Promises must be constructed via new');
                    if (typeof fn !== 'function')
                        throw new TypeError('not a function');
                    var state = null;
                    var value = null;
                    var deferreds = [];
                    var self = this;
                    this.then = function (onFulfilled, onRejected) {
                        return new self.constructor(function (resolve, reject) {
                            handle(new Handler(onFulfilled, onRejected, resolve, reject));
                        });
                    };
                    function handle(deferred) {
                        if (state === null) {
                            deferreds.push(deferred);
                            return;
                        }
                        asap(function () {
                            var cb = state ? deferred.onFulfilled : deferred.onRejected;
                            if (cb === null) {
                                (state ? deferred.resolve : deferred.reject)(value);
                                return;
                            }
                            var ret;
                            try {
                                ret = cb(value);
                            } catch (e) {
                                deferred.reject(e);
                                return;
                            }
                            deferred.resolve(ret);
                        });
                    }
                    function resolve(newValue) {
                        try {
                            if (newValue === self)
                                throw new TypeError('A promise cannot be resolved with itself.');
                            if (newValue && (typeof newValue === 'object' || typeof newValue === 'function')) {
                                var then = newValue.then;
                                if (typeof then === 'function') {
                                    doResolve(then.bind(newValue), resolve, reject);
                                    return;
                                }
                            }
                            state = true;
                            value = newValue;
                            finale();
                        } catch (e) {
                            reject(e);
                        }
                    }
                    function reject(newValue) {
                        state = false;
                        value = newValue;
                        finale();
                    }
                    function finale() {
                        for (var i = 0, len = deferreds.length; i < len; i++)
                            handle(deferreds[i]);
                        deferreds = null;
                    }
                    doResolve(fn, resolve, reject);
                }
                function Handler(onFulfilled, onRejected, resolve, reject) {
                    this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;
                    this.onRejected = typeof onRejected === 'function' ? onRejected : null;
                    this.resolve = resolve;
                    this.reject = reject;
                }
                function doResolve(fn, onFulfilled, onRejected) {
                    var done = false;
                    try {
                        fn(function (value) {
                            if (done)
                                return;
                            done = true;
                            onFulfilled(value);
                        }, function (reason) {
                            if (done)
                                return;
                            done = true;
                            onRejected(reason);
                        });
                    } catch (ex) {
                        if (done)
                            return;
                        done = true;
                        onRejected(ex);
                    }
                }
            },
            { 'asap': 95 }
        ],
        94: [
            function (require, module, exports) {
                'use strict';
                var Promise = require('./core.js');
                var asap = require('asap');
                module.exports = Promise;
                function ValuePromise(value) {
                    this.then = function (onFulfilled) {
                        if (typeof onFulfilled !== 'function')
                            return this;
                        return new Promise(function (resolve, reject) {
                            asap(function () {
                                try {
                                    resolve(onFulfilled(value));
                                } catch (ex) {
                                    reject(ex);
                                }
                            });
                        });
                    };
                }
                ValuePromise.prototype = Promise.prototype;
                var TRUE = new ValuePromise(true);
                var FALSE = new ValuePromise(false);
                var NULL = new ValuePromise(null);
                var UNDEFINED = new ValuePromise(undefined);
                var ZERO = new ValuePromise(0);
                var EMPTYSTRING = new ValuePromise('');
                Promise.resolve = function (value) {
                    if (value instanceof Promise)
                        return value;
                    if (value === null)
                        return NULL;
                    if (value === undefined)
                        return UNDEFINED;
                    if (value === true)
                        return TRUE;
                    if (value === false)
                        return FALSE;
                    if (value === 0)
                        return ZERO;
                    if (value === '')
                        return EMPTYSTRING;
                    if (typeof value === 'object' || typeof value === 'function') {
                        try {
                            var then = value.then;
                            if (typeof then === 'function') {
                                return new Promise(then.bind(value));
                            }
                        } catch (ex) {
                            return new Promise(function (resolve, reject) {
                                reject(ex);
                            });
                        }
                    }
                    return new ValuePromise(value);
                };
                Promise.all = function (arr) {
                    var args = Array.prototype.slice.call(arr);
                    return new Promise(function (resolve, reject) {
                        if (args.length === 0)
                            return resolve([]);
                        var remaining = args.length;
                        function res(i, val) {
                            try {
                                if (val && (typeof val === 'object' || typeof val === 'function')) {
                                    var then = val.then;
                                    if (typeof then === 'function') {
                                        then.call(val, function (val) {
                                            res(i, val);
                                        }, reject);
                                        return;
                                    }
                                }
                                args[i] = val;
                                if (--remaining === 0) {
                                    resolve(args);
                                }
                            } catch (ex) {
                                reject(ex);
                            }
                        }
                        for (var i = 0; i < args.length; i++) {
                            res(i, args[i]);
                        }
                    });
                };
                Promise.reject = function (value) {
                    return new Promise(function (resolve, reject) {
                        reject(value);
                    });
                };
                Promise.race = function (values) {
                    return new Promise(function (resolve, reject) {
                        values.forEach(function (value) {
                            Promise.resolve(value).then(resolve, reject);
                        });
                    });
                };
                Promise.prototype['catch'] = function (onRejected) {
                    return this.then(null, onRejected);
                };
            },
            {
                './core.js': 93,
                'asap': 95
            }
        ],
        95: [
            function (require, module, exports) {
                (function (process) {
                    var head = {
                        task: void 0,
                        next: null
                    };
                    var tail = head;
                    var flushing = false;
                    var requestFlush = void 0;
                    var isNodeJS = false;
                    function flush() {
                        while (head.next) {
                            head = head.next;
                            var task = head.task;
                            head.task = void 0;
                            var domain = head.domain;
                            if (domain) {
                                head.domain = void 0;
                                domain.enter();
                            }
                            try {
                                task();
                            } catch (e) {
                                if (isNodeJS) {
                                    if (domain) {
                                        domain.exit();
                                    }
                                    setTimeout(flush, 0);
                                    if (domain) {
                                        domain.enter();
                                    }
                                    throw e;
                                } else {
                                    setTimeout(function () {
                                        throw e;
                                    }, 0);
                                }
                            }
                            if (domain) {
                                domain.exit();
                            }
                        }
                        flushing = false;
                    }
                    if (typeof process !== 'undefined' && process.nextTick) {
                        isNodeJS = true;
                        requestFlush = function () {
                            process.nextTick(flush);
                        };
                    } else if (typeof setImmediate === 'function') {
                        if (typeof window !== 'undefined') {
                            requestFlush = setImmediate.bind(window, flush);
                        } else {
                            requestFlush = function () {
                                setImmediate(flush);
                            };
                        }
                    } else if (typeof MessageChannel !== 'undefined') {
                        var channel = new MessageChannel();
                        channel.port1.onmessage = flush;
                        requestFlush = function () {
                            channel.port2.postMessage(0);
                        };
                    } else {
                        requestFlush = function () {
                            setTimeout(flush, 0);
                        };
                    }
                    function asap(task) {
                        tail = tail.next = {
                            task: task,
                            domain: isNodeJS && process.domain,
                            next: null
                        };
                        if (!flushing) {
                            flushing = true;
                            requestFlush();
                        }
                    }
                    ;
                    module.exports = asap;
                }.call(this, require('_process')));
            },
            { '_process': 92 }
        ],
        96: [
            function (require, module, exports) {
                if (typeof Promise.prototype.done !== 'function') {
                    Promise.prototype.done = function (onFulfilled, onRejected) {
                        var self = arguments.length ? this.then.apply(this, arguments) : this;
                        self.then(null, function (err) {
                            setTimeout(function () {
                                throw err;
                            }, 0);
                        });
                    };
                }
            },
            {}
        ],
        97: [
            function (require, module, exports) {
                var asap = require('asap');
                if (typeof Promise === 'undefined') {
                    Promise = require('./lib/core.js');
                    require('./lib/es6-extensions.js');
                }
                require('./polyfill-done.js');
            },
            {
                './lib/core.js': 93,
                './lib/es6-extensions.js': 94,
                './polyfill-done.js': 96,
                'asap': 95
            }
        ]
    }, {}, [2])(2);
}));
/*steal-less@1.3.3#less-engine*/
define('steal-less@1.3.3#less-engine', [
    'require',
    'exports',
    'module',
    'less/dist/less'
], function (require, exports, module) {
    var less = window.less || (window.less = {});
    less.async = true;
    module.exports = require('less/dist/less');
});
/*steal-less@1.3.3#less*/
define('steal-less@1.3.3#less', [
    'require',
    'exports',
    'module',
    '$css',
    '@loader',
    './less-engine'
], function (require, exports, module) {
    var css = require('$css');
    var loader = require('@loader');
    var lessEngine = require('./less-engine');
    exports.instantiate = css.instantiate;
    var options = loader.lessOptions || {};
    if (lessEngine.options) {
        lessEngine.options.async = true;
    }
    options.optimization |= lessEngine.optimization;
    exports.fetch = function (load, fetch) {
        var p = Promise.resolve(false);
        if (this.liveReloadInstalled) {
            var loader = this, args = arguments;
            p = loader.import('live-reload', { name: module.id }).then(function (liveReload) {
                return liveReload.isReloading();
            });
        }
        var loader = this, args = arguments;
        return p.then(function (isReloading) {
            if (isReloading) {
                removeSource(load.address);
                return fetch.apply(loader, args);
            }
            var p = getSource(load.address);
            if (p) {
                return p;
            }
            p = fetch.call(loader, load);
            addSource(load.address, p);
            return p;
        });
    };
    exports.translate = function (load) {
        var loader = this;
        var address = load.address.replace(/^file\:/, '');
        var useFileCache = true;
        var pathParts = (address + '').split('/');
        pathParts[pathParts.length - 1] = '';
        if (typeof window !== 'undefined') {
            pathParts = (load.address + '').split('/');
            pathParts[pathParts.length - 1] = '';
        }
        function renderLess() {
            var filename = address;
            if (loader._nodeRequire) {
                filename = loader._nodeRequire('path').resolve(address);
            }
            var renderOptions = {
                filename: filename,
                useFileCache: useFileCache
            };
            var pluginPromises = [];
            for (var prop in options) {
                if (prop !== 'plugins') {
                    renderOptions[prop] = options[prop];
                }
            }
            renderOptions.paths = (options.paths || []).concat(pathParts.join('/'));
            renderOptions.plugins = [];
            if (options.plugins) {
                options.plugins.forEach(function (plugin) {
                    if (typeof plugin === 'string') {
                        pluginPromises.push(loader.import(plugin).then(function (resolvedPlugin) {
                            renderOptions.plugins.push(resolvedPlugin);
                        }));
                    }
                });
            }
            if (stealLessPlugin !== undefined) {
                renderOptions.plugins.push(stealLessPlugin);
            }
            renderOptions.relativeUrls = options.relativeUrls === undefined ? true : options.relativeUrls;
            var done = function (output) {
                load.metadata.map = output.map;
                load.metadata.includedDeps = output.imports || [];
                return output.css;
            };
            return Promise.all(pluginPromises).then(function () {
                var p = Promise.resolve(lessEngine.render(load.source, renderOptions));
                return p.then(done).then(null, function (err) {
                    if (err.type === 'File' && /404/.test(err.message)) {
                        if (loader._addSourceInfoToError) {
                            var fn = err.filename.split('/').pop();
                            var msg = 'The stylesheet [' + fn + '] wasn\'t able to fetch a dependency.\n' + 'This could be because:\n\n' + '\t - The dependency hasn\'t been saved yet.\n' + '\t - The path is incorrect.\n\n' + 'The below snippet shows the file we were unable to fetch.\n' + 'See https://stealjs.com/docs/StealJS.error-messages.html#404-not-found for more information.';
                            var newError = new Error(msg);
                            var pos = {
                                line: err.line,
                                column: err.column
                            };
                            return loader._addSourceInfoToError(newError, pos, load, '@import');
                        }
                    }
                    return Promise.reject(err);
                });
            });
        }
        if (loader.liveReloadInstalled) {
            return loader['import']('live-reload', { name: module.id }).then(function (reload) {
                if (reload.isReloading()) {
                    useFileCache = false;
                }
            }).then(renderLess, renderLess).catch(function (err) {
                console.error(err.message + ' in ' + err.filename + ':' + err.line);
                console.dir(err);
            });
        }
        return renderLess();
    };
    exports.locateScheme = true;
    exports.buildType = 'css';
    var stealLessPlugin = undefined;
    if (lessEngine.FileManager) {
        var FileManager = lessEngine.FileManager;
        function StealLessManager() {
            this.PATTERN = /locate:\/\/([a-z0-9/._@-]*)/ig;
        }
        StealLessManager.prototype = new FileManager();
        StealLessManager.prototype.supports = function (filename) {
            return true;
        };
        StealLessManager.prototype.locate = function (filename, currentDirectory) {
            return Promise.resolve(loader.normalize(filename, currentDirectory)).then(function (name) {
                return loader.locate({
                    name: name,
                    metadata: {}
                });
            });
        };
        StealLessManager.prototype.parseFile = function (file) {
            var self = this;
            var promises = [];
            file.contents.replace(self.PATTERN, function (whole, path, index) {
                promises.push(self.locate(path, file.filename.replace(loader.baseURL, '')).then(function (filename) {
                    filename = filename.replace(/^file\:/, '');
                    return {
                        str: relative(file._directory, filename),
                        loc: index,
                        del: whole.length
                    };
                }));
            });
            return Promise.all(promises).then(function (spliceDefs) {
                for (var i = spliceDefs.length; i--;) {
                    var def = spliceDefs[i];
                    file.contents = file.contents.slice(0, def.loc) + def.str + file.contents.slice(def.loc + def.del);
                }
                return file;
            });
        };
        StealLessManager.prototype.loadFile = function (filename, currentDirectory, options, environment, callback) {
            var self = this, _callback = callback, path = currentDirectory + filename, directory = normalizePath(path.substring(0, path.lastIndexOf('/') + 1)), promise;
            callback = function (err, file) {
                if (err) {
                    return _callback.call(self, err);
                }
                file._directory = directory;
                self.parseFile(file).then(function (file) {
                    _callback.call(self, null, file);
                });
            };
            promise = FileManager.prototype.loadFile.call(this, filename, currentDirectory, options, environment, callback);
            if (promise && typeof promise.then == 'function') {
                return promise.then(function (file) {
                    file._directory = directory;
                    return self.parseFile(file);
                });
            }
        };
        stealLessPlugin = {
            install: function (less, pluginManager) {
                pluginManager.addFileManager(new StealLessManager());
            }
        };
        exports.StealLessManager = StealLessManager;
    }
    var getSource = function (url) {
        return loader._lessSources && loader._lessSources[url];
    };
    var addSource = function (url, p) {
        if (!loader._lessSources) {
            loader._lessSources = {};
        }
        if (!loader._lessSources[url]) {
            loader._lessSources[url] = Promise.resolve(p);
        }
    };
    var removeSource = function (url) {
        if (loader._lessSources) {
            delete loader._lessSources[url];
        }
    };
    var normalizePath = function (path) {
        var parts = path.split('/'), normalized = [];
        for (var i = 0; i < parts.length; i++) {
            var part = parts[i];
            if (part != '.') {
                if (part == '..') {
                    normalized.pop();
                } else {
                    normalized.push(part);
                }
            }
        }
        return normalized.join('/');
    };
    var relative = function (base, path) {
        var uriParts = path.split('/'), baseParts = base.split('/'), result = [];
        while (uriParts.length && baseParts.length && uriParts[0] == baseParts[0]) {
            uriParts.shift();
            baseParts.shift();
        }
        for (var i = 0; i < baseParts.length - 1; i++) {
            result.push('../');
        }
        return result.join('') + uriParts.join('/');
    };
});
/*can-view-target@3.1.6#can-view-target*/
define('can-view-target@3.1.6#can-view-target', [
    'require',
    'exports',
    'module',
    'can-util/dom/child-nodes/child-nodes',
    'can-util/dom/attr/attr',
    'can-util/js/each/each',
    'can-util/js/make-array/make-array',
    'can-globals/document/document',
    'can-util/dom/mutate/mutate',
    'can-namespace',
    'can-globals/mutation-observer/mutation-observer'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        var childNodes = require('can-util/dom/child-nodes/child-nodes');
        var domAttr = require('can-util/dom/attr/attr');
        var each = require('can-util/js/each/each');
        var makeArray = require('can-util/js/make-array/make-array');
        var getDocument = require('can-globals/document/document');
        var domMutate = require('can-util/dom/mutate/mutate');
        var namespace = require('can-namespace');
        var MUTATION_OBSERVER = require('can-globals/mutation-observer/mutation-observer');
        var processNodes = function (nodes, paths, location, document) {
                var frag = document.createDocumentFragment();
                for (var i = 0, len = nodes.length; i < len; i++) {
                    var node = nodes[i];
                    frag.appendChild(processNode(node, paths, location.concat(i), document));
                }
                return frag;
            }, keepsTextNodes = typeof document !== 'undefined' && function () {
                var testFrag = document.createDocumentFragment();
                var div = document.createElement('div');
                div.appendChild(document.createTextNode(''));
                div.appendChild(document.createTextNode(''));
                testFrag.appendChild(div);
                var cloned = testFrag.cloneNode(true);
                return childNodes(cloned.firstChild).length === 2;
            }(), clonesWork = typeof document !== 'undefined' && function () {
                var el = document.createElement('a');
                el.innerHTML = '<xyz></xyz>';
                var clone = el.cloneNode(true);
                var works = clone.innerHTML === '<xyz></xyz>';
                var MO, observer;
                if (works) {
                    el = document.createDocumentFragment();
                    el.appendChild(document.createTextNode('foo-bar'));
                    MO = MUTATION_OBSERVER();
                    if (MO) {
                        observer = new MO(function () {
                        });
                        observer.observe(document.documentElement, {
                            childList: true,
                            subtree: true
                        });
                        clone = el.cloneNode(true);
                        observer.disconnect();
                    } else {
                        clone = el.cloneNode(true);
                    }
                    return clone.childNodes.length === 1;
                }
                return works;
            }(), namespacesWork = typeof document !== 'undefined' && !!document.createElementNS;
        var cloneNode = clonesWork ? function (el) {
            return el.cloneNode(true);
        } : function (node) {
            var document = node.ownerDocument;
            var copy;
            if (node.nodeType === 1) {
                if (node.namespaceURI !== 'http://www.w3.org/1999/xhtml' && namespacesWork && document.createElementNS) {
                    copy = document.createElementNS(node.namespaceURI, node.nodeName);
                } else {
                    copy = document.createElement(node.nodeName);
                }
            } else if (node.nodeType === 3) {
                copy = document.createTextNode(node.nodeValue);
            } else if (node.nodeType === 8) {
                copy = document.createComment(node.nodeValue);
            } else if (node.nodeType === 11) {
                copy = document.createDocumentFragment();
            }
            if (node.attributes) {
                var attributes = makeArray(node.attributes);
                each(attributes, function (node) {
                    if (node && node.specified) {
                        domAttr.setAttribute(copy, node.nodeName || node.name, node.nodeValue || node.value);
                    }
                });
            }
            if (node && node.firstChild) {
                var child = node.firstChild;
                while (child) {
                    copy.appendChild(cloneNode(child));
                    child = child.nextSibling;
                }
            }
            return copy;
        };
        function processNode(node, paths, location, document) {
            var callback, loc = location, nodeType = typeof node, el, p, i, len;
            var getCallback = function () {
                if (!callback) {
                    callback = {
                        path: location,
                        callbacks: []
                    };
                    paths.push(callback);
                    loc = [];
                }
                return callback;
            };
            if (nodeType === 'object') {
                if (node.tag) {
                    if (namespacesWork && node.namespace) {
                        el = document.createElementNS(node.namespace, node.tag);
                    } else {
                        el = document.createElement(node.tag);
                    }
                    if (node.attrs) {
                        for (var attrName in node.attrs) {
                            var value = node.attrs[attrName];
                            if (typeof value === 'function') {
                                getCallback().callbacks.push({ callback: value });
                            } else {
                                domAttr.setAttribute(el, attrName, value);
                            }
                        }
                    }
                    if (node.attributes) {
                        for (i = 0, len = node.attributes.length; i < len; i++) {
                            getCallback().callbacks.push({ callback: node.attributes[i] });
                        }
                    }
                    if (node.children && node.children.length) {
                        if (callback) {
                            p = callback.paths = [];
                        } else {
                            p = paths;
                        }
                        el.appendChild(processNodes(node.children, p, loc, document));
                    }
                } else if (node.comment) {
                    el = document.createComment(node.comment);
                    if (node.callbacks) {
                        for (i = 0, len = node.attributes.length; i < len; i++) {
                            getCallback().callbacks.push({ callback: node.callbacks[i] });
                        }
                    }
                }
            } else if (nodeType === 'string') {
                el = document.createTextNode(node);
            } else if (nodeType === 'function') {
                if (keepsTextNodes) {
                    el = document.createTextNode('');
                    getCallback().callbacks.push({ callback: node });
                } else {
                    el = document.createComment('~');
                    getCallback().callbacks.push({
                        callback: function () {
                            var el = document.createTextNode('');
                            domMutate.replaceChild.call(this.parentNode, el, this);
                            return node.apply(el, arguments);
                        }
                    });
                }
            }
            return el;
        }
        function getCallbacks(el, pathData, elementCallbacks) {
            var path = pathData.path, callbacks = pathData.callbacks, paths = pathData.paths, child = el, pathLength = path ? path.length : 0, pathsLength = paths ? paths.length : 0;
            for (var i = 0; i < pathLength; i++) {
                child = child.childNodes.item(path[i]);
            }
            for (i = 0; i < pathsLength; i++) {
                getCallbacks(child, paths[i], elementCallbacks);
            }
            elementCallbacks.push({
                element: child,
                callbacks: callbacks
            });
        }
        function hydrateCallbacks(callbacks, args) {
            var len = callbacks.length, callbacksLength, callbackElement, callbackData;
            for (var i = 0; i < len; i++) {
                callbackData = callbacks[i];
                callbacksLength = callbackData.callbacks.length;
                callbackElement = callbackData.element;
                for (var c = 0; c < callbacksLength; c++) {
                    callbackData.callbacks[c].callback.apply(callbackElement, args);
                }
            }
        }
        function makeTarget(nodes, doc) {
            var paths = [];
            var frag = processNodes(nodes, paths, [], doc || getDocument());
            return {
                paths: paths,
                clone: frag,
                hydrate: function () {
                    var cloned = cloneNode(this.clone);
                    var args = makeArray(arguments);
                    var callbacks = [];
                    for (var i = 0; i < paths.length; i++) {
                        getCallbacks(cloned, paths[i], callbacks);
                    }
                    hydrateCallbacks(callbacks, args);
                    return cloned;
                }
            };
        }
        makeTarget.keepsTextNodes = keepsTextNodes;
        makeTarget.cloneNode = cloneNode;
        namespace.view = namespace.view || {};
        module.exports = namespace.view.target = makeTarget;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-stache@3.15.1#src/html_section*/
define('can-stache@3.15.1#src/html_section', [
    'require',
    'exports',
    'module',
    'can-view-target',
    'can-view-scope',
    'can-observation',
    './utils',
    './mustache_core',
    'can-globals/document/document',
    'can-util/js/assign/assign',
    'can-util/js/last/last'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        var target = require('can-view-target');
        var Scope = require('can-view-scope');
        var Observation = require('can-observation');
        var utils = require('./utils');
        var mustacheCore = require('./mustache_core');
        var getDocument = require('can-globals/document/document');
        var assign = require('can-util/js/assign/assign');
        var last = require('can-util/js/last/last');
        var decodeHTML = typeof document !== 'undefined' && function () {
            var el = getDocument().createElement('div');
            return function (html) {
                if (html.indexOf('&') === -1) {
                    return html.replace(/\r\n/g, '\n');
                }
                el.innerHTML = html;
                return el.childNodes.length === 0 ? '' : el.childNodes.item(0).nodeValue;
            };
        }();
        var HTMLSectionBuilder = function (filename) {
            if (filename) {
                this.filename = filename;
            }
            this.stack = [new HTMLSection()];
        };
        HTMLSectionBuilder.scopify = function (renderer) {
            return Observation.ignore(function (scope, options, nodeList) {
                if (!(scope instanceof Scope)) {
                    scope = Scope.refsScope().add(scope || {});
                }
                if (!(options instanceof mustacheCore.Options)) {
                    options = new mustacheCore.Options(options || {});
                }
                return renderer(scope, options, nodeList);
            });
        };
        assign(HTMLSectionBuilder.prototype, utils.mixins);
        assign(HTMLSectionBuilder.prototype, {
            startSubSection: function (process) {
                var newSection = new HTMLSection(process);
                this.stack.push(newSection);
                return newSection;
            },
            endSubSectionAndReturnRenderer: function () {
                if (this.last().isEmpty()) {
                    this.stack.pop();
                    return null;
                } else {
                    var htmlSection = this.endSection();
                    return htmlSection.compiled.hydrate.bind(htmlSection.compiled);
                }
            },
            startSection: function (process) {
                var newSection = new HTMLSection(process);
                this.last().add(newSection.targetCallback);
                this.stack.push(newSection);
            },
            endSection: function () {
                this.last().compile();
                return this.stack.pop();
            },
            inverse: function () {
                this.last().inverse();
            },
            compile: function () {
                var compiled = this.stack.pop().compile();
                return Observation.ignore(function (scope, options, nodeList) {
                    if (!(scope instanceof Scope)) {
                        scope = Scope.refsScope().add(scope || {});
                    }
                    if (!(options instanceof mustacheCore.Options)) {
                        options = new mustacheCore.Options(options || {});
                    }
                    return compiled.hydrate(scope, options, nodeList);
                });
            },
            push: function (chars) {
                this.last().push(chars);
            },
            pop: function () {
                return this.last().pop();
            },
            removeCurrentNode: function () {
                this.last().removeCurrentNode();
            }
        });
        var HTMLSection = function (process) {
            this.data = 'targetData';
            this.targetData = [];
            this.targetStack = [];
            var self = this;
            this.targetCallback = function (scope, options, sectionNode) {
                process.call(this, scope, options, sectionNode, self.compiled.hydrate.bind(self.compiled), self.inverseCompiled && self.inverseCompiled.hydrate.bind(self.inverseCompiled));
            };
        };
        assign(HTMLSection.prototype, {
            inverse: function () {
                this.inverseData = [];
                this.data = 'inverseData';
            },
            push: function (data) {
                this.add(data);
                this.targetStack.push(data);
            },
            pop: function () {
                return this.targetStack.pop();
            },
            add: function (data) {
                if (typeof data === 'string') {
                    data = decodeHTML(data);
                }
                if (this.targetStack.length) {
                    last(this.targetStack).children.push(data);
                } else {
                    this[this.data].push(data);
                }
            },
            compile: function () {
                this.compiled = target(this.targetData, getDocument());
                if (this.inverseData) {
                    this.inverseCompiled = target(this.inverseData, getDocument());
                    delete this.inverseData;
                }
                this.targetStack = this.targetData = null;
                return this.compiled;
            },
            removeCurrentNode: function () {
                var children = this.children();
                return children.pop();
            },
            children: function () {
                if (this.targetStack.length) {
                    return last(this.targetStack).children;
                } else {
                    return this[this.data];
                }
            },
            isEmpty: function () {
                return !this.targetData.length;
            }
        });
        HTMLSectionBuilder.HTMLSection = HTMLSection;
        module.exports = HTMLSectionBuilder;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-stache@3.15.1#src/text_section*/
define('can-stache@3.15.1#src/text_section', [
    'require',
    'exports',
    'module',
    'can-compute',
    'can-view-live',
    './utils',
    'can-util/dom/attr/attr',
    'can-util/js/assign/assign',
    'can-reflect',
    'can-observation'
], function (require, exports, module) {
    var compute = require('can-compute');
    var live = require('can-view-live');
    var utils = require('./utils');
    var attr = require('can-util/dom/attr/attr');
    var assign = require('can-util/js/assign/assign');
    var canReflect = require('can-reflect');
    var Observation = require('can-observation');
    var noop = function () {
    };
    var TextSectionBuilder = function () {
        this.stack = [new TextSection()];
    };
    assign(TextSectionBuilder.prototype, utils.mixins);
    assign(TextSectionBuilder.prototype, {
        startSection: function (process) {
            var subSection = new TextSection();
            this.last().add({
                process: process,
                truthy: subSection
            });
            this.stack.push(subSection);
        },
        endSection: function () {
            this.stack.pop();
        },
        inverse: function () {
            this.stack.pop();
            var falseySection = new TextSection();
            this.last().last().falsey = falseySection;
            this.stack.push(falseySection);
        },
        compile: function (state) {
            var renderer = this.stack[0].compile();
            return function (scope, options) {
                var observation = new Observation(function () {
                    return renderer(scope, options);
                }, null, { isObservable: false });
                canReflect.onValue(observation, noop);
                var value = canReflect.getValue(observation);
                if (canReflect.valueHasDependencies(observation)) {
                    if (state.textContentOnly) {
                        live.text(this, observation);
                    } else if (state.attr) {
                        live.attr(this, state.attr, observation);
                    } else {
                        live.attrs(this, observation, scope, options);
                    }
                    canReflect.offValue(observation, noop);
                } else {
                    if (state.textContentOnly) {
                        this.nodeValue = value;
                    } else if (state.attr) {
                        attr.set(this, state.attr, value);
                    } else {
                        live.attrs(this, value);
                    }
                }
            };
        }
    });
    var passTruthyFalsey = function (process, truthy, falsey) {
        return function (scope, options) {
            return process.call(this, scope, options, truthy, falsey);
        };
    };
    var TextSection = function () {
        this.values = [];
    };
    assign(TextSection.prototype, {
        add: function (data) {
            this.values.push(data);
        },
        last: function () {
            return this.values[this.values.length - 1];
        },
        compile: function () {
            var values = this.values, len = values.length;
            for (var i = 0; i < len; i++) {
                var value = this.values[i];
                if (typeof value === 'object') {
                    values[i] = passTruthyFalsey(value.process, value.truthy && value.truthy.compile(), value.falsey && value.falsey.compile());
                }
            }
            return function (scope, options) {
                var txt = '', value;
                for (var i = 0; i < len; i++) {
                    value = values[i];
                    txt += typeof value === 'string' ? value : value.call(this, scope, options);
                }
                return txt;
            };
        }
    });
    module.exports = TextSectionBuilder;
});
/*can-stache@3.15.1#helpers/converter*/
define('can-stache@3.15.1#helpers/converter', [
    'require',
    'exports',
    'module',
    './core',
    '../src/expression',
    'can-util/js/make-array/make-array'
], function (require, exports, module) {
    var helpers = require('./core');
    var expression = require('../src/expression');
    var makeArray = require('can-util/js/make-array/make-array');
    helpers.registerConverter = function (name, getterSetter) {
        getterSetter = getterSetter || {};
        helpers.registerHelper(name, function (newVal, source) {
            var args = makeArray(arguments);
            if (newVal instanceof expression.SetIdentifier) {
                return typeof getterSetter.set === 'function' ? getterSetter.set.apply(this, [newVal.value].concat(args.slice(1))) : source(newVal.value);
            } else {
                return typeof getterSetter.get === 'function' ? getterSetter.get.apply(this, args) : args[0];
            }
        });
    };
    module.exports = helpers;
});
/*can-stache@3.15.1#can-stache*/
define('can-stache@3.15.1#can-stache', [
    'require',
    'exports',
    'module',
    'can-view-parser',
    'can-view-callbacks',
    'can-reflect',
    './src/html_section',
    './src/text_section',
    './src/mustache_core',
    './helpers/core',
    './helpers/converter',
    './src/intermediate_and_imports',
    './src/utils',
    'can-attribute-encoder',
    'can-log/dev/dev',
    'can-namespace',
    'can-globals/document/document',
    'can-util/js/assign/assign',
    'can-util/js/last/last',
    'can-util/js/import/import',
    'can-view-target',
    'can-view-nodelist'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        var parser = require('can-view-parser');
        var viewCallbacks = require('can-view-callbacks');
        var canReflect = require('can-reflect');
        var HTMLSectionBuilder = require('./src/html_section');
        var TextSectionBuilder = require('./src/text_section');
        var mustacheCore = require('./src/mustache_core');
        var mustacheHelpers = require('./helpers/core');
        require('./helpers/converter');
        var getIntermediateAndImports = require('./src/intermediate_and_imports');
        var makeRendererConvertScopes = require('./src/utils').makeRendererConvertScopes;
        var attributeEncoder = require('can-attribute-encoder');
        var dev = require('can-log/dev/dev');
        var namespace = require('can-namespace');
        var DOCUMENT = require('can-globals/document/document');
        var assign = require('can-util/js/assign/assign');
        var last = require('can-util/js/last/last');
        var importer = require('can-util/js/import/import');
        require('can-view-target');
        require('can-view-nodelist');
        if (!viewCallbacks.tag('content')) {
            viewCallbacks.tag('content', function (el, tagData) {
                return tagData.scope;
            });
        }
        var wrappedAttrPattern = /[{(].*[)}]/;
        var colonWrappedAttrPattern = /^on:|(:to|:from|:bind)$|.*:to:on:.*/;
        var svgNamespace = 'http://www.w3.org/2000/svg';
        var namespaces = {
                'svg': svgNamespace,
                'g': svgNamespace
            }, textContentOnlyTag = {
                style: true,
                script: true
            };
        function stache(filename, template) {
            if (arguments.length === 1) {
                template = arguments[0];
                filename = undefined;
            }
            var inlinePartials = {};
            if (typeof template === 'string') {
                template = mustacheCore.cleanWhitespaceControl(template);
                template = mustacheCore.cleanLineEndings(template);
            }
            var section = new HTMLSectionBuilder(filename), state = {
                    node: null,
                    attr: null,
                    sectionElementStack: [],
                    text: false,
                    namespaceStack: [],
                    textContentOnly: null
                }, makeRendererAndUpdateSection = function (section, mode, stache, lineNo) {
                    if (mode === '>') {
                        section.add(mustacheCore.makeLiveBindingPartialRenderer(stache, copyState({ lineNo: lineNo })));
                    } else if (mode === '/') {
                        var createdSection = section.last();
                        if (createdSection.startedWith === '<') {
                            inlinePartials[stache] = section.endSubSectionAndReturnRenderer();
                            section.removeCurrentNode();
                        } else {
                            section.endSection();
                        }
                        if (section instanceof HTMLSectionBuilder) {
                            var last = state.sectionElementStack[state.sectionElementStack.length - 1];
                            if (last.tag && last.type === 'section' && stache !== '' && stache !== last.tag) {
                                if (filename) {
                                    dev.warn(filename + ':' + lineNo + ': unexpected closing tag {{/' + stache + '}} expected {{/' + last.tag + '}}');
                                } else {
                                    dev.warn(lineNo + ': unexpected closing tag {{/' + stache + '}} expected {{/' + last.tag + '}}');
                                }
                            }
                            state.sectionElementStack.pop();
                        }
                    } else if (mode === 'else') {
                        section.inverse();
                    } else {
                        var makeRenderer = section instanceof HTMLSectionBuilder ? mustacheCore.makeLiveBindingBranchRenderer : mustacheCore.makeStringBranchRenderer;
                        if (mode === '{' || mode === '&') {
                            section.add(makeRenderer(null, stache, copyState({ lineNo: lineNo })));
                        } else if (mode === '#' || mode === '^' || mode === '<') {
                            var renderer = makeRenderer(mode, stache, copyState({ lineNo: lineNo }));
                            section.startSection(renderer);
                            section.last().startedWith = mode;
                            if (section instanceof HTMLSectionBuilder) {
                                var tag = typeof renderer.exprData.closingTag === 'function' ? renderer.exprData.closingTag() : '';
                                state.sectionElementStack.push({
                                    type: 'section',
                                    tag: tag
                                });
                            }
                        } else {
                            section.add(makeRenderer(null, stache, copyState({
                                text: true,
                                lineNo: lineNo
                            })));
                        }
                    }
                }, copyState = function (overwrites) {
                    var lastElement = state.sectionElementStack[state.sectionElementStack.length - 1];
                    var cur = {
                        tag: state.node && state.node.tag,
                        attr: state.attr && state.attr.name,
                        directlyNested: state.sectionElementStack.length ? lastElement.type === 'section' || lastElement.type === 'custom' : true,
                        textContentOnly: !!state.textContentOnly
                    };
                    return overwrites ? assign(cur, overwrites) : cur;
                }, addAttributesCallback = function (node, callback) {
                    if (!node.attributes) {
                        node.attributes = [];
                    }
                    node.attributes.unshift(callback);
                };
            parser(template, {
                filename: filename,
                start: function (tagName, unary, lineNo) {
                    var matchedNamespace = namespaces[tagName];
                    if (matchedNamespace && !unary) {
                        state.namespaceStack.push(matchedNamespace);
                    }
                    state.node = {
                        tag: tagName,
                        children: [],
                        namespace: matchedNamespace || last(state.namespaceStack)
                    };
                },
                end: function (tagName, unary, lineNo) {
                    var isCustomTag = viewCallbacks.tag(tagName);
                    if (unary) {
                        section.add(state.node);
                        if (isCustomTag) {
                            addAttributesCallback(state.node, function (scope, options, parentNodeList) {
                                scope.set('scope.lineNumber', lineNo);
                                viewCallbacks.tagHandler(this, tagName, {
                                    scope: scope,
                                    options: options,
                                    subtemplate: null,
                                    templateType: 'stache',
                                    parentNodeList: parentNodeList
                                });
                            });
                        }
                    } else {
                        section.push(state.node);
                        state.sectionElementStack.push({
                            type: isCustomTag ? 'custom' : null,
                            tag: isCustomTag ? null : tagName,
                            templates: {}
                        });
                        if (isCustomTag) {
                            section.startSubSection();
                        } else if (textContentOnlyTag[tagName]) {
                            state.textContentOnly = new TextSectionBuilder();
                        }
                    }
                    state.node = null;
                },
                close: function (tagName, lineNo) {
                    var matchedNamespace = namespaces[tagName];
                    if (matchedNamespace) {
                        state.namespaceStack.pop();
                    }
                    var isCustomTag = viewCallbacks.tag(tagName), renderer;
                    if (isCustomTag) {
                        renderer = section.endSubSectionAndReturnRenderer();
                    }
                    if (textContentOnlyTag[tagName]) {
                        section.last().add(state.textContentOnly.compile(copyState()));
                        state.textContentOnly = null;
                    }
                    var oldNode = section.pop();
                    if (isCustomTag) {
                        if (tagName === 'can-template') {
                            var parent = state.sectionElementStack[state.sectionElementStack.length - 2];
                            if (renderer) {
                                parent.templates[oldNode.attrs.name] = makeRendererConvertScopes(renderer);
                            }
                            section.removeCurrentNode();
                        } else {
                            var current = state.sectionElementStack[state.sectionElementStack.length - 1];
                            addAttributesCallback(oldNode, function (scope, options, parentNodeList) {
                                scope.set('scope.lineNumber', lineNo);
                                viewCallbacks.tagHandler(this, tagName, {
                                    scope: scope,
                                    options: options,
                                    subtemplate: renderer ? makeRendererConvertScopes(renderer) : renderer,
                                    templateType: 'stache',
                                    parentNodeList: parentNodeList,
                                    templates: current.templates
                                });
                            });
                        }
                    }
                    state.sectionElementStack.pop();
                },
                attrStart: function (attrName, lineNo) {
                    if (state.node.section) {
                        state.node.section.add(attrName + '="');
                    } else {
                        state.attr = {
                            name: attrName,
                            value: ''
                        };
                    }
                },
                attrEnd: function (attrName, lineNo) {
                    if (state.node.section) {
                        state.node.section.add('" ');
                    } else {
                        if (!state.node.attrs) {
                            state.node.attrs = {};
                        }
                        state.node.attrs[state.attr.name] = state.attr.section ? state.attr.section.compile(copyState()) : state.attr.value;
                        var attrCallback = viewCallbacks.attr(attrName);
                        var decodedAttrName = attributeEncoder.decode(attrName);
                        var weirdAttribute = !!wrappedAttrPattern.test(decodedAttrName) || !!colonWrappedAttrPattern.test(decodedAttrName);
                        if (weirdAttribute && !attrCallback) {
                            dev.warn('unknown attribute binding ' + decodedAttrName + '. Is can-stache-bindings imported?');
                        }
                        if (attrCallback) {
                            if (!state.node.attributes) {
                                state.node.attributes = [];
                            }
                            state.node.attributes.push(function (scope, options, nodeList) {
                                scope.set('scope.lineNumber', lineNo);
                                attrCallback(this, {
                                    attributeName: attrName,
                                    scope: scope,
                                    options: options,
                                    nodeList: nodeList
                                });
                            });
                        }
                        state.attr = null;
                    }
                },
                attrValue: function (value, lineNo) {
                    var section = state.node.section || state.attr.section;
                    if (section) {
                        section.add(value);
                    } else {
                        state.attr.value += value;
                    }
                },
                chars: function (text, lineNo) {
                    (state.textContentOnly || section).add(text);
                },
                special: function (text, lineNo) {
                    var firstAndText = mustacheCore.splitModeFromExpression(text, state), mode = firstAndText.mode, expression = firstAndText.expression;
                    if (expression === 'else') {
                        var inverseSection;
                        if (state.attr && state.attr.section) {
                            inverseSection = state.attr.section;
                        } else if (state.node && state.node.section) {
                            inverseSection = state.node.section;
                        } else {
                            inverseSection = state.textContentOnly || section;
                        }
                        inverseSection.inverse();
                        return;
                    }
                    if (mode === '!') {
                        return;
                    }
                    if (state.node && state.node.section) {
                        makeRendererAndUpdateSection(state.node.section, mode, expression, lineNo);
                        if (state.node.section.subSectionDepth() === 0) {
                            state.node.attributes.push(state.node.section.compile(copyState()));
                            delete state.node.section;
                        }
                    } else if (state.attr) {
                        if (!state.attr.section) {
                            state.attr.section = new TextSectionBuilder();
                            if (state.attr.value) {
                                state.attr.section.add(state.attr.value);
                            }
                        }
                        makeRendererAndUpdateSection(state.attr.section, mode, expression, lineNo);
                    } else if (state.node) {
                        if (!state.node.attributes) {
                            state.node.attributes = [];
                        }
                        if (!mode) {
                            state.node.attributes.push(mustacheCore.makeLiveBindingBranchRenderer(null, expression, copyState({ lineNo: lineNo })));
                        } else if (mode === '#' || mode === '^') {
                            if (!state.node.section) {
                                state.node.section = new TextSectionBuilder();
                            }
                            makeRendererAndUpdateSection(state.node.section, mode, expression, lineNo);
                        } else {
                            throw new Error(mode + ' is currently not supported within a tag.');
                        }
                    } else {
                        makeRendererAndUpdateSection(state.textContentOnly || section, mode, expression, lineNo);
                    }
                },
                comment: function (text) {
                    section.add({ comment: text });
                },
                done: function (lineNo) {
                }
            });
            var renderer = section.compile();
            var scopifiedRenderer = HTMLSectionBuilder.scopify(function (scope, optionsScope, nodeList) {
                if (Object.keys(inlinePartials).length) {
                    optionsScope.inlinePartials = optionsScope.inlinePartials || {};
                    assign(optionsScope.inlinePartials, inlinePartials);
                }
                scope.set('scope.view', scopifiedRenderer);
                scope.set('scope.root', scope._context);
                scope.set('scope.filename', section.filename);
                return renderer.apply(this, arguments);
            });
            return scopifiedRenderer;
        }
        assign(stache, mustacheHelpers);
        stache.safeString = function (text) {
            return canReflect.assignSymbols({}, {
                'can.toDOM': function () {
                    return text;
                }
            });
        };
        stache.async = function (source) {
            var iAi = getIntermediateAndImports(source);
            var importPromises = iAi.imports.map(function (moduleName) {
                return importer(moduleName);
            });
            return Promise.all(importPromises).then(function () {
                return stache(iAi.intermediate);
            });
        };
        var templates = {};
        stache.from = mustacheCore.getTemplateById = function (id) {
            if (!templates[id]) {
                var el = DOCUMENT().getElementById(id);
                if (el) {
                    templates[id] = stache('#' + id, el.innerHTML);
                }
            }
            return templates[id];
        };
        stache.registerPartial = function (id, partial) {
            templates[id] = typeof partial === 'string' ? stache(partial) : partial;
        };
        module.exports = namespace.stache = stache;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-param@1.1.0#can-param*/
define('can-param@1.1.0#can-param', [
    'require',
    'exports',
    'module',
    'can-namespace'
], function (require, exports, module) {
    'use strict';
    var namespace = require('can-namespace');
    function buildParam(prefix, obj, add) {
        if (Array.isArray(obj)) {
            for (var i = 0, l = obj.length; i < l; ++i) {
                buildParam(prefix + '[]', obj[i], add);
            }
        } else if (obj && typeof obj === 'object') {
            for (var name in obj) {
                buildParam(prefix + '[' + name + ']', obj[name], add);
            }
        } else {
            add(prefix, obj);
        }
    }
    module.exports = namespace.param = function param(object) {
        var pairs = [], add = function (key, value) {
                pairs.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));
            };
        for (var name in object) {
            buildParam(name, object[name], add);
        }
        return pairs.join('&').replace(/%20/g, '+');
    };
});
/*can-deparam@1.2.0#can-deparam*/
define('can-deparam@1.2.0#can-deparam', [
    'require',
    'exports',
    'module',
    'can-namespace'
], function (require, exports, module) {
    'use strict';
    var namespace = require('can-namespace');
    var digitTest = /^\d+$/, keyBreaker = /([^\[\]]+)|(\[\])/g, paramTest = /([^?#]*)(#.*)?$/, entityRegex = /%([^0-9a-f][0-9a-f]|[0-9a-f][^0-9a-f]|[^0-9a-f][^0-9a-f])/i, prep = function (str) {
            str = str.replace(/\+/g, ' ');
            try {
                return decodeURIComponent(str);
            } catch (e) {
                return decodeURIComponent(str.replace(entityRegex, function (match, hex) {
                    return '%25' + hex;
                }));
            }
        };
    function isArrayLikeName(name) {
        return digitTest.test(name) || name === '[]';
    }
    function idenity(value) {
        return value;
    }
    module.exports = namespace.deparam = function (params, valueDeserializer) {
        valueDeserializer = valueDeserializer || idenity;
        var data = {}, pairs, lastPart;
        if (params && paramTest.test(params)) {
            pairs = params.split('&');
            pairs.forEach(function (pair) {
                var parts = pair.split('='), key = prep(parts.shift()), value = prep(parts.join('=')), current = data;
                if (key) {
                    parts = key.match(keyBreaker);
                    for (var j = 0, l = parts.length - 1; j < l; j++) {
                        var currentName = parts[j], nextName = parts[j + 1], currentIsArray = isArrayLikeName(currentName) && current instanceof Array;
                        if (!current[currentName]) {
                            if (currentIsArray) {
                                current.push(isArrayLikeName(nextName) ? [] : {});
                            } else {
                                current[currentName] = isArrayLikeName(nextName) ? [] : {};
                            }
                        }
                        if (currentIsArray) {
                            current = current[current.length - 1];
                        } else {
                            current = current[currentName];
                        }
                    }
                    lastPart = parts.pop();
                    if (isArrayLikeName(lastPart)) {
                        current.push(valueDeserializer(value));
                    } else {
                        current[lastPart] = valueDeserializer(value);
                    }
                }
            });
        }
        return data;
    };
});
/*can-util@3.14.0#js/deep-assign/deep-assign*/
define('can-util@3.14.0#js/deep-assign/deep-assign', [
    'require',
    'exports',
    'module',
    '../is-function/is-function',
    '../is-plain-object/is-plain-object',
    'can-namespace'
], function (require, exports, module) {
    'use strict';
    var isFunction = require('../is-function/is-function');
    var isPlainObject = require('../is-plain-object/is-plain-object');
    var namespace = require('can-namespace');
    function deepAssign() {
        var options, name, src, copy, copyIsArray, clone, target = arguments[0] || {}, i = 1, length = arguments.length;
        if (typeof target !== 'object' && !isFunction(target)) {
            target = {};
        }
        if (length === i) {
            target = this;
            --i;
        }
        for (; i < length; i++) {
            if ((options = arguments[i]) != null) {
                for (name in options) {
                    src = target[name];
                    copy = options[name];
                    if (target === copy) {
                        continue;
                    }
                    if (copy && (isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {
                        if (copyIsArray) {
                            copyIsArray = false;
                            clone = src && Array.isArray(src) ? src : [];
                        } else {
                            clone = src && isPlainObject(src) ? src : {};
                        }
                        target[name] = deepAssign(clone, copy);
                    } else if (copy !== undefined) {
                        target[name] = copy;
                    }
                }
            }
        }
        return target;
    }
    module.exports = namespace.deepAssign = deepAssign;
});
/*can-util@3.14.0#js/is-web-worker/is-web-worker*/
define('can-util@3.14.0#js/is-web-worker/is-web-worker', [
    'require',
    'exports',
    'module',
    'can-namespace'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var namespace = require('can-namespace');
        module.exports = namespace.isWebWorker = function () {
            return typeof WorkerGlobalScope !== 'undefined' && this instanceof WorkerGlobalScope;
        };
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-util@3.14.0#js/is-browser-window/is-browser-window*/
define('can-util@3.14.0#js/is-browser-window/is-browser-window', [
    'require',
    'exports',
    'module',
    'can-namespace',
    'can-globals/is-browser-window/is-browser-window'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var namespace = require('can-namespace');
        if (process.env.NODE_ENV !== 'production') {
        }
        module.exports = namespace.isBrowserWindow = require('can-globals/is-browser-window/is-browser-window');
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-util@3.14.0#js/diff-object/diff-object*/
define('can-util@3.14.0#js/diff-object/diff-object', [
    'require',
    'exports',
    'module',
    'can-assign'
], function (require, exports, module) {
    'use strict';
    var assign = require('can-assign');
    module.exports = exports = function (oldObject, newObject) {
        var oldObjectClone, patches = [];
        oldObjectClone = assign({}, oldObject);
        for (var newProp in newObject) {
            if (!oldObject || !oldObject.hasOwnProperty(newProp)) {
                patches.push({
                    property: newProp,
                    type: 'add',
                    value: newObject[newProp]
                });
            } else if (newObject[newProp] !== oldObject[newProp]) {
                patches.push({
                    property: newProp,
                    type: 'set',
                    value: newObject[newProp]
                });
            }
            delete oldObjectClone[newProp];
        }
        for (var oldProp in oldObjectClone) {
            patches.push({
                property: oldProp,
                type: 'remove'
            });
        }
        return patches;
    };
});
/*can-route@3.3.4#can-route*/
define('can-route@3.3.4#can-route', [
    'require',
    'exports',
    'module',
    'can-event/batch/batch',
    'can-event',
    'can-observation',
    'can-compute',
    'can-namespace',
    'can-param',
    'can-deparam',
    'can-log/dev/dev',
    'can-util/js/each/each',
    'can-util/js/string/string',
    'can-util/js/is-function/is-function',
    'can-util/js/is-empty-object/is-empty-object',
    'can-util/js/deep-assign/deep-assign',
    'can-util/js/is-web-worker/is-web-worker',
    'can-util/js/is-browser-window/is-browser-window',
    'can-util/js/make-array/make-array',
    'can-util/js/assign/assign',
    'can-types',
    'can-util/js/dev/dev',
    'can-util/js/diff/diff',
    'can-util/js/diff-object/diff-object',
    'can-reflect',
    'can-symbol'
], function (require, exports, module) {
    var canBatch = require('can-event/batch/batch');
    var canEvent = require('can-event');
    var Observation = require('can-observation');
    var compute = require('can-compute');
    var namespace = require('can-namespace');
    var param = require('can-param');
    var deparam = require('can-deparam');
    var devLog = require('can-log/dev/dev');
    var each = require('can-util/js/each/each');
    var string = require('can-util/js/string/string');
    var isFunction = require('can-util/js/is-function/is-function');
    var isEmptyObject = require('can-util/js/is-empty-object/is-empty-object');
    var deepAssign = require('can-util/js/deep-assign/deep-assign');
    var isWebWorker = require('can-util/js/is-web-worker/is-web-worker');
    var isBrowserWindow = require('can-util/js/is-browser-window/is-browser-window');
    var makeArray = require('can-util/js/make-array/make-array');
    var assign = require('can-util/js/assign/assign');
    var types = require('can-types');
    var dev = require('can-util/js/dev/dev');
    var diff = require('can-util/js/diff/diff');
    var diffObject = require('can-util/js/diff-object/diff-object');
    var canReflect = require('can-reflect');
    var canSymbol = require('can-symbol');
    var curliesMatcher = /\{\s*([\w.]+)\s*\}/g;
    var colonMatcher = /\:([\w.]+)/g;
    var paramsMatcher = /^(?:&[^=]+=[^&]*)+/;
    var makeProps = function (props) {
        var tags = [];
        each(props, function (val, name) {
            tags.push((name === 'className' ? 'class' : name) + '="' + (name === 'href' ? val : string.esc(val)) + '"');
        });
        return tags.join(' ');
    };
    var matchesData = function (route, data) {
        var count = 0, i = 0, defaults = {};
        for (var name in route.defaults) {
            if (route.defaults[name] === data[name]) {
                defaults[name] = 1;
                count++;
            }
        }
        for (; i < route.names.length; i++) {
            if (!data.hasOwnProperty(route.names[i])) {
                return -1;
            }
            if (!defaults[route.names[i]]) {
                count++;
            }
        }
        return count;
    };
    var location = typeof window !== 'undefined' ? window.location : {};
    var wrapQuote = function (str) {
        return (str + '').replace(/([.?*+\^$\[\]\\(){}|\-])/g, '\\$1');
    };
    var attrHelper = function (prop, value) {
        if ('attr' in this) {
            return this.attr.apply(this, arguments);
        } else {
            if (arguments.length > 1) {
                canReflect.setKeyValue(this, prop, value);
                return this;
            } else if (typeof prop === 'object') {
                canReflect.assignDeep(this, prop);
                return this;
            } else if (arguments.length === 1) {
                return canReflect.getKeyValue(this, prop);
            } else {
                return canReflect.unwrap(this);
            }
        }
    };
    var stringify = function (obj) {
        if (obj && typeof obj === 'object') {
            if (obj && typeof obj === 'object' && 'serialize' in obj) {
                obj = obj.serialize();
            } else {
                obj = isFunction(obj.slice) ? obj.slice() : assign({}, obj);
            }
            each(obj, function (val, prop) {
                obj[prop] = stringify(val);
            });
        } else if (obj !== undefined && obj !== null && isFunction(obj.toString)) {
            obj = obj.toString();
        }
        return obj;
    };
    var removeBackslash = function (str) {
        return str.replace(/\\/g, '');
    };
    var timer;
    var curParams;
    var lastHash;
    var changingData;
    var changedAttrs = [];
    var eventsObject = assign({}, canEvent);
    var canRoute = function (url, defaults) {
        var root = canRoute._call('root');
        if (root.lastIndexOf('/') === root.length - 1 && url.indexOf('/') === 0) {
            url = url.substr(1);
        }
        defaults = defaults || {};
        var names = [], res, test = '', matcher, lastIndex, next, querySeparator = canRoute._call('querySeparator'), matchSlashes = canRoute._call('matchSlashes');
        if (colonMatcher.test(url)) {
            matcher = colonMatcher;
            dev.warn('update route "' + url + '" to "' + url.replace(colonMatcher, function (name, key) {
                return '{' + key + '}';
            }) + '"');
        } else {
            matcher = curliesMatcher;
        }
        lastIndex = matcher.lastIndex = 0;
        while (res = matcher.exec(url)) {
            names.push(res[1]);
            test += removeBackslash(url.substring(lastIndex, matcher.lastIndex - res[0].length));
            next = '\\' + (removeBackslash(url.substr(matcher.lastIndex, 1)) || querySeparator + (matchSlashes ? '' : '|/'));
            test += '([^' + next + ']' + (defaults[res[1]] ? '*' : '+') + ')';
            lastIndex = matcher.lastIndex;
        }
        test += url.substr(lastIndex).replace('\\', '');
        each(canRoute.routes, function (r) {
            var existingKeys = r.names.concat(Object.keys(r.defaults)).sort();
            var keys = names.concat(Object.keys(defaults)).sort();
            var sameMapKeys = !diff(existingKeys, keys).length;
            var sameDefaultValues = !diffObject(r.defaults, defaults).length;
            var matchingRoutesWithoutTrailingSlash = r.route.replace(/\/$/, '') === url.replace(/\/$/, '');
            if (sameMapKeys && sameDefaultValues && !matchingRoutesWithoutTrailingSlash) {
                dev.warn('two routes were registered with matching keys:\n' + '\t(1) route("' + r.route + '", ' + JSON.stringify(r.defaults) + ')\n' + '\t(2) route("' + url + '", ' + JSON.stringify(defaults) + ')\n' + '(1) will always be chosen since it was registered first');
            }
        });
        canRoute.routes[url] = {
            test: new RegExp('^' + test + '($|' + wrapQuote(querySeparator) + ')'),
            route: url,
            names: names,
            defaults: defaults,
            length: url.split('/').length
        };
        return canRoute;
    };
    var oldProperties = null;
    var onRouteDataChange = function (ev, newProps, oldProps) {
        changingData = 1;
        if (!oldProperties) {
            oldProperties = oldProps;
        }
        clearTimeout(timer);
        timer = setTimeout(function () {
            var old = oldProperties;
            oldProperties = null;
            changingData = 0;
            var serialized = canRoute.data.serialize(), path = canRoute.param(serialized, true);
            canRoute._call('setURL', path, newProps, old);
            canEvent.dispatch.call(eventsObject, '__url', [
                path,
                lastHash
            ]);
            lastHash = path;
            changedAttrs = [];
        }, 10);
    };
    var stringCoercingMapDecorator = function (map) {
        var sym = canSymbol.for('can.route.stringCoercingMapDecorator');
        if (!map.attr[sym]) {
            var attrSuper = map.attr;
            map.attr = function (prop, val) {
                var serializable = this.define === undefined || this.define[prop] === undefined || !!this.define[prop].serialize, args;
                if (serializable) {
                    args = stringify(Array.apply(null, arguments));
                } else {
                    args = arguments;
                }
                return attrSuper.apply(this, args);
            };
            canReflect.setKeyValue(map.attr, sym, true);
        }
        return map;
    };
    var recursiveClean = function (old, cur, data) {
        for (var attr in old) {
            if (cur[attr] === undefined) {
                if ('removeAttr' in data) {
                    data.removeAttr(attr);
                } else {
                    cur[attr] = undefined;
                }
            } else if (Object.prototype.toString.call(old[attr]) === '[object Object]') {
                recursiveClean(old[attr], cur[attr], attrHelper.call(data, attr));
            }
        }
    };
    var matchCheck = function (source, matcher) {
        for (var prop in source) {
            var s = source[prop], m = matcher[prop];
            if (s && m && typeof s === 'object' && typeof matcher === 'object') {
                return matchCheck(s, m);
            }
            if (s != m) {
                return false;
            }
        }
        return true;
    };
    var setState = canRoute.setState = function () {
        var hash = canRoute._call('matchingPartOfURL');
        var oldParams = curParams;
        curParams = canRoute.deparam(hash);
        var matched;
        if (!changingData || hash !== lastHash) {
            canRoute.batch.start();
            recursiveClean(oldParams, curParams, canRoute.data);
            matched = curParams.route;
            delete curParams.route;
            canRoute.matched(matched);
            canRoute.attr(curParams);
            curParams.route = matched;
            canEvent.dispatch.call(eventsObject, '__url', [
                hash,
                lastHash
            ]);
            canRoute.batch.stop();
        }
    };
    var decode = function (str) {
        try {
            return decodeURIComponent(str);
        } catch (ex) {
            return unescape(str);
        }
    };
    assign(canRoute, {
        param: function (data, _setRoute) {
            var route, matches = 0, matchCount, routeName = data.route, propCount = 0, cpy, res, after, matcher;
            delete data.route;
            each(data, function () {
                propCount++;
            });
            each(canRoute.routes, function (temp, name) {
                matchCount = matchesData(temp, data);
                if (matchCount > matches) {
                    route = temp;
                    matches = matchCount;
                }
                if (matchCount >= propCount) {
                    return false;
                }
            });
            if (canRoute.routes[routeName] && matchesData(canRoute.routes[routeName], data) === matches) {
                route = canRoute.routes[routeName];
            }
            if (route) {
                cpy = assign({}, data);
                matcher = colonMatcher.test(route.route) ? colonMatcher : curliesMatcher;
                res = route.route.replace(matcher, function (whole, name) {
                    delete cpy[name];
                    return data[name] === route.defaults[name] ? '' : encodeURIComponent(data[name]);
                }).replace('\\', '');
                each(route.defaults, function (val, name) {
                    if (cpy[name] === val) {
                        delete cpy[name];
                    }
                });
                after = param(cpy);
                if (_setRoute) {
                    canRoute.matched(route.route);
                }
                return res + (after ? canRoute._call('querySeparator') + after : '');
            }
            return isEmptyObject(data) ? '' : canRoute._call('querySeparator') + param(data);
        },
        deparam: function (url) {
            var root = canRoute._call('root');
            if (root.lastIndexOf('/') === root.length - 1 && url.indexOf('/') === 0) {
                url = url.substr(1);
            }
            var route = { length: -1 }, querySeparator = canRoute._call('querySeparator'), paramsMatcher = canRoute._call('paramsMatcher');
            each(canRoute.routes, function (temp, name) {
                if (temp.test.test(url) && temp.length > route.length) {
                    route = temp;
                }
            });
            if (route.length > -1) {
                var parts = url.match(route.test), start = parts.shift(), remainder = url.substr(start.length - (parts[parts.length - 1] === querySeparator ? 1 : 0)), obj = remainder && paramsMatcher.test(remainder) ? deparam(remainder.slice(1)) : {};
                obj = deepAssign(true, {}, route.defaults, obj);
                each(parts, function (part, i) {
                    if (part && part !== querySeparator) {
                        obj[route.names[i]] = decode(part);
                    }
                });
                obj.route = route.route;
                return obj;
            }
            if (url.charAt(0) !== querySeparator) {
                url = querySeparator + url;
            }
            return paramsMatcher.test(url) ? deparam(url.slice(1)) : {};
        },
        map: function (data) {
            dev.warn('Set route.data directly instead of calling route.map');
            canRoute.data = data;
        },
        routes: {},
        ready: function (val) {
            devLog.warn('ready() is deprecated; use start() instead');
            canRoute.start();
            return canRoute;
        },
        start: function (val) {
            if (val !== true) {
                canRoute._setup();
                if (isBrowserWindow() || isWebWorker()) {
                    canRoute.setState();
                }
            }
            return canRoute;
        },
        url: function (options, merge) {
            if (merge) {
                Observation.add(eventsObject, '__url');
                var baseOptions = canRoute.deparam(canRoute._call('matchingPartOfURL'));
                options = assign(assign({}, baseOptions), options);
            }
            return canRoute._call('root') + canRoute.param(options);
        },
        link: function (name, options, props, merge) {
            return '<a ' + makeProps(assign({ href: canRoute.url(options, merge) }, props)) + '>' + name + '</a>';
        },
        current: function (options, subsetMatch) {
            Observation.add(eventsObject, '__url');
            if (subsetMatch) {
                var baseOptions = canRoute.deparam(canRoute._call('matchingPartOfURL'));
                return matchCheck(options, baseOptions);
            } else {
                return this._call('matchingPartOfURL') === canRoute.param(options);
            }
        },
        bindings: {
            hashchange: {
                paramsMatcher: paramsMatcher,
                querySeparator: '&',
                matchSlashes: false,
                bind: function () {
                    canEvent.on.call(window, 'hashchange', setState);
                },
                unbind: function () {
                    canEvent.on.call(window, 'hashchange', setState);
                },
                matchingPartOfURL: function () {
                    var loc = canRoute.location || location;
                    return loc.href.split(/#!?/)[1] || '';
                },
                setURL: function (path) {
                    if (location.hash !== '#' + path) {
                        location.hash = '!' + path;
                    }
                    return path;
                },
                root: '#!'
            }
        },
        defaultBinding: 'hashchange',
        currentBinding: null,
        _setup: function () {
            if (!canRoute.currentBinding) {
                canRoute._call('bind');
                canRoute.serializedCompute.addEventListener('change', onRouteDataChange);
                canRoute.currentBinding = canRoute.defaultBinding;
            }
        },
        _teardown: function () {
            if (canRoute.currentBinding) {
                canRoute._call('unbind');
                canRoute.serializedCompute.removeEventListener('change', onRouteDataChange);
                canRoute.currentBinding = null;
            }
            clearTimeout(timer);
            changingData = 0;
        },
        _call: function () {
            var args = makeArray(arguments), prop = args.shift(), binding = canRoute.bindings[canRoute.currentBinding || canRoute.defaultBinding], method = binding[prop];
            if (method.apply) {
                return method.apply(binding, args);
            } else {
                return method;
            }
        },
        matched: compute()
    });
    var bindToCanRouteData = function (name, args) {
        if (!canRoute.data[name]) {
            return;
        }
        return canRoute.data[name].apply(canRoute.data, args);
    };
    each([
        'addEventListener',
        'removeEventListener',
        'bind',
        'unbind',
        'on',
        'off'
    ], function (name) {
        canRoute[name] = function (eventName) {
            if (eventName === '__url') {
                return canEvent[name].apply(eventsObject, arguments);
            }
            return bindToCanRouteData(name, arguments);
        };
    });
    each([
        'delegate',
        'undelegate',
        'removeAttr',
        'compute',
        '_get',
        '___get',
        'each'
    ], function (name) {
        canRoute[name] = function () {
            return bindToCanRouteData(name, arguments);
        };
    });
    var routeData;
    var setRouteData = function (data) {
        routeData = data;
        return routeData;
    };
    var serializedCompute;
    Object.defineProperty(canRoute, 'serializedCompute', {
        get: function () {
            if (!serializedCompute) {
                serializedCompute = compute(function () {
                    return canRoute.data.serialize();
                });
            }
            return serializedCompute;
        }
    });
    Object.defineProperty(canRoute, 'data', {
        get: function () {
            if (routeData) {
                return routeData;
            } else if (types.DefaultMap) {
                if (types.DefaultMap.prototype.toObject) {
                    var DefaultRouteMap = types.DefaultMap.extend({ seal: false }, { '*': 'stringOrObservable' });
                    return setRouteData(new DefaultRouteMap());
                } else {
                    return setRouteData(stringCoercingMapDecorator(new types.DefaultMap()));
                }
            } else {
                throw new Error('can.route.data accessed without being set');
            }
        },
        set: function (data) {
            if (canReflect.isConstructorLike(data)) {
                data = new data();
            }
            if ('attr' in data) {
                setRouteData(stringCoercingMapDecorator(data));
            } else {
                setRouteData(data);
            }
        }
    });
    canRoute.attr = function () {
        return attrHelper.apply(canRoute.data, arguments);
    };
    canRoute.batch = canBatch;
    canReflect.setKeyValue(canRoute, canSymbol.for('can.isFunctionLike'), false);
    module.exports = namespace.route = canRoute;
});
/*steal-less@1.3.3#less-engine-node*/
define('steal-less@1.3.3#less-engine-node', [
    'require',
    'exports',
    'module',
    '@node-require'
], function (require, exports, module) {
    var nodeRequire = require('@node-require');
    module.exports = nodeRequire('less');
});
/*can-util@3.14.0#js/is-node/is-node*/
define('can-util@3.14.0#js/is-node/is-node', [
    'require',
    'exports',
    'module',
    'can-namespace'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var namespace = require('can-namespace');
        module.exports = namespace.isNode = function () {
            return typeof process === 'object' && {}.toString.call(process) === '[object process]';
        };
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-globals@1.2.0#location/location*/
define('can-globals@1.2.0#location/location', [
    'require',
    'exports',
    'module',
    'can-globals/global/global',
    'can-globals/can-globals-instance'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        require('can-globals/global/global');
        var globals = require('can-globals/can-globals-instance');
        globals.define('location', function () {
            return globals.getKeyValue('global').location;
        });
        module.exports = globals.makeExport('location');
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-route-pushstate@3.2.4#can-route-pushstate*/
define('can-route-pushstate@3.2.4#can-route-pushstate', [
    'require',
    'exports',
    'module',
    'can-util/js/is-node/is-node',
    'can-util/js/assign/assign',
    'can-util/js/each/each',
    'can-util/js/make-array/make-array',
    'can-util/js/diff-object/diff-object',
    'can-util/namespace',
    'can-globals/location/location',
    'can-event',
    'can-route'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var isNode = require('can-util/js/is-node/is-node');
        var extend = require('can-util/js/assign/assign');
        var each = require('can-util/js/each/each');
        var makeArray = require('can-util/js/make-array/make-array');
        var diffObject = require('can-util/js/diff-object/diff-object');
        var namespace = require('can-util/namespace');
        var LOCATION = require('can-globals/location/location');
        var canEvent = require('can-event');
        var route = require('can-route');
        var hasPushstate = window.history && window.history.pushState;
        var loc = LOCATION();
        var validProtocols = {
            'http:': true,
            'https:': true,
            '': true
        };
        var usePushStateRouting = hasPushstate && loc && validProtocols[loc.protocol];
        if (usePushStateRouting) {
            route.bindings.pushstate = {
                root: '/',
                matchSlashes: false,
                paramsMatcher: /^\?(?:[^=]+=[^&]*&)*[^=]+=[^&]*/,
                querySeparator: '?',
                bind: function () {
                    if (isNode()) {
                        return;
                    }
                    canEvent.on.call(document.documentElement, 'click', 'a', anchorClickHandler);
                    each(methodsToOverwrite, function (method) {
                        originalMethods[method] = window.history[method];
                        window.history[method] = function (state, title, url) {
                            var absolute = url.indexOf('http') === 0;
                            var loc = LOCATION();
                            var searchHash = loc.search + loc.hash;
                            if (!absolute && url !== loc.pathname + searchHash || absolute && url !== loc.href + searchHash) {
                                originalMethods[method].apply(window.history, arguments);
                                route.setState();
                            }
                        };
                    });
                    canEvent.on.call(window, 'popstate', route.setState);
                },
                unbind: function () {
                    canEvent.off.call(document.documentElement, 'click', 'a', anchorClickHandler);
                    each(methodsToOverwrite, function (method) {
                        window.history[method] = originalMethods[method];
                    });
                    canEvent.off.call(window, 'popstate', route.setState);
                },
                matchingPartOfURL: function () {
                    var root = cleanRoot(), location = LOCATION(), loc = location.pathname + location.search, index = loc.indexOf(root);
                    return loc.substr(index + root.length);
                },
                setURL: function (path, newProps, oldProps) {
                    var method = 'pushState';
                    var changed;
                    if (includeHash && path.indexOf('#') === -1 && window.location.hash) {
                        path += window.location.hash;
                    }
                    changed = diffObject(oldProps, newProps).map(function (d) {
                        return d.property;
                    });
                    if (replaceStateAttrs.length > 0) {
                        var toRemove = [];
                        for (var i = 0, l = changed.length; i < l; i++) {
                            if (replaceStateAttrs.indexOf(changed[i]) !== -1) {
                                method = 'replaceState';
                            }
                            if (replaceStateAttrs.once && replaceStateAttrs.once.indexOf(changed[i]) !== -1) {
                                toRemove.push(changed[i]);
                            }
                        }
                        if (toRemove.length > 0) {
                            removeAttrs(replaceStateAttrs, toRemove);
                            removeAttrs(replaceStateAttrs.once, toRemove);
                        }
                    }
                    window.history[method](null, null, route._call('root') + path);
                }
            };
            var anchorClickHandler = function (e) {
                    if (!(e.isDefaultPrevented ? e.isDefaultPrevented() : e.defaultPrevented === true)) {
                        var node = this._node || this;
                        var linksHost = node.host || window.location.host;
                        if (node.href === 'javascript://') {
                            return;
                        }
                        if (window.location.host === linksHost) {
                            var root = cleanRoot();
                            if (node.pathname.indexOf(root) === 0) {
                                var nodePathWithSearch = node.pathname + node.search;
                                var url = nodePathWithSearch.substr(root.length);
                                var curParams = route.deparam(url);
                                if (curParams.hasOwnProperty('route')) {
                                    includeHash = true;
                                    var windowPathWithSearch = window.location.pathname + window.location.search;
                                    var shouldCallPreventDefault = nodePathWithSearch !== windowPathWithSearch || node.hash === window.location.hash;
                                    window.history.pushState(null, null, node.href);
                                    if (shouldCallPreventDefault && e.preventDefault) {
                                        e.preventDefault();
                                    }
                                }
                            }
                        }
                    }
                }, cleanRoot = function () {
                    var domain = location.protocol + '//' + location.host, root = route._call('root'), index = root.indexOf(domain);
                    if (index === 0) {
                        return root.substr(domain.length);
                    }
                    return root;
                }, removeAttrs = function (arr, attrs) {
                    var index;
                    for (var i = attrs.length - 1; i >= 0; i--) {
                        if ((index = arr.indexOf(attrs[i])) !== -1) {
                            arr.splice(index, 1);
                        }
                    }
                }, methodsToOverwrite = [
                    'pushState',
                    'replaceState'
                ], originalMethods = {}, includeHash = true, replaceStateAttrs = [];
            route.defaultBinding = 'pushstate';
            extend(route, {
                replaceStateOn: function () {
                    var attrs = makeArray(arguments);
                    Array.prototype.push.apply(replaceStateAttrs, attrs);
                },
                replaceStateOnce: function () {
                    var attrs = makeArray(arguments);
                    replaceStateAttrs.once = makeArray(replaceStateAttrs.once);
                    Array.prototype.push.apply(replaceStateAttrs.once, attrs);
                    route.replaceStateOn.apply(this, arguments);
                },
                replaceStateOff: function () {
                    var attrs = makeArray(arguments);
                    removeAttrs(replaceStateAttrs, attrs);
                }
            });
        }
        module.exports = namespace.route = route;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-util@3.14.0#js/defaults/defaults*/
define('can-util@3.14.0#js/defaults/defaults', function (require, exports, module) {
    'use strict';
    module.exports = function (target) {
        var length = arguments.length;
        for (var i = 1; i < length; i++) {
            for (var prop in arguments[i]) {
                if (target[prop] === undefined) {
                    target[prop] = arguments[i][prop];
                }
            }
        }
        return target;
    };
});
/*can-util@3.14.0#js/string-to-any/string-to-any*/
define('can-util@3.14.0#js/string-to-any/string-to-any', function (require, exports, module) {
    'use strict';
    module.exports = function (str) {
        switch (str) {
        case 'NaN':
        case 'Infinity':
            return +str;
        case 'null':
            return null;
        case 'undefined':
            return undefined;
        case 'true':
        case 'false':
            return str === 'true';
        default:
            var val = +str;
            if (!isNaN(val)) {
                return val;
            } else {
                return str;
            }
        }
    };
});
/*can-simple-observable@1.0.2#can-simple-observable*/
define('can-simple-observable@1.0.2#can-simple-observable', [
    'require',
    'exports',
    'module',
    'can-reflect',
    'can-event/batch/batch',
    'can-observation',
    'can-cid',
    'can-namespace'
], function (require, exports, module) {
    var canReflect = require('can-reflect');
    var canBatch = require('can-event/batch/batch');
    var Observation = require('can-observation');
    var CID = require('can-cid');
    var ns = require('can-namespace');
    module.exports = ns.simpleObservable = function simpleObservable(initialValue) {
        var value = initialValue;
        var handlers = [];
        var fn = function (newValue) {
            if (arguments.length) {
                value = newValue;
                handlers.forEach(function (handler) {
                    canBatch.queue([
                        handler,
                        fn,
                        [newValue]
                    ]);
                }, this);
            } else {
                Observation.add(fn);
                return value;
            }
        };
        CID(fn);
        canReflect.assignSymbols(fn, {
            'can.onValue': function (handler) {
                handlers.push(handler);
            },
            'can.offValue': function (handler) {
                var index = handlers.indexOf(handler);
                handlers.splice(index, 1);
            },
            'can.setValue': function (newValue) {
                return fn(newValue);
            },
            'can.getValue': function () {
                return fn();
            }
        });
        return fn;
    };
});
/*can-define@1.5.7#can-define*/
define('can-define@1.5.7#can-define', [
    'require',
    'exports',
    'module',
    'can-event/lifecycle/lifecycle',
    'can-event/batch/batch',
    'can-event',
    'can-compute',
    'can-observation',
    'can-util/js/is-empty-object/is-empty-object',
    'can-util/js/assign/assign',
    'can-log/dev/dev',
    'can-cid',
    'can-util/js/is-plain-object/is-plain-object',
    'can-types',
    'can-util/js/each/each',
    'can-util/js/defaults/defaults',
    'can-util/js/string-to-any/string-to-any',
    'can-namespace',
    'can-symbol',
    'can-reflect',
    'can-util/js/single-reference/single-reference',
    'can-simple-observable',
    'can-define-lazy-value'
], function (require, exports, module) {
    'use strict';
    'format cjs';
    var eventLifecycle = require('can-event/lifecycle/lifecycle');
    var canBatch = require('can-event/batch/batch');
    var canEvent = require('can-event');
    var compute = require('can-compute');
    var Observation = require('can-observation');
    var isEmptyObject = require('can-util/js/is-empty-object/is-empty-object');
    var assign = require('can-util/js/assign/assign');
    var canLogDev = require('can-log/dev/dev');
    var CID = require('can-cid');
    var isPlainObject = require('can-util/js/is-plain-object/is-plain-object');
    var types = require('can-types');
    var each = require('can-util/js/each/each');
    var defaults = require('can-util/js/defaults/defaults');
    var stringToAny = require('can-util/js/string-to-any/string-to-any');
    var ns = require('can-namespace');
    var canSymbol = require('can-symbol');
    var canReflect = require('can-reflect');
    var singleReference = require('can-util/js/single-reference/single-reference');
    var simpleObervable = require('can-simple-observable');
    var defineLazyValue = require('can-define-lazy-value');
    var eventsProto, define, make, makeDefinition, getDefinitionsAndMethods, isDefineType, getDefinitionOrMethod;
    var defineConfigurableAndNotEnumerable = function (obj, prop, value) {
        Object.defineProperty(obj, prop, {
            configurable: true,
            enumerable: false,
            writable: true,
            value: value
        });
    };
    var eachPropertyDescriptor = function (map, cb) {
        for (var prop in map) {
            if (map.hasOwnProperty(prop)) {
                cb.call(map, prop, Object.getOwnPropertyDescriptor(map, prop));
            }
        }
    };
    function trapSets(observableValue) {
        return {
            observable: observableValue,
            lastSetValue: simpleObervable(),
            setValue: function (value) {
                canReflect.setValue(this.lastSetValue, value);
                if (this.observable) {
                    if (canSymbol.for('can.setValue') in this.observable) {
                        canReflect.setValue(this.observable, value);
                    } else {
                        this.observable.update();
                    }
                }
            }
        };
    }
    module.exports = define = ns.define = function (objPrototype, defines, baseDefine) {
        var prop, dataInitializers = Object.create(baseDefine ? baseDefine.dataInitializers : null), computedInitializers = Object.create(baseDefine ? baseDefine.computedInitializers : null);
        var result = getDefinitionsAndMethods(defines, baseDefine);
        result.dataInitializers = dataInitializers;
        result.computedInitializers = computedInitializers;
        each(result.definitions, function (definition, property) {
            define.property(objPrototype, property, definition, dataInitializers, computedInitializers);
        });
        if (objPrototype.hasOwnProperty('_data')) {
            for (prop in dataInitializers) {
                defineLazyValue(objPrototype._data, prop, dataInitializers[prop].bind(objPrototype), true);
            }
        } else {
            defineLazyValue(objPrototype, '_data', function () {
                var map = this;
                var data = {};
                for (var prop in dataInitializers) {
                    defineLazyValue(data, prop, dataInitializers[prop].bind(map), true);
                }
                return data;
            });
        }
        if (objPrototype.hasOwnProperty('_computed')) {
            for (prop in computedInitializers) {
                defineLazyValue(objPrototype._computed, prop, computedInitializers[prop].bind(objPrototype));
            }
        } else {
            defineLazyValue(objPrototype, '_computed', function () {
                var map = this;
                var data = Object.create(null);
                for (var prop in computedInitializers) {
                    defineLazyValue(data, prop, computedInitializers[prop].bind(map));
                }
                return data;
            });
        }
        if (!objPrototype.hasOwnProperty('_cid')) {
            defineLazyValue(objPrototype, '_cid', function () {
                return CID({});
            });
        }
        for (prop in eventsProto) {
            Object.defineProperty(objPrototype, prop, {
                enumerable: false,
                value: eventsProto[prop],
                configurable: true,
                writable: true
            });
        }
        Object.defineProperty(objPrototype, '_define', {
            enumerable: false,
            value: result,
            configurable: true,
            writable: true
        });
        var iteratorSymbol = canSymbol.iterator || canSymbol.for('iterator');
        if (!objPrototype[iteratorSymbol]) {
            defineConfigurableAndNotEnumerable(objPrototype, iteratorSymbol, function () {
                return new define.Iterator(this);
            });
        }
        return result;
    };
    define.extensions = function () {
    };
    var onlyType = function (obj) {
        for (var prop in obj) {
            if (prop !== 'type') {
                return false;
            }
        }
        return true;
    };
    define.property = function (objPrototype, prop, definition, dataInitializers, computedInitializers) {
        var propertyDefinition = define.extensions.apply(this, arguments);
        if (propertyDefinition) {
            definition = propertyDefinition;
        }
        var type = definition.type;
        if (type && canReflect.isConstructorLike(type)) {
            canLogDev.warn('can-define: the definition for ' + prop + (objPrototype.constructor.shortName ? ' on ' + objPrototype.constructor.shortName : '') + ' uses a constructor for "type". Did you mean "Type"?');
        }
        if (type && onlyType(definition) && type === define.types['*']) {
            Object.defineProperty(objPrototype, prop, {
                get: make.get.data(prop),
                set: make.set.events(prop, make.get.data(prop), make.set.data(prop), make.eventType.data(prop)),
                enumerable: true,
                configurable: true
            });
            return;
        }
        definition.type = type;
        var dataProperty = definition.get ? 'computed' : 'data', reader = make.read[dataProperty](prop), getter = make.get[dataProperty](prop), setter = make.set[dataProperty](prop), getInitialValue;
        var typeConvert = function (val) {
            return val;
        };
        if (definition.Type) {
            typeConvert = make.set.Type(prop, definition.Type, typeConvert);
        }
        if (type) {
            typeConvert = make.set.type(prop, type, typeConvert);
        }
        var eventsSetter = make.set.events(prop, reader, setter, make.eventType[dataProperty](prop));
        if (definition.value !== undefined || definition.Value !== undefined) {
            if (definition.value !== null && typeof definition.value === 'object') {
                canLogDev.warn('can-define: The value for ' + prop + ' is set to an object. This will be shared by all instances of the DefineMap. Use a function that returns the object instead.');
            }
            if (definition.value && canReflect.isConstructorLike(definition.value)) {
                canLogDev.warn('can-define: The "value" for ' + prop + ' is set to a constructor. Did you mean "Value" instead?');
            }
            getInitialValue = Observation.ignore(make.get.defaultValue(prop, definition, typeConvert, eventsSetter));
        }
        if (definition.get) {
            computedInitializers[prop] = make.compute(prop, definition.get, getInitialValue);
        } else if (getInitialValue) {
            dataInitializers[prop] = getInitialValue;
        }
        if (definition.get && definition.set) {
            setter = make.set.setter(prop, definition.set, make.read.lastSet(prop), setter, true);
        } else if (definition.set) {
            setter = make.set.setter(prop, definition.set, reader, eventsSetter, false);
        } else if (!definition.get) {
            setter = eventsSetter;
        } else if (definition.get.length < 1) {
            setter = function () {
                canLogDev.warn('can-define: Set value for property ' + prop + (objPrototype.constructor.shortName ? ' on ' + objPrototype.constructor.shortName : '') + ' ignored, as its definition has a zero-argument getter and no setter');
            };
        }
        if (type) {
            setter = make.set.type(prop, type, setter);
        }
        if (definition.Type) {
            setter = make.set.Type(prop, definition.Type, setter);
        }
        Object.defineProperty(objPrototype, prop, {
            get: getter,
            set: setter,
            enumerable: 'serialize' in definition ? !!definition.serialize : !definition.get,
            configurable: true
        });
    };
    define.Constructor = function (defines) {
        var constructor = function (props) {
            define.setup.call(this, props);
        };
        define(constructor.prototype, defines);
        return constructor;
    };
    make = {
        compute: function (prop, get, defaultValueFn) {
            return function () {
                var map = this, defaultValue = defaultValueFn && defaultValueFn.call(this), computeFn, valueTrap, computeObj;
                var boundGet = function () {
                    return get.call(map, canReflect.getValue(computeObj.valueTrap.lastSetValue));
                };
                if (get.length < 2) {
                    if (defaultValue && defaultValue.isComputed) {
                        computeFn = defaultValue;
                        valueTrap = trapSets(computeFn);
                    } else {
                        computeFn = new Observation(boundGet, map);
                        valueTrap = trapSets(computeFn);
                        canReflect.setValue(valueTrap.lastSetValue, defaultValue);
                    }
                } else {
                    if (defaultValue) {
                        computeFn = defaultValue.isComputed ? defaultValue : compute.async(defaultValue, get, map);
                    } else {
                        computeFn = compute.async(defaultValue, get, map);
                    }
                    valueTrap = trapSets(computeFn);
                }
                computeObj = {
                    oldValue: undefined,
                    compute: computeFn,
                    count: 0,
                    handler: function (newVal) {
                        var oldValue = computeObj.oldValue;
                        computeObj.oldValue = newVal;
                        canEvent.dispatch.call(map, {
                            type: prop,
                            target: map,
                            batchNum: canBatch.batchNum
                        }, [
                            newVal,
                            oldValue
                        ]);
                    },
                    valueTrap: valueTrap
                };
                return computeObj;
            };
        },
        set: {
            data: function (prop) {
                return function (newVal) {
                    this._data[prop] = newVal;
                };
            },
            computed: function (prop) {
                return function (val) {
                    this._computed[prop].valueTrap.setValue(val);
                };
            },
            events: function (prop, getCurrent, setData, eventType) {
                return function (newVal) {
                    if (this.__inSetup) {
                        setData.call(this, newVal);
                    } else {
                        var current = getCurrent.call(this);
                        if (newVal !== current) {
                            setData.call(this, newVal);
                            canEvent.dispatch.call(this, {
                                type: prop,
                                target: this
                            }, [
                                newVal,
                                current
                            ]);
                        }
                    }
                };
            },
            setter: function (prop, setter, getCurrent, setEvents, hasGetter) {
                return function (value) {
                    var asyncTimer;
                    var self = this;
                    canBatch.start();
                    var setterCalled = false, current = getCurrent.call(this), setValue = setter.call(this, value, function (value) {
                            setEvents.call(self, value);
                            setterCalled = true;
                            clearTimeout(asyncTimer);
                        }, current);
                    if (setterCalled) {
                        canBatch.stop();
                    } else {
                        if (hasGetter) {
                            if (setValue !== undefined) {
                                if (current !== setValue) {
                                    setEvents.call(this, setValue);
                                }
                                canBatch.stop();
                            } else if (setter.length === 0) {
                                setEvents.call(this, value);
                                canBatch.stop();
                                return;
                            } else if (setter.length === 1) {
                                canBatch.stop();
                            } else {
                                asyncTimer = setTimeout(function () {
                                    canLogDev.warn('can/map/setter.js: Setter "' + prop + '" did not return a value or call the setter callback.');
                                }, canLogDev.warnTimeout);
                                canBatch.stop();
                                return;
                            }
                        } else {
                            if (setValue !== undefined) {
                                setEvents.call(this, setValue);
                                canBatch.stop();
                            } else if (setter.length === 0) {
                                setEvents.call(this, value);
                                canBatch.stop();
                                return;
                            } else if (setter.length === 1) {
                                setEvents.call(this, undefined);
                                canBatch.stop();
                            } else {
                                asyncTimer = setTimeout(function () {
                                    canLogDev.warn('can/map/setter.js: Setter "' + prop + '" did not return a value or call the setter callback.');
                                }, canLogDev.warnTimeout);
                                canBatch.stop();
                                return;
                            }
                        }
                    }
                };
            },
            type: function (prop, type, set) {
                if (typeof type === 'object') {
                    return make.set.Type(prop, type, set);
                } else {
                    return function (newValue) {
                        return set.call(this, type.call(this, newValue, prop));
                    };
                }
            },
            Type: function (prop, Type, set) {
                if (Array.isArray(Type) && types.DefineList) {
                    Type = types.DefineList.extend({ '#': Type[0] });
                } else if (typeof Type === 'object') {
                    if (types.DefineMap) {
                        Type = types.DefineMap.extend(Type);
                    } else {
                        Type = define.constructor(Type);
                    }
                }
                return function (newValue) {
                    if (newValue instanceof Type || newValue == null) {
                        return set.call(this, newValue);
                    } else {
                        return set.call(this, new Type(newValue));
                    }
                };
            }
        },
        eventType: {
            data: function (prop) {
                return function (newVal, oldVal) {
                    return oldVal !== undefined || this._data.hasOwnProperty(prop) ? 'set' : 'add';
                };
            },
            computed: function () {
                return function () {
                    return 'set';
                };
            }
        },
        read: {
            data: function (prop) {
                return function () {
                    return this._data[prop];
                };
            },
            computed: function (prop) {
                return function () {
                    return canReflect.getValue(this._computed[prop].compute);
                };
            },
            lastSet: function (prop) {
                return function () {
                    var lastSetValue = this._computed[prop].valueTrap.lastSetValue;
                    return canReflect.getValue(lastSetValue);
                };
            }
        },
        get: {
            defaultValue: function (prop, definition, typeConvert, callSetter) {
                return function () {
                    var value = definition.value;
                    if (value !== undefined) {
                        if (typeof value === 'function') {
                            value = value.call(this);
                        }
                        value = typeConvert(value);
                    } else {
                        var Value = definition.Value;
                        if (Value) {
                            value = typeConvert(new Value());
                        }
                    }
                    if (definition.set) {
                        var VALUE;
                        var sync = true;
                        var setter = make.set.setter(prop, definition.set, function () {
                        }, function (value) {
                            if (sync) {
                                VALUE = value;
                            } else {
                                callSetter.call(this, value);
                            }
                        }, definition.get);
                        setter.call(this, value);
                        sync = false;
                        return VALUE;
                    }
                    return value;
                };
            },
            data: function (prop) {
                return function () {
                    if (!this.__inSetup) {
                        Observation.add(this, prop);
                    }
                    return this._data[prop];
                };
            },
            computed: function (prop) {
                return function () {
                    return canReflect.getValue(this._computed[prop].compute);
                };
            }
        }
    };
    define.behaviors = [
        'get',
        'set',
        'value',
        'Value',
        'type',
        'Type',
        'serialize'
    ];
    var addDefinition = function (definition, behavior, value) {
        if (behavior === 'type') {
            var behaviorDef = value;
            if (typeof behaviorDef === 'string') {
                behaviorDef = define.types[behaviorDef];
                if (typeof behaviorDef === 'object') {
                    assign(definition, behaviorDef);
                    behaviorDef = behaviorDef[behavior];
                }
            }
            if (typeof behaviorDef !== 'undefined') {
                definition[behavior] = behaviorDef;
            }
        } else {
            definition[behavior] = value;
        }
    };
    makeDefinition = function (prop, def, defaultDefinition) {
        var definition = {};
        each(def, function (value, behavior) {
            addDefinition(definition, behavior, value);
        });
        each(defaultDefinition, function (value, prop) {
            if (definition[prop] === undefined) {
                if (prop !== 'type' && prop !== 'Type') {
                    definition[prop] = value;
                }
            }
        });
        if (typeof def.type !== 'string') {
            if (!definition.type && !definition.Type) {
                defaults(definition, defaultDefinition);
            }
            if (isEmptyObject(definition)) {
                definition.type = define.types['*'];
            }
        }
        return definition;
    };
    getDefinitionOrMethod = function (prop, value, defaultDefinition) {
        var definition;
        if (typeof value === 'string') {
            definition = { type: value };
        } else if (typeof value === 'function') {
            if (canReflect.isConstructorLike(value)) {
                definition = { Type: value };
            } else if (isDefineType(value)) {
                definition = { type: value };
            }
        } else if (Array.isArray(value)) {
            definition = { Type: value };
        } else if (isPlainObject(value)) {
            definition = value;
        }
        if (definition) {
            return makeDefinition(prop, definition, defaultDefinition);
        } else {
            return value;
        }
    };
    getDefinitionsAndMethods = function (defines, baseDefines) {
        var definitions = Object.create(baseDefines ? baseDefines.definitions : null);
        var methods = {};
        var defaults = defines['*'], defaultDefinition;
        if (defaults) {
            delete defines['*'];
            defaultDefinition = getDefinitionOrMethod('*', defaults, {});
        } else {
            defaultDefinition = Object.create(null);
        }
        eachPropertyDescriptor(defines, function (prop, propertyDescriptor) {
            var value;
            if (propertyDescriptor.get || propertyDescriptor.set) {
                value = {
                    get: propertyDescriptor.get,
                    set: propertyDescriptor.set
                };
            } else {
                value = propertyDescriptor.value;
            }
            if (prop === 'constructor') {
                methods[prop] = value;
                return;
            } else {
                var result = getDefinitionOrMethod(prop, value, defaultDefinition);
                if (result && typeof result === 'object' && !isEmptyObject(result)) {
                    definitions[prop] = result;
                } else {
                    if (typeof result === 'function') {
                        methods[prop] = result;
                    } else if (typeof result !== 'undefined') {
                        canLogDev.error(prop + (this.constructor.shortName ? ' on ' + this.constructor.shortName : '') + ' does not match a supported propDefinition. See: https://canjs.com/doc/can-define.types.propDefinition.html');
                    }
                }
            }
        });
        if (defaults) {
            defines['*'] = defaults;
        }
        return {
            definitions: definitions,
            methods: methods,
            defaultDefinition: defaultDefinition
        };
    };
    eventsProto = assign({}, canEvent);
    assign(eventsProto, {
        _eventSetup: function () {
        },
        _eventTeardown: function () {
        },
        addEventListener: function (eventName, handler) {
            var computedBinding = this._computed && this._computed[eventName];
            if (computedBinding && computedBinding.compute) {
                if (!computedBinding.count) {
                    computedBinding.count = 1;
                    canReflect.onValue(computedBinding.compute, computedBinding.handler);
                    computedBinding.oldValue = canReflect.getValue(computedBinding.compute);
                } else {
                    computedBinding.count++;
                }
            }
            return eventLifecycle.addAndSetup.apply(this, arguments);
        },
        removeEventListener: function (eventName, handler) {
            var computedBinding = this._computed && this._computed[eventName];
            if (computedBinding) {
                if (computedBinding.count === 1) {
                    computedBinding.count = 0;
                    canReflect.offValue(computedBinding.compute, computedBinding.handler);
                } else {
                    computedBinding.count--;
                }
            }
            return eventLifecycle.removeAndTeardown.apply(this, arguments);
        }
    });
    eventsProto.on = eventsProto.bind = eventsProto.addEventListener;
    eventsProto.off = eventsProto.unbind = eventsProto.removeEventListener;
    canReflect.set(eventsProto, canSymbol.for('can.onKeyValue'), function (key, handler) {
        var translationHandler = function (ev, newValue, oldValue) {
            handler(newValue, oldValue);
        };
        singleReference.set(handler, this, translationHandler, key);
        this.addEventListener(key, translationHandler);
    });
    canReflect.set(eventsProto, canSymbol.for('can.offKeyValue'), function (key, handler) {
        this.removeEventListener(key, singleReference.getAndDelete(handler, this, key));
    });
    delete eventsProto.one;
    define.setup = function (props, sealed) {
        CID(this);
        Object.defineProperty(this, '_cid', {
            value: this._cid,
            enumerable: false,
            writable: false
        });
        Object.defineProperty(this, 'constructor', {
            value: this.constructor,
            enumerable: false,
            writable: false
        });
        Object.defineProperty(this, '__bindEvents', {
            value: Object.create(null),
            enumerable: false,
            writable: false
        });
        var definitions = this._define.definitions;
        var instanceDefinitions = Object.create(null);
        var map = this;
        canReflect.eachKey(props, function (value, prop) {
            if (definitions[prop] !== undefined) {
                map[prop] = value;
            } else {
                var def = define.makeSimpleGetterSetter(prop);
                instanceDefinitions[prop] = {};
                Object.defineProperty(map, prop, def);
                map[prop] = define.types.observable(value);
            }
        });
        if (!isEmptyObject(instanceDefinitions)) {
            defineConfigurableAndNotEnumerable(this, '_instanceDefinitions', instanceDefinitions);
        }
        this._data;
        this._computed;
        if (sealed !== false) {
            Object.seal(this);
        }
    };
    define.replaceWith = defineLazyValue;
    define.eventsProto = eventsProto;
    define.defineConfigurableAndNotEnumerable = defineConfigurableAndNotEnumerable;
    define.make = make;
    define.getDefinitionOrMethod = getDefinitionOrMethod;
    var simpleGetterSetters = {};
    define.makeSimpleGetterSetter = function (prop) {
        if (!simpleGetterSetters[prop]) {
            var setter = make.set.events(prop, make.get.data(prop), make.set.data(prop), make.eventType.data(prop));
            simpleGetterSetters[prop] = {
                get: make.get.data(prop),
                set: function (newVal) {
                    return setter.call(this, define.types.observable(newVal));
                },
                enumerable: true
            };
        }
        return simpleGetterSetters[prop];
    };
    define.Iterator = function (obj) {
        this.obj = obj;
        this.definitions = Object.keys(obj._define.definitions);
        this.instanceDefinitions = obj._instanceDefinitions ? Object.keys(obj._instanceDefinitions) : Object.keys(obj);
        this.hasGet = typeof obj.get === 'function';
    };
    define.Iterator.prototype.next = function () {
        var key;
        if (this.definitions.length) {
            key = this.definitions.shift();
            var def = this.obj._define.definitions[key];
            if (def.get) {
                return this.next();
            }
        } else if (this.instanceDefinitions.length) {
            key = this.instanceDefinitions.shift();
        } else {
            return {
                value: undefined,
                done: true
            };
        }
        return {
            value: [
                key,
                this.hasGet ? this.obj.get(key) : this.obj[key]
            ],
            done: false
        };
    };
    isDefineType = function (func) {
        return func && func.canDefineType === true;
    };
    define.types = {
        'date': function (str) {
            var type = typeof str;
            if (type === 'string') {
                str = Date.parse(str);
                return isNaN(str) ? null : new Date(str);
            } else if (type === 'number') {
                return new Date(str);
            } else {
                return str;
            }
        },
        'number': function (val) {
            if (val == null) {
                return val;
            }
            return +val;
        },
        'boolean': function (val) {
            if (val == null) {
                return val;
            }
            if (val === 'false' || val === '0' || !val) {
                return false;
            }
            return true;
        },
        'observable': function (newVal) {
            if (Array.isArray(newVal) && types.DefineList) {
                newVal = new types.DefineList(newVal);
            } else if (isPlainObject(newVal) && types.DefineMap) {
                newVal = new types.DefineMap(newVal);
            }
            return newVal;
        },
        'stringOrObservable': function (newVal) {
            if (Array.isArray(newVal)) {
                return new types.DefaultList(newVal);
            } else if (isPlainObject(newVal)) {
                return new types.DefaultMap(newVal);
            } else {
                return define.types.string(newVal);
            }
        },
        'htmlbool': function (val) {
            if (val === '') {
                return true;
            }
            return !!stringToAny(val);
        },
        '*': function (val) {
            return val;
        },
        'any': function (val) {
            return val;
        },
        'string': function (val) {
            if (val == null) {
                return val;
            }
            return '' + val;
        },
        'compute': {
            set: function (newValue, setVal, setErr, oldValue) {
                if (newValue && newValue.isComputed) {
                    return newValue;
                }
                if (oldValue && oldValue.isComputed) {
                    oldValue(newValue);
                    return oldValue;
                }
                return newValue;
            },
            get: function (value) {
                return value && value.isComputed ? value() : value;
            }
        }
    };
});
/*can-define@1.5.7#define-helpers/define-helpers*/
define('can-define@1.5.7#define-helpers/define-helpers', [
    'require',
    'exports',
    'module',
    'can-define',
    'can-event/batch/batch',
    'can-event',
    'can-reflect'
], function (require, exports, module) {
    var define = require('can-define');
    var canBatch = require('can-event/batch/batch');
    var canEvent = require('can-event');
    var canReflect = require('can-reflect');
    var defineHelpers = {
        defineExpando: function (map, prop, value) {
            var constructorDefines = map._define.definitions;
            if (constructorDefines && constructorDefines[prop]) {
                return;
            }
            var instanceDefines = map._instanceDefinitions;
            if (!instanceDefines) {
                Object.defineProperty(map, '_instanceDefinitions', {
                    configurable: true,
                    enumerable: false,
                    value: {}
                });
                instanceDefines = map._instanceDefinitions;
            }
            if (!instanceDefines[prop]) {
                var defaultDefinition = map._define.defaultDefinition || { type: define.types.observable };
                define.property(map, prop, defaultDefinition, {}, {});
                map._data[prop] = defaultDefinition.type ? defaultDefinition.type(value) : define.types.observable(value);
                instanceDefines[prop] = defaultDefinition;
                canBatch.start();
                canEvent.dispatch.call(map, {
                    type: '__keys',
                    target: map
                });
                if (map._data[prop] !== undefined) {
                    canEvent.dispatch.call(map, {
                        type: prop,
                        target: map
                    }, [
                        map._data[prop],
                        undefined
                    ]);
                }
                canBatch.stop();
                return true;
            }
        },
        reflectSerialize: function (unwrapped) {
            var constructorDefinitions = this._define.definitions;
            var defaultDefinition = this._define.defaultDefinition;
            this.each(function (val, name) {
                var propDef = constructorDefinitions[name];
                if (propDef && typeof propDef.serialize === 'function') {
                    val = propDef.serialize.call(this, val, name);
                } else if (defaultDefinition && typeof defaultDefinition.serialize === 'function') {
                    val = defaultDefinition.serialize.call(this, val, name);
                } else {
                    val = canReflect.serialize(val);
                }
                if (val !== undefined) {
                    unwrapped[name] = val;
                }
            }, this);
            return unwrapped;
        },
        reflectUnwrap: function (unwrapped) {
            this.forEach(function (value, key) {
                if (value !== undefined) {
                    unwrapped[key] = canReflect.unwrap(value);
                }
            });
            return unwrapped;
        }
    };
    module.exports = defineHelpers;
});
/*can-util@3.14.0#js/is-promise-like/is-promise-like*/
define('can-util@3.14.0#js/is-promise-like/is-promise-like', function (require, exports, module) {
    'use strict';
    module.exports = function (obj) {
        return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof obj.then === 'function';
    };
});